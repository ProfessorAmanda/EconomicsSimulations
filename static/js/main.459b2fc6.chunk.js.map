{"version":3,"sources":["components/SimBarOption.js","lib/constants.js","components/SimBar.js","components/StartHere.js","components/SelectorButtonGroup.js","components/PopBar.js","components/Collapsable.js","lib/types.js","components/DotPlot.js","components/PopTable.js","components/ChartContainer.js","components/SampleSizeInput.js","lib/stats-utils.js","components/LawOfLargeNumbers/SimulateSamples.js","components/LawOfLargeNumbers/LLNSimulation.js","components/LawOfLargeNumbers/LawOfLargeNumbers.js","components/CentralLimitTheorem/SampleMeanChart.js","components/CentralLimitTheorem/SampleMeansSimulator.js","components/CentralLimitTheorem/SampleMeansTable.js","components/CentralLimitTheorem/CLTSimulation.js","components/CentralLimitTheorem/CentralLimitTheorem.js","components/JointDistributions/MeanSDInput.js","components/JointDistributions/JointChart.js","components/JointDistributions/JDCharts.js","components/InputSlider.js","components/JointDistributions/JDSimulation.js","components/JointDistributions/JointDistributions.js","components/OmittedVariableBias/CoefficientInput.js","components/OmittedVariableBias/OmittedVariableChart.js","components/OmittedVariableBias/OVBSimulation.js","components/OmittedVariableBias/OmittedVariableBias.js","components/ConfidenceIntervals/ConfidenceInputs.js","components/ConfidenceIntervals/ConfidenceIntervalsChart.js","components/ConfidenceIntervals/ManySamplesInput.js","components/ConfidenceIntervals/SamplesTable.js","components/ConfidenceIntervals/PopulationChart.js","components/ConfidenceIntervals/CISimulation.js","components/ConfidenceIntervals/ConfidenceIntervals.js","components/HypothesisTesting/TToPval.js","components/HypothesisTesting/TTest.js","components/HypothesisTesting/TestInputs.js","components/HypothesisTesting/HypothesisDropdown.js","components/HypothesisTesting/HTSimulation.js","components/HypothesisTesting/HypothesisTesting.js","components/LeastSquares/NewPointsInput.js","components/LeastSquares/LeastSquaresChart.js","components/LeastSquares/PlotLine.js","components/LeastSquares/LeastSquaresSimulation.js","components/LeastSquares/LeastSquares.js","components/SimulationContainer.js","components/SimulationMenu.js","App.js","registerServiceWorker.js","index.js"],"names":["SimBarOption","section","setSection","Card","body","outline","color","className","CardText","style","overflowY","boxSizing","description","Button","onClick","name","VALUES","Normal","xmaxval","xminval","ymaxval","title","xLabel","Uniform","Exponential","Mystery","VALUES_ALT","TEXTS","TEXTS_ALT","HYPOTHESIS_OPTIONS","oneSample","type","hypoText","nullH","alterH","id","twoSample","MODULES","SimBar","sections","map","StartHere","start","showApp","Fade","in","SelectorButtonGroup","options","select","selected","buttons","option","backgroundColor","ButtonGroup","PopBar","sim","setPop","useState","setSelected","modes","mode","Collapsable","children","margin","width","textAlign","marginBottom","isOpened","springConfig","presets","height","padding","distributionType","PropTypes","oneOf","dataObjectArrayType","arrayOf","shape","x","number","isRequired","y","string","data","enableMouseTracking","bool","showInLegend","visible","label","object","size","mean","lowerConf","upperConf","confidenceLevel","distribution","oneOfType","DotPlot","series","xMin","xMax","yMax","chart","setChart","useEffect","newChart","plotOptions","animation","duration","easing","legend","symbolHeight","symbolWidth","symbolRadius","xAxis","min","max","enabled","text","startOnTick","endOnTick","yAxis","seriesObject","length","turboThreshold","tooltip","pointFormat","highcharts","Highcharts","Label","PopTable","popArray","sampleIDs","popShape","rows","includes","undefined","Table","striped","yLabel","ChartContainer","popMean","sampled","sampleMean","format","Container","fluid","Row","Alert","Col","lg","md","obj","_","round","SampleSizeInput","maxSize","handleClick","sampleSize","setSampleSize","InputGroup","Input","align","placeholder","value","onChange","event","target","InputGroupAddon","addonType","disabled","generateNormal","standardDev","population","PD","rnorm","num","counts","countBy","entries","forEach","amt","count","i","push","shuffle","index","generateUniform","low","hi","runif","generateExponential","lambda","rexp","generateChiSquared","degreesOfFreedom","rchisq","generateMystery","firstrange","sqrt","firstpopMin","secondrange","secondpopMin","clearedArray","popDict","newCleared","stateCopy","sum","j","random","pop","finalPopArray","Array","fill","val","dataFromDistribution","distType","getDistributionFunction","populationMean","p","populationStandardDev","std","SimulateSamples","setSampled","meanLine","setMeanLine","states","hover","normal","inactive","n","timer","setInterval","clearInterval","sample","avg","Collapse","isOpen","CardBody","LLNSimulation","stage","setStage","setSampleMean","setPopArray","setPopMean","newPop","newMean","marginTop","LawOfLargeNumbers","setPopType","SampleMeanChart","props","state","sampleMeans","popMeans","values","sd","curve","this","show","sampleMeanSeries","xAxisMeasurement","yAxisMeasurement","normalized","Math","apply","sampleMax","sampleMin","sampleMaxX","update","setState","showLastLabel","Component","SampleMeansSimulator","addSamples","numberResamples","setNumberResamples","resampleSize","setResampleSize","resample","samplePop","newSamples","runSim","SampleMeansTable","tableBody","CLTSimulation","mainSampleSize","setSampleMeans","standardNormal","setStandardNormal","xvalue","s","newMeans","active","means","newSampleMeans","CentralLimitTheorem","MeanSDInput","setMean","setSD","InputGroupText","step","JointChart","jointData","sharedOptions","nodeId","marginLeft","marginRight","position","float","colors","node","yScale","yFormat","e","formattedX","formattedY","axisBottom","tickSize","legendPosition","legendOffset","axisLeft","JDCharts","parentData","childData","setNodeId","handleMouseMove","useCallback","handleMouseLeave","animate","top","right","bottom","left","xScale","blendMode","xFormat","nodeSize","useMemo","enableGridX","enableGridY","onMouseMove","onMouseLeave","InputSlider","JDSimulation","parentMean","setParentMean","childMean","setChildMean","parentSD","setParentSD","childSD","setChildSD","correlation","setCorrelation","parent","child","joint","allData","setAllData","xl","xs","toFixed","covariance","abs","covMatrix","MultivariateNormal","jointSeries","parentHeight","childHeight","parentCounts","parentSeries","childCounts","childSeries","generate","JointWrapper","CoefficientInput","beta","setBeta","delta","setDelta","OmittedVariableChart","dataPoints","naiveLine","correctedLine","myChart","setMyChart","zoomtype","OVBSimulation","setCovariance","setSeries","showCorrect","setShowCorrect","points","generateData","OBS","generatePoints","slope","int","epsilon","ones","colOne","colTwo","scores","scorePoint","studyScores","naiveReg","regression","linear","naiveSlope","equation","naiveInt","X","transpose","matrix","Y","inverse","inv","multiply","bHat","parseFloat","get","sm","adjustCorrelation","covarianceMatrix","stdX","stdY","seriesArr","a","b","generateSeries","offset","OmittedVariableBias","ConfidenceInputs","setDistType","confLevel","setConfLevel","pct","slice","ConfidenceIntervalsChart","samples","containsMean","doesntContainMean","sampleObject","high","tooltipFormat","headerFormat","outside","borderColor","inverted","zoomType","events","selection","point","click","cursor","reversed","tickPixelInterval","tickInterval","centerInCategory","allowPointSelect","marker","symbol","radius","zIndex","toString","ManySamplesInput","populationSize","SamplesTable","samplesTable","toUpperCase","reverse","overflow","PopulationChart","More","CISimulation","setSamples","unselect","charts","generateSamples","replications","sampleObjects","ciFunction","jStat","normalci","tci","indexedSamples","filter","ConfidenceIntervals","TToPval","TTest","hypothesis","mue0","popArr","setPopArr","sampleSd","setSampleSd","alpha","setAlpha","tScore","setTScore","setSim","pVal","setPVal","getT","x_bar","getPVal","t","degreeOF","dof","Error","p1","sampleArr","ranNum","floor","handleSample","TestInputs","testType","setTestType","HypothesisDropdown","setHypothesis","open","setOpen","menuOptions","DropdownItem","Dropdown","toggle","DropdownToggle","caret","DropdownMenu","HTSimulation","pplShape","setPplShape","setMue0","HypothesisTesting","NewPointsInput","numPoints","setNumPoints","LeastSquaresChart","linePoints","setSquareAreas","plotBorderColor","plotBorderWidth","hideDelay","buildSquare","p2","dist","lowestPt","pairs","areas","squares","dashStyle","fillColor","annotations","draggable","shapes","PlotLine","squareAreas","generateBestLine","reduce","LeastSquaresSimulation","setPoints","setLinePoints","setSlope","intercept","setIntercept","linearPts","sort","paddingTop","newPoints","precision","LeastSquares","SimulationContainer","setMode","SimulationMenu","setStart","logo","setLogo","setTimeout","display","App","Boolean","window","location","hostname","match","navigator","serviceWorker","ready","then","registration","unregister","ReactDOM","render","document","getElementById"],"mappings":"wjBAIe,SAASA,EAAT,GAAgD,IAAxBC,EAAuB,EAAvBA,QAASC,EAAc,EAAdA,WAC9C,OACE,eAACC,EAAA,EAAD,CAAMC,MAAI,EAACC,SAAO,EAACC,MAAM,UAAUC,UAAU,YAA7C,UACE,cAACC,EAAA,EAAD,CAAUC,MAAO,CAACC,UAAW,OAAQC,UAAW,eAAhD,SAAkEV,EAAQW,cAC1E,cAACC,EAAA,EAAD,CAAQR,SAAO,EAACC,MAAM,UAAUQ,QAAS,kBAAMZ,EAAWD,EAAQc,OAAlE,SACGd,EAAQc,UCTV,IAEMC,EAAS,CACpBC,OAAQ,CAAEC,QAAS,GAAIC,QAAS,GAAIC,QAAS,GAAIC,MAAO,kBAAmBC,OAAQ,WACnFC,QAAS,CAAEL,QAAS,GAAIC,SAAU,GAAIC,QAAS,GAAIC,MAAO,kBAAmBC,OAAQ,WACrFE,YAAa,CAAEN,QAAS,IAAKC,QAAS,EAAGC,QAAS,GAAIC,MAAO,gCAAiCC,OAAQ,sBACtG,cAAe,CAACJ,QAAS,GAAIC,QAAS,EAAGC,QAAS,GAAIC,MAAO,uBAAwBC,OAAQ,WAC7FG,QAAS,CAAEP,QAAS,GAAIC,QAAS,GAAIC,QAAS,GAAIC,MAAM,sBAAuBC,OAAQ,gBAG5EI,EAAa,CACxBT,OAAQ,CAAEC,QAAS,GAAIC,QAAS,GAAIE,MAAO,kBAAmBC,OAAQ,WACtEC,QAAS,CAAEL,QAAS,GAAIC,QAAS,GAAIE,MAAO,sBAAuBC,OAAQ,eAC3EE,YAAa,CAAEN,QAAS,IAAKC,QAAS,EAAGE,MAAO,gCAAiCC,OAAQ,sBACzF,cAAe,CAACJ,QAAS,GAAIC,QAAS,EAAGE,MAAO,uBAAwBC,OAAQ,YAGrEK,EAAQ,CACnBV,OAAQ,CAAC,0BAA2B,OAAO,WAAY,qBAEvDO,YAAa,CAAC,WAAY,qBAAqB,yBAA0B,uBACzE,cAAe,CAAC,cAAe,mBAAmB,6BAA6B,sBAC/EC,QAAS,CAAC,aAAc,kCAAmC,uBAAwB,aAGxEG,EAAY,CACvBX,OAAQ,CAAC,0BAA2B,QACpCM,QAAS,CAAC,aAAc,mCACxBC,YAAa,CAAC,WAAY,sBAC1B,cAAe,CAAC,cAAe,qBAGpBK,EAAqB,CAChCC,UAAW,CACT,CACEC,KAAM,SACNC,SAAU,0CACVC,MAAO,uBACPC,OAAQ,kBACRC,GAAI,GAEN,CACEJ,KAAM,SACNC,SAAU,0CACVC,MAAO,uBACPC,OAAQ,kBACRC,GAAI,GAEN,CACEJ,KAAM,IACNC,SAAU,uDACVC,MAAO,kBACPC,OAAQ,uBACRC,GAAI,IAGRC,UAAW,CACT,CACEJ,SAAU,0DACVC,MAAO,oCACPC,OAAQ,+BACRC,GAAI,GAEN,CACEH,SAAU,yDACVC,MAAO,oCACPC,OAAQ,+BACRC,GAAI,GAEN,CACEH,SAAU,0EACVC,MAAO,+BACPC,OAAQ,oCACRC,GAAI,KAKGE,EAAU,CACrB,CACEtB,KAAM,uBACNH,YAAa,gOAEf,CACEG,KAAM,wBACNH,YAAa,oZAEf,CACEG,KAAM,sBACNH,YAAa,iGAEf,CACEG,KAAM,gBACNH,YAAa,kNAEf,CACEG,KAAM,wBACNH,YAAa,0LAEf,CACEG,KAAM,uBACNH,YAAa,uJC3FF,SAAS0B,EAAT,GAAiC,IAAfpC,EAAc,EAAdA,WAEzBqC,EAAWF,EAAQG,KAAI,SAACvC,GAAD,OAC3B,6BACE,cAACD,EAAD,CAAcC,QAASA,EAASC,WAAYA,KADrCD,EAAQc,SAKnB,OACE,gCACE,qBAAKR,UAAU,aACf,oBAAIA,UAAU,mBAAd,SAAkCgC,MAF1B,S,aCVC,SAASE,EAAT,GAAwC,IAAnBC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,QACzC,OACE,cAACC,EAAA,EAAD,CAAMC,GAAIH,EAAV,SACE,sBAAKnC,UAAU,YAAf,UACE,mBAAGA,UAAU,OAAb,sIAEA,oBAAIA,UAAU,QACd,wWACA,cAACM,EAAA,EAAD,CAAQR,SAAO,EAACC,MAAM,SAASQ,QAAS,kBAAM6B,KAA9C,yB,aCbO,SAASG,EAAT,GAA6D,IAA9BC,EAA6B,EAA7BA,QAASC,EAAoB,EAApBA,OAAQC,EAAY,EAAZA,SACvDC,EAAUH,EAAQP,KAAI,SAACW,GAAD,OAC1B,cAACtC,EAAA,EAAD,CACEJ,MAAO,CAAE2C,gBAAkBH,IAAaE,EAAU,UAAY,WAC9DrC,QAAS,kBAAMkC,EAAOG,IAFxB,SAKGA,GALH,UAGUA,OAMZ,OACE,cAACE,EAAA,EAAD,UACGH,ICPQ,SAASI,EAAT,GAAkC,IAAhBC,EAAe,EAAfA,IAAKC,EAAU,EAAVA,OACpC,EAAgCC,qBAAhC,mBAAOR,EAAP,KAAiBS,EAAjB,KAEIC,EAAQ,GACA,QAARJ,EACFI,EAAQ,CAAE,SAAU,UAAW,cAAe,cAAe,WAC3C,QAARJ,GAA2B,OAARA,IAC7BI,EAAQ,CAAE,SAAU,UAAW,cAAe,gBAQhD,OACE,sBAAKpD,UAAU,cAAf,UACE,iEACA,cAACuC,EAAD,CAAqBC,QAASY,EAAOX,OARzB,SAACY,GACfJ,EAAOI,GACPF,EAAYE,IAM4CX,SAAUA,O,qDCjBvD,SAASY,EAAT,GAAoC,IAAbC,EAAY,EAAZA,SAEpC,OACE,8BACE,cAAC,IAAD,CACErD,MAAO,CACLsD,OAAQ,OACRC,MAAO,OACPC,UAAW,SACXb,gBAAiB,wBACjBc,aAAc,OAEhBC,UAAQ,EACRC,aAAY,eAAOC,UAAO,QAT5B,SAWE,qBAAK5D,MAAO,CAAE6D,OAAQ,OAAQC,QAAS,OAAvC,SACE,qBAAK9D,MAAO,CAAE8D,QAAS,OAAvB,SACGT,U,+EClBAU,GAReC,IAAUC,MAAM,CAC1C,SACA,UACA,cACA,cACA,YAG8BD,IAAUC,MAAM,CAAC,IAAI,OAExCC,EAAsBF,IAAUG,QAC3CH,IAAUI,MAAM,CACdC,EAAGL,IAAUM,OAAOC,WACpBC,EAAGR,IAAUM,OAAOC,WACpB7C,GAAIsC,IAAUM,UAIkBN,IAAUG,QAC5CH,IAAUI,MAAM,CACd9D,KAAM0D,IAAUS,OAAOF,WACvBG,KAAMR,EAAoBK,WAC1BjD,KAAM0C,IAAUS,OAChB5E,MAAOmE,IAAUS,OACjBE,oBAAqBX,IAAUY,KAC/BC,aAAcb,IAAUY,KACxBE,QAASd,IAAUY,KACnBG,MAAOf,IAAUgB,UAIwBhB,IAAUI,MAAM,CAC3DM,KAAMR,EAAoBK,WAC1BU,KAAMjB,IAAUM,OAAOC,WACvBW,KAAMlB,IAAUM,OAAOC,WACvBY,UAAWnB,IAAUM,OAAOC,WAC5Ba,UAAWpB,IAAUM,OAAOC,WAC5Bc,gBAAiBrB,IAAUM,OAAOC,WAClCe,aAAcvB,EAAiBQ,WAC/BQ,MAAOf,IAAUY,KAAKL,WACtB7C,GAAIsC,IAAUM,OAAOC,aAGWP,IAAUuB,UAAU,CAACvB,IAAUS,OAAQT,IAAUM,SCnCpE,SAASkB,EAAT,GAA+D,IAA5CC,EAA2C,EAA3CA,OAAQ7E,EAAmC,EAAnCA,MAAO8E,EAA4B,EAA5BA,KAAMC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,KAAM/E,EAAU,EAAVA,OACjE,EAA0BmC,mBAAS,IAAnC,mBAAO6C,EAAP,KAAcC,EAAd,KAwDA,OAtDAC,qBAAU,WACR,IAAMC,EAAW,CACfH,MAAO,CACLvE,KAAM,WAER2E,YAAa,CACXR,OAAQ,CACNS,UAAW,CACTC,SAAU,IACVC,OAAQ,mBAIdC,OAAQ,CACNC,aAAc,GACdC,YAAa,GACbC,aAAc,GAEhBC,MAAO,CACLC,IAAKhB,EACLiB,IAAKhB,EACL/E,MAAQ,CACNgG,SAAS,EACTC,KAAMhG,GAERiG,aAAa,EACbC,WAAW,GAEbnG,MAAO,CACLiG,KAAMjG,GAERoG,MAAO,CACLL,IAAKf,EACLkB,aAAa,EACbC,WAAW,EACXnG,MAAO,CACLiG,KAAM,UAGVpB,OAAQA,EAAO1D,KAAI,SAACkF,GAAD,mBAAC,aAEhBpC,aAAcoC,EAAavC,KAAKwC,OAAS,EACzCC,eAAgB,GACbF,GAJY,IAKfvC,KAAMuC,EAAavC,KAAK3C,KAAI,kBAAe,CAAEsC,EAAjB,EAAGA,EAAiBG,EAApB,EAAMA,MAClC4C,QAAS,CACPC,YAAY,GAAD,OAAKxG,EAAL,mCAKnBiF,EAASE,KACR,CAACP,EAAQ7E,EAAO8E,EAAMC,EAAMC,EAAM/E,IAE9B,cAAC,IAAD,CAAiByG,WAAYC,IAAYjF,QAASuD,IA5D3D2B,IAAMD,K,wCCDS,SAASE,EAAT,GAAsD,IAAlCC,EAAiC,EAAjCA,SAAUC,EAAuB,EAAvBA,UAAWC,EAAY,EAAZA,SAChDC,EAAOH,EAAS3F,KAAI,YAAgB,IAAbsC,EAAY,EAAZA,EAAG3C,EAAS,EAATA,GAC9B,OACE,qBAAa1B,MAAO,CAAE2C,gBAAiBgF,EAAUG,SAASpG,GAAM,eAAYqG,GAA5E,UACE,6BAAKL,EAASR,OAASxF,IACvB,6BAAK2C,MAFE3C,MAOb,OACE,eAACsG,EAAA,EAAD,CAAOC,SAAO,EAACnI,UAAU,WAAzB,UACE,gCACE,+BACE,6BAAKS,EAAOqH,GAAU/G,SACtB,6BAAKN,EAAOqH,GAAUM,cAG1B,gCACGL,O,qBCRM,SAASM,EAAT,GAA+E,IAArDT,EAAoD,EAApDA,SAAUU,EAA0C,EAA1CA,QAASC,EAAiC,EAAjCA,QAASC,EAAwB,EAAxBA,WAAYV,EAAY,EAAZA,SAC/E,EAAqDrH,EAAOqH,GAApDnH,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,QAASC,EAA1B,EAA0BA,QAASC,EAAnC,EAAmCA,MAAOC,EAA1C,EAA0CA,OAEpC4E,EAAS,CACb,CACEnF,KAAM,0BACNoE,KAAMgD,GAER,CACEpH,KAAM,uBACNoE,KAAM2D,GAER,CACE/G,KAAM,OACNhB,KAAM,cACNoE,KAAM,CAAC,CAACL,EAAGiE,GAAc,EAAG9D,EAAG,GAAI,CAACH,EAAGiE,GAAc,EAAG9D,EAAG7D,IAC3Dd,MAAO,MACP8E,qBAAqB,EACrBE,cAAc,EACdC,aAAyBiD,IAAfO,GAA8BD,EAAQnB,OAAS,EACzDnC,MAAO,CACLwD,OAAO,qBAAD,OAAuBD,EAAvB,aAKZ,OACE,8BACE,eAACE,EAAA,EAAD,CAAWC,OAAK,EAACzI,MAAO,CAACyD,aAAc,OAAvC,UACE,cAACiF,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CAAO9I,MAAM,YAAYC,UAAU,SAAnC,SACiB,YAAb8H,EACA,gDACkB1G,EAAM0G,GAAU,GADlC,OAC0CF,EAASR,OADnD,IAC4DhG,EAAM0G,GAAU,GAD5E,sDAIA,8NAMN,eAACc,EAAA,EAAD,WACE,cAACE,EAAA,EAAD,CAAKC,GAAI,EAAGC,GAAI,GAAhB,SACE,cAACrB,EAAD,CACEC,SAAUA,EACVC,UAAWU,EAAQtG,KAAI,SAACgH,GAAD,OAASA,EAAIrH,MACpCkG,SAAUA,MAGd,cAACgB,EAAA,EAAD,CAAKC,GAAI,GAAT,SACE,cAACrD,EAAD,CACEC,OAAQA,EACR7E,MAAK,UAAKA,EAAL,oCAAsCoI,IAAEC,MAAMb,EAAS,IAC5D1C,KAAMhF,EACNiF,KAAMlF,EACNmF,KAAMjF,EACNE,OAAQA,c,+BC/DP,SAASqI,EAAT,GAAoD,IAAzBC,EAAwB,EAAxBA,QAASC,EAAe,EAAfA,YACjD,EAAoCpG,mBAAS,IAA7C,mBAAOqG,EAAP,KAAmBC,EAAnB,KAEA,OACE,eAACC,EAAA,EAAD,CAAYvJ,MAAO,CAACuD,MAAO,MAAOD,OAAQ,QAA1C,UACE,cAACkG,EAAA,EAAD,CACEC,MAAM,QACNnI,KAAK,SACLoI,YAAY,eACZhD,IAAK,EACLiD,MAAON,EACP1C,IAAKwC,EACLS,SAAU,SAACC,GAAD,OAAWP,EAAcO,EAAMC,OAAOH,UAElD,cAACI,EAAA,EAAD,CAAiBC,UAAU,SAA3B,SACE,cAAC5J,EAAA,EAAD,CAAQ6J,UAAWZ,GAAcA,EAAaF,GAAWE,EAAa,EAAGhJ,QAAS,kBAAK+I,GAAaC,IAApG,yB,8DCpBKa,GAAiB,SAACb,EAAYnE,EAAMiF,GAC/C,IAAMC,EAAaC,KAAGC,MAAMjB,EAAYnE,EAAMiF,GAAapI,KAAI,SAACwI,GAAD,OAASvB,IAAEC,MAAMsB,EAAK,MAC/EC,EAASxB,IAAEyB,QAAQL,GACnB1C,EAAW,GAMjB,OALAsB,IAAE0B,QAAQF,GAAQG,SAAQ,YACxB,IAD2C,IAAD,mBAAhBC,EAAgB,KAAXC,EAAW,KACjCC,EAAI,EAAGA,GAAKD,EAAOC,IAC1BpD,EAASqD,KAAK,CAAC1G,GAAIuG,EAAKpG,EAAGsG,OAGxB9B,IAAEgC,QAAQtD,GAAU3F,KAAI,SAACgH,EAAKkC,GAAN,mBAAC,eAAoBlC,GAArB,IAA0BrH,GAAIuJ,QAKlDC,GAAkB,SAAC7B,EAAY8B,EAAKC,GAC/C,IAAMhB,EAAaC,KAAGgB,MAAMhC,EAAY8B,EAAKC,GAAIrJ,KAAI,SAACwI,GAAD,OAASvB,IAAEC,MAAMsB,EAAK,MACrEC,EAASxB,IAAEyB,QAAQL,GACnB1C,EAAW,GAMjB,OALAsB,IAAE0B,QAAQF,GAAQG,SAAQ,YACxB,IAD2C,IAAD,mBAAhBC,EAAgB,KAAXC,EAAW,KACjCC,EAAI,EAAGA,GAAKD,EAAOC,IAC1BpD,EAASqD,KAAK,CAAC1G,GAAIuG,EAAKpG,EAAGsG,OAGxB9B,IAAEgC,QAAQtD,GAAU3F,KAAI,SAACgH,EAAKkC,GAAN,mBAAC,eAAoBlC,GAArB,IAA0BrH,GAAIuJ,QAKlDK,GAAsB,SAACjC,EAAYkC,GAC9C,IAAMnB,EAAaC,KAAGmB,KAAKnC,EAAYkC,GAAQxJ,KAAI,SAACwI,GAAD,OAASvB,IAAEC,MAAMsB,EAAK,MACnEC,EAASxB,IAAEyB,QAAQL,GACnB1C,EAAW,GAMjB,OALAsB,IAAE0B,QAAQF,GAAQG,SAAQ,YACxB,IAD2C,IAAD,mBAAhBC,EAAgB,KAAXC,EAAW,KACjCC,EAAI,EAAGA,GAAKD,EAAOC,IAC1BpD,EAASqD,KAAK,CAAC1G,GAAIuG,EAAKpG,EAAGsG,OAGxB9B,IAAEgC,QAAQtD,GAAU3F,KAAI,SAACgH,EAAKkC,GAAN,mBAAC,eAAoBlC,GAArB,IAA0BrH,GAAIuJ,QAKlDQ,GAAqB,SAACpC,EAAYqC,GAC7C,IAAMtB,EAAaC,KAAGsB,OAAOtC,EAAYqC,GAAkB3J,KAAI,SAACwI,GAAD,OAASvB,IAAEC,MAAMsB,EAAK,MAC/EC,EAASxB,IAAEyB,QAAQL,GACnB1C,EAAW,GAMjB,OALAsB,IAAE0B,QAAQF,GAAQG,SAAQ,YACxB,IAD2C,IAAD,mBAAhBC,EAAgB,KAAXC,EAAW,KACjCC,EAAI,EAAGA,GAAKD,EAAOC,IAC1BpD,EAASqD,KAAK,CAAC1G,GAAIuG,EAAKpG,EAAGsG,OAGxB9B,IAAEgC,QAAQtD,GAAU3F,KAAI,SAACgH,EAAKkC,GAAN,mBAAC,eAAoBlC,GAArB,IAA0BrH,GAAIuJ,QAKlDW,GAAkB,SAACvC,GAqB9B,IAnBA,IAAM3B,EAAW,GAKXmE,EAFoB,EAEPC,aAAK,IAFE,EAGpBC,EAJY,KAIeF,EAAa,EAIxCG,EAFqB,EAEPF,aAAK,IAFE,EAGrBG,EAJa,KAIgBD,EAAc,EAE3CE,EAAe,GACfC,EAAU,GACVC,EAAaF,EACbG,EAAYF,EAGTrB,EAAI,EAAGA,EAAIzB,EAAW,EAAGyB,IAAI,CACpC,IAAIwB,EAAM,EACV,GAA2B,IAAxBJ,EAAahF,OACZ,IAAK,IAAIqF,EAAI,EAAGA,EAlBA,EAkBmBA,IAC/BD,GAAOE,eAAWX,EAAaE,OAInCO,EAvBgB,EAuBVF,EAAWK,MAEjBN,EAAQlD,aAAMqD,EAzBE,EAyBoB,KACpCD,EAAUpD,aAAMqD,EA1BA,EA0BsB,MAAQ,EAG9CD,EAAUpD,aAAMqD,EA7BA,EA6BsB,KAAO,EAEjD5E,EAASqD,KAAK9B,aAAOqD,EA/BD,EA+BsB,KAAK,KAGjD,IAAK,IAAIxB,EAAI,EAAGA,EAAIzB,EAAW,EAAGyB,IAAI,CAClC,IAAIwB,EAAM,EACV,GAA2B,IAAxBJ,EAAahF,OACZ,IAAK,IAAIqF,EAAI,EAAGA,EAhCD,EAgCqBA,IAChCD,GAAOE,eAAWR,EAAcC,OAIpCK,EArCe,EAqCTF,EAAWK,MAEjBN,EAAQlD,aAAMqD,EAvCC,EAuCsB,KACrCD,EAAUpD,aAAMqD,EAxCD,EAwCwB,MAAQ,EAG/CD,EAAUpD,aAAMqD,EA3CD,EA2CwB,KAAO,EAElD5E,EAASqD,KAAK9B,aAAOqD,EA7CF,EA6CwB,KAAK,KAMpD,IAHA,IAAMI,EAAgB,GAElB7B,EAAQ8B,MAAMtD,GAAYuD,MAAM,GAC3B9B,EAAI,EAAGA,EAAIzB,EAAYyB,IAAI,CAEhC,IAAI+B,EAAMnF,EAASoD,IAEa,IAA5BD,EAAM5B,aAAY,GAAN4D,IACZhC,EAAM5B,aAAY,GAAN4D,KAAc,EAG1BhC,EAAM5B,aAAY,GAAN4D,IAAa,EAG7BH,EAAc3B,KAAK,CAAC1G,GAAK4E,aAAY,GAAN4D,GAAU,GAAKrI,EAAGqG,EAAM5B,aAAY,GAAN4D,MAGjE,OAAO7D,IAAEgC,QAAQ0B,GAAe3K,KAAI,SAACgH,EAAKkC,GAAN,mBAAC,eAAoBlC,GAArB,IAA0BrH,GAAIuJ,QAMvD6B,GAAuB,SAChCC,EACA1D,GASI,IAAD,yDADC,GACD,IAPDnE,YAOC,MAPI,GAOJ,MANDiF,mBAMC,MANW,EAMX,MALDgB,WAKC,OALI,GAKJ,MAJDC,UAIC,MAJE,GAIF,MAHDG,cAGC,MAHM,EAAE,GAGR,MAFDG,wBAEC,MAFgB,EAEhB,EAECsB,EAA0B,CAC9B,OAAU,kBAAM9C,GAAeb,EAAYnE,EAAMiF,IACjD,QAAW,kBAAMe,GAAgB7B,EAAY8B,EAAKC,IAClD,YAAe,kBAAME,GAAoBjC,EAAYkC,IACrD,cAAe,kBAAME,GAAmBpC,EAAYqC,IACpD,QAAW,kBAAME,GAAgBvC,KAGnC,OAAO2D,EAAwBD,MAIpBE,GAAiB,SAACvF,GAC7B,OAAQA,EAASR,OAAS,EAAKhC,aAAKwC,EAAS3F,KAAI,SAAAmL,GAAC,OAAIA,EAAE7I,WAAM0D,GAInDoF,GAAwB,SAACzF,GACpC,OAAQA,EAASR,OAAS,EAAKkG,aAAI1F,EAAS3F,KAAI,SAAAmL,GAAC,OAAIA,EAAE7I,WAAM0D,GCrKhD,SAASsF,GAAT,GAAuD,IAA5B/L,EAA2B,EAA3BA,KAAMoG,EAAqB,EAArBA,SAAUU,EAAW,EAAXA,QACxD,EAA8BpF,mBAAS,IAAvC,mBAAOqF,EAAP,KAAgBiF,EAAhB,KACA,EAAgCtK,mBAAS,IAAzC,mBAAOuK,EAAP,KAAiBC,EAAjB,KACA,EAA0BxK,mBAAS,IAAnC,mBAAO6C,EAAP,KAAcC,EAAd,KAwFA,OAtFAC,qBAAU,WACR,IAAMC,EAAW,CACfH,MAAO,CACLvE,KAAM,OACN4E,WAAW,GAEbD,YAAa,CACXR,OAAQ,CACNS,UAAW,CACTC,SAAU,GAEZsH,OAAQ,CACNC,MAAO,CACL9G,SAAS,GAEXrE,OAAQ,CACNqE,SAAS,GAEX+G,OAAQ,CACNzH,WAAW,GAEb0H,SAAU,CACRhH,SAAS,MAKjBhG,MAAO,CACLiG,KAAK,sCAAD,OAAwCvF,EAAxC,MAENmF,MAAO,CACL7F,MAAQ,CACNiG,KAAM,eAERH,IAAK,EACLC,IAAK,KAEPK,MAAO,CACLpG,MAAO,CACLiG,KAAM,SAGVO,QAAS,CACPR,SAAS,GAEXnB,OAAQ,CACN,CACEnF,KAAM,kBACNoE,KAAM6I,EACNxI,MAAO,CACL6B,SAAS,GAEX/G,MAAO,OAET,CACES,KAAM,gBACNoE,KAAM2D,EACNtD,MAAO,CACL6B,SAAS,GAEX/G,MAAO,WAKbiG,EAASE,KACR,CAACqC,EAASkF,EAAUjM,EAAMoG,EAAUU,IAEvCrC,qBAAU,WACRuH,EAAW,IACXE,EAAY,IACZ,IAAIK,EAAI,EACFC,EAAQC,aAAY,YACxBF,GAAK,IACI,KACPG,cAAcF,GAEhB,IAAMG,EAASjF,IAAEK,WAAW3B,EAAUmG,GAChCK,EAAMlF,IAAEC,MAAMgE,GAAegB,GAAS,GAC5CX,GAAW,SAAAjF,GAAO,4BAAQA,GAAR,CAAiB,CAAC7D,EAAG0J,QACvCV,GAAY,SAAAD,GAAQ,4BAAQA,GAAR,CAAkB,CAAC/I,EAAG4D,UACzCyF,GAEH,OAAO,kBAAMG,cAAcF,MAC1B,IAGD,cAACK,GAAA,EAAD,CAAUC,QAAM,EAAhB,SACE,cAAC1O,EAAA,EAAD,CAAME,SAAO,EAACI,MAAO,CAAE2C,gBAAiB,0BAAxC,SACE,cAAC0L,GAAA,EAAD,CAAUrO,MAAO,CAAE2C,gBAAiB,0BAApC,SACE,cAAC,IAAD,CAAiB2E,WAAYC,IAAYjF,QAASuD,UCzF7C,SAASyI,GAAT,GAAkD,IAAzB1G,EAAwB,EAAxBA,SAAUyB,EAAc,EAAdA,WAChD,EAA8BrG,mBAAS,IAAvC,mBAAOqF,EAAP,KAAgBiF,EAAhB,KACA,EAA0BtK,mBAAS,GAAnC,mBAAOuL,EAAP,KAAcC,EAAd,KACA,EAAoCxL,qBAApC,mBAAOsF,EAAP,KAAmBmG,EAAnB,KACA,EAAgCzL,mBAAS,IAAzC,mBAAO0E,EAAP,KAAiBgH,EAAjB,KACA,EAA8B1L,mBAAS,GAAvC,mBAAOoF,EAAP,KAAgBuG,EAAhB,KAEA5I,qBAAU,WACRyI,EAAS,GACTE,EAAY,IACZpB,EAAW,IACXmB,MACC,CAAC7G,IAGJ7B,qBAAU,WACR,GAAwB,IAApB2B,EAASR,OAAc,CACzB,IAAM0H,EAAS9B,GAAqBlF,EAAUyB,GAC9CqF,EAAYE,GACZ,IAAMC,EAAU5B,GAAe2B,GAC/BD,EAAWE,MAEZ,CAACnH,EAAUE,EAAUyB,IASxB,OACE,cAACjG,EAAD,UACE,gCACE,cAAC+E,EAAD,CAAgBT,SAAUA,EAAUU,QAASA,EAASC,QAASA,EAASC,WAAYA,EAAYV,SAAUA,IAC1G,4GACA,cAACsB,EAAD,CAAiBC,QAASzB,EAASR,OAAQkC,YAZ7B,SAACnE,GACnB,IAAMgJ,EAASjF,IAAEK,WAAW3B,EAAUzC,GACtCqI,EAAWW,GACXQ,EAAczF,IAAEC,MAAMgE,GAAegB,GAAS,IAC9CO,EAAS,MASHD,GAAS,GACT,gCACE,eAAC5F,EAAA,EAAD,CAAO9I,MAAM,UAAUG,MAAO,CAAE8D,QAAS,EAAGgL,UAAW,OAAvD,0BACgB9F,IAAEC,MAAMX,EAAY,IAAM,GACxC,uBAFF,wBAGwBU,IAAEC,MAAMb,EAAUE,EAAY,MAEtD,cAACK,EAAA,EAAD,CAAO9I,MAAM,OAAb,8SAGA,cAACwN,GAAD,CAAiB/L,KAAMsG,EAAUF,SAAUA,EAAUU,QAASY,IAAEC,MAAMb,EAAS,aCpD5E,SAAS2G,KACtB,MAA+B/L,mBAAS,IAAxC,mBAAO4E,EAAP,KAAiBoH,EAAjB,KAEA,OACE,sBAAKlP,UAAU,gBAAf,UACE,cAAC6I,EAAA,EAAD,CAAO7I,UAAU,iBAAiBD,MAAM,UAAxC,kCACA,cAAC8I,EAAA,EAAD,CAAO7I,UAAU,iBAAiBD,MAAM,UAAxC,q0BAGA,cAACgD,EAAD,CAAQC,IAAI,MAAMC,OAAQiM,IACzBpH,GAAY,cAAC0G,GAAD,CAAe1G,SAAUA,EAAUyB,WdrB3B,S,iDe6MZ4F,G,oDAvMX,WAAYC,GAAO,IAAD,+BACd,cAAMA,IACDC,MAAQ,CACTtJ,WAAOkC,EACPqH,YAAY,GACZC,SAAS,CACP,OAAW,GACX,QAAY,GACZ,YAAgB,GAChB,cAAgB,EAChB,QAAY,MAEdC,OAAQ,CACN9O,OAAQ,CAAEC,QAAS,GAAIC,QAAS,GAAIC,QAAS,GAAIC,MAAO,kBAAmBC,OAAQ,WACnFC,QAAS,CAAEL,QAAS,GAAIC,SAAU,GAAIC,QAAS,GAAIC,MAAO,kBAAmBC,OAAQ,WACrFE,YAAa,CAAEN,QAAS,IAAKC,QAAS,EAAGC,QAAS,GAAIC,MAAO,gCAAiCC,OAAQ,sBACtG,cAAe,CAACJ,QAAS,GAAIC,QAAS,EAAGC,QAAS,GAAIC,MAAO,uBAAwBC,OAAQ,WAC7FG,QAAS,CAAEP,QAAS,GAAIC,QAAS,GAAIC,QAAS,GAAIC,MAAO,sBAAuBC,OAAQ,gBAE1F0O,QAAKxH,EACLyH,OAAO,GApBG,E,2CAuBlB,WAEI,OADAC,KAAKN,MAAMtJ,OAAS4J,KAAKC,OAEvB,8BAEQ,qBAAKhO,GAAG,gBAAgB5B,UAAU,e,+BAOhD,WACI2P,KAAKC,S,kBAET,WAEI,IAsBIhK,EACAC,EACA9E,EAxBE8O,EAAmB,CAACrP,KAAM,eAAgBoE,KAAO,IACnDkB,EAAO,GACPgK,EAAkB,GAClBC,EAAkB,GAEtB,IAAK,IAAM/E,KAAK2E,KAAKP,MAAME,YAAY,CACnC,IADmC,EAC7BvC,EAAO4C,KAAKP,MAAMY,WAEpBC,KAAK9G,OAAQwG,KAAKP,MAAME,YAAYtE,GAAG,GAAK2E,KAAKP,MAAMhK,OAASuK,KAAKP,MAAMK,GAAGQ,KAAKjE,KAAK2D,KAAKP,MAAM7F,aAAe,KAAK,IADzH0G,KAAK9G,MAAqC,IAA/BwG,KAAKP,MAAME,YAAYtE,GAAG,IAAY,IAE/CD,EAAQ,EAJuB,eAKnB8E,EAAiBjL,MALE,IAKnC,2BAAsC,CAAC,IAA5B6H,EAA2B,QAC9BwD,KAAK9G,MAAa,IAAPsD,EAAE,IAAY,MAAQM,IACjChC,GAAS,IAPkB,8BAUnCjF,EAAOmK,KAAKpJ,IAAIkE,EAAOjF,GACvB+J,EAAiBjL,KAAKoG,GAAK,CAAC+B,EAAKhC,GACjC+E,EAAiB7E,KAAK8B,GACtBgD,EAAiB9E,KAAKF,GAOtB4E,KAAKP,MAAMY,YAMbpK,EAAOqK,KAAKrJ,IAAIsJ,MAAMD,KAAMH,GAC5BjK,EAAOoK,KAAKpJ,IAAIqJ,MAAMD,KAAMH,GAC5BhK,EAAOmK,KAAKpJ,IAAIqJ,MAAMD,KAAMF,GAC5BhP,EAAS,wBART6E,EAAO+J,KAAKN,MAAMG,OAAOG,KAAKP,MAAM5N,MAAMZ,QAC1CiF,EAAO8J,KAAKN,MAAMG,OAAOG,KAAKP,MAAM5N,MAAMb,QAC1CI,EAAS4O,KAAKN,MAAMG,OAAOG,KAAKP,MAAM5N,MAAMT,QAY9C,IAHA,IAAIoP,EAAU,EACVC,EAAU,IACVC,EAAa,EACTrF,EAAE,EAAEA,EAAE6E,EAAiBjL,KAAKwC,OAAO4D,IACtC6E,EAAiBjL,KAAKoG,GAAG,GAAKmF,IAC/BA,EAAYN,EAAiBjL,KAAKoG,GAAG,IAEpC6E,EAAiBjL,KAAKoG,GAAG,GAAKoF,IAC/BA,EAAYP,EAAiBjL,KAAKoG,GAAG,IAEpC6E,EAAiBjL,KAAKoG,GAAG,GAAKqF,IAC/BA,EAAaR,EAAiBjL,KAAKoG,GAAG,IA2DrC2E,KAAKN,MAAMtJ,MA8CZ4J,KAAKN,MAAMtJ,MAAMuK,OAAO,CAAC3K,OAAO,CAACkK,GAAmB3I,MAAO,CAACL,IAAKf,GAAOa,MAAQ,CAAC7F,MAAO,CAACiG,KAAKhG,GAAQ8F,IAAKhB,EAAMe,IAAKhB,KA7CtH+J,KAAKY,SAAS,CAACxK,MAAO0B,IAAW1B,MAAM,gBAAiB,CACxCA,MAAO,CACHvE,KAAM,UACN4E,WAAW,GAGftF,MAAO,CACHiG,KAAM,4BAEVJ,MAAO,CACHC,IAAKhB,EACLiB,IAAKhB,EACL/E,MAAQ,CACJgG,SAAS,EACTC,KAAMhG,GAEViG,aAAa,EACbC,WAAW,EACXuJ,eAAe,GAEnBtJ,MAAO,CACHL,IAAKf,EACLhF,MAAO,CACHiG,KAAM,gCAGdO,QAAS,CACPR,SAAS,EACTS,YAAY,GAAD,OAAKxG,EAAL,4BAEb4E,OAAQ,CAACkK,W,GAnLPY,aCOf,SAASC,GAAT,GAA0E,IAA1ClH,EAAyC,EAAzCA,cAAec,EAA0B,EAA1BA,WAAYqG,EAAc,EAAdA,WACxE,EAA8CzN,mBAAS,GAAvD,mBAAO0N,EAAP,KAAwBC,EAAxB,KACA,EAAwC3N,mBAAS,GAAjD,mBAAO4N,EAAP,KAAqBC,EAArB,KAOMC,EAAW,WACf,IAAMC,EAAY/H,IAAEK,WAAWe,EAAYwG,GACrCtI,EAAa2E,GAAe8D,GAClC,MAAO,CAAC1M,GAAIuM,EAAcpM,EAAG8D,IAW/B,OACE,gCACE,kDACA,cAACkB,EAAA,EAAD,CACExJ,MAAO,CAACuD,MAAO,MAAOD,OAAQ,QAC9BoD,IAAK,EACLpF,KAAK,SACLoI,YAAY,eACZE,SAAU,SAACC,GAAD,OA3BUF,EA2BkBE,EAAMC,OAAOH,MA1BvDL,EAAcK,QACdkH,EAAgBlH,GAFO,IAACA,GA4BpBA,MAAOiH,IAET,uBACA,6DACA,cAACpH,EAAA,EAAD,CACExJ,MAAO,CAACuD,MAAO,MAAOD,OAAQ,QAC9BoD,IAAK,EACLpF,KAAK,SACLoI,YAAY,0BACZE,SAAU,SAACC,GAAD,OAAW8G,EAAmB9G,EAAMC,OAAOH,QACrDA,MAAO+G,IAET,uBACA,cAACtQ,EAAA,EAAD,CAAQC,QAAS,kBA9BN,WAEb,IADA,IAAM2Q,EAAa,GACVlG,EAAI,EAAGA,EAAI4F,EAAiB5F,IACnCkG,EAAWjG,KAAK+F,KAElBL,EAAWO,GAyBcC,IAAUhH,SAAW2G,EAAe,GAAOA,EAAexG,EAAWlD,QAAYwJ,EAAkB,EAA1H,iBAGA,cAACtQ,EAAA,EAAD,CAAQC,QAAS,kBAAMoQ,KAAvB,sBCjDS,SAASS,GAAT,GAA4C,IAAhB9B,EAAe,EAAfA,YACnC+B,EAAY/B,EAAYrN,KAAI,WAAqBkJ,GAArB,IAAKhG,EAAL,EAAEZ,EAAYa,EAAd,EAAWV,EAAX,OAChC,+BACE,6BAAKyG,EAAQ,IACb,6BAAKhG,IACL,6BAAK+D,IAAEC,MAAM/D,EAAM,OAHZ+F,MAOX,OACE,eAACjD,EAAA,EAAD,CAAO0F,OAAK,EAAC5N,UAAU,WAAvB,UACE,gCACE,+BACE,wCACA,sCACA,2CAGJ,gCACGsP,GAAe+B,OCXT,SAASC,GAAT,GAAsD,IAA7BxJ,EAA4B,EAA5BA,SAAUyJ,EAAkB,EAAlBA,eAChD,EAAsCrO,mBAAS,IAA/C,mBAAOoM,EAAP,KAAoBkC,EAApB,KACA,EAA8BtO,mBAAS,IAAvC,mBAAOqF,EAAP,KAAgBiF,EAAhB,KACA,EAAoCtK,mBAASqO,GAA7C,mBAAOhI,EAAP,KAAmBC,EAAnB,KACA,EAA4CtG,oBAAS,GAArD,mBAAOuO,EAAP,KAAuBC,EAAvB,KACA,EAA0BxO,mBAAS,GAAnC,mBAAOuL,EAAP,KAAcC,EAAd,KACA,EAAgCxL,mBAAS,IAAzC,mBAAO0E,EAAP,KAAiBgH,EAAjB,KACA,EAA8B1L,mBAAS,GAAvC,mBAAOoF,EAAP,KAAgBuG,EAAhB,KAEA5I,qBAAU,WACRyI,EAAS,GACTE,EAAY,IACZpB,EAAW,IACXgE,EAAe,MACd,CAAC1J,IAGJ7B,qBAAU,WACR,GAAwB,IAApB2B,EAASR,OAAc,CACzB,IAAM0H,EAAS9B,GAAqBlF,EAAUyJ,GAC9C3C,EAAYE,GACZ,IAAMC,EAAU5B,GAAe2B,GAC/BD,EAAWE,MAEZ,CAACnH,EAAUE,EAAUyJ,IAExB,IAgBMI,EAA4B,IAAnBpJ,EAAQnB,OAAe,CAAC,GAAKmB,EAAQtG,KAAI,SAAC2P,GAAD,OAAOA,EAAErN,KAEjE,OACE,cAACjB,EAAD,UACE,gCACE,cAAC+E,EAAD,CAAgBT,SAAUA,EAAUU,QAASA,EAASC,QAASA,EAAST,SAAUA,IAClF,cAACxH,EAAA,EAAD,CAAQP,MAAM,UAAUQ,QAAS,kBAAMmO,EAAS,IAAhD,sBACED,GAAS,GACT,gCACE,cAAC7F,EAAA,EAAD,CAAK5I,UAAU,SAAf,SACE,sBAAKE,MAAO,CAAC8D,QAAS,QAAtB,UACE,+EACA,cAACoF,EAAD,CAAiBC,QAASzB,EAASR,OAAQkC,YAnBrC,SAACnE,GACnB,IAAMgJ,EAASjF,IAAEK,WAAW3B,EAAUzC,GACtCqI,EAAWW,GACX,IAAM0D,EAAQ,sBAAOvC,GAAP,CAAoB,CAAC/K,EAAGY,EAAMT,EAAGyI,GAAegB,MAC9DqD,EAAeK,WAkBP,eAACjJ,EAAA,EAAD,WACE,eAACE,EAAA,EAAD,CAAKC,GAAG,IAAR,UACE,cAACzI,EAAA,EAAD,CACER,SAAO,EACPC,MAAM,UACN+R,OAAQL,EACRlR,QAAS,kBAAMmR,GAAmBD,IAJpC,oCAOA,cAAC,GAAD,CACErM,KAAMkD,EACNmH,GAAInC,aAAIqE,GACR3B,WAAYyB,EACZlI,WAAYA,EACZ/H,KAAMsG,EACN+F,OAAQ4D,EACRnC,YAAaA,EAAYrN,KAAI,kBAAY,CAAZ,EAAEsC,EAAF,EAAKG,WAGtC,cAACoE,EAAA,EAAD,CAAKC,GAAG,IAAR,SACE,cAACqI,GAAD,CAAkB9B,YAAaA,SAGnC,cAAC1G,EAAA,EAAD,CAAK1I,MAAO,CAACuD,MAAO,MAAOD,OAAO,QAAlC,SACE,sBAAKxD,UAAU,SAAf,UACE,cAAC6I,EAAA,EAAD,CAAO9I,MAAM,UAAUG,MAAO,CAACuD,MAAO,MAAOD,OAAQ,QAArD,gDAGA,uBACA,cAACkN,GAAD,CACElH,cAAeA,EACfc,WAAY1C,EACZ+I,WA/DO,SAACoB,GACtB,GAAKA,EAEE,CACL,IAAMC,EAAc,sBAAO1C,GAAP,YAAuByC,IAC3CP,EAAeQ,QAHfR,EAAe,oBCnCN,SAASS,KACtB,MAA+B/O,mBAAS,IAAxC,mBAAO4E,EAAP,KAAiBoH,EAAjB,KAEA,OACE,sBAAKlP,UAAU,gBAAf,UACE,cAAC6I,EAAA,EAAD,CAAO7I,UAAU,iBAAiBD,MAAM,UAAxC,mCACA,cAAC8I,EAAA,EAAD,CAAO7I,UAAU,iBAAiBD,MAAM,UAAxC,idAGA,cAACgD,EAAD,CAAQC,IAAI,MAAMC,OAAQiM,IACzBpH,GAAY,cAACwJ,GAAD,CAAexJ,SAAUA,EAAUyJ,eAZlC,S,mCCAL,SAASW,GAAT,GAA0D,IAAnCpR,EAAkC,EAAlCA,MAAOsE,EAA2B,EAA3BA,KAAM+M,EAAqB,EAArBA,QAAS1C,EAAY,EAAZA,GAAI2C,EAAQ,EAARA,MAC9D,OACE,gCACE,6EAAgDtR,EAAhD,cACA,eAAC2I,EAAA,EAAD,WACE,cAACQ,EAAA,EAAD,CAAiBC,UAAU,UAA3B,SACE,eAACmI,GAAA,EAAD,WAAiBvR,EAAjB,qBAEF,cAAC4I,EAAA,EAAD,CAAOlI,KAAK,SAASoF,IAAK,GAAIC,IAAK,GAAIyL,KAAM,EAAGzI,MAAOzE,EAAM0E,SAAU,SAACC,GAAD,OAAWoI,EAAQpI,EAAMC,OAAOH,aAEzG,uBACA,eAACJ,EAAA,EAAD,WACE,cAACQ,EAAA,EAAD,CAAiBC,UAAU,UAA3B,SACE,eAACmI,GAAA,EAAD,WAAiBvR,EAAjB,mBAEF,cAAC4I,EAAA,EAAD,CAAOlI,KAAK,SAASoF,IAAK,EAAGC,IAAK,EAAGgD,MAAO4F,EAAI3F,SAAU,SAACC,GAAD,OAAWqI,EAAMrI,EAAMC,OAAOH,gB,cCdjF,SAAS0I,GAAT,GAA2D,IAArCC,EAAoC,EAApCA,UAAWC,EAAyB,EAAzBA,cAAeC,EAAU,EAAVA,OAE7D,OACE,cAAC5J,EAAA,EAAD,CAAK5I,MAAO,CAAE8D,QAAQ,kBAAmB2O,WAAW,QAASC,YAAY,MAAOnP,MAAO,eAAvF,SACA,qBAAKvD,MAAO,CAAE6D,OAAQ,IAAKN,MAAO,IAAKoP,SAAS,eAAgBC,MAAM,QAASH,WAAW,OAA1F,SACE,cAAC,KAAD,2BACMF,GADN,IAEEM,OAAQ,SAACC,GAAD,OAAWN,GAAWM,EAAKpR,KAAO8Q,EAAW,UAAY,WACjE9N,KAAM,CAAC,CAAChD,GAAI,OAAQgD,KAAM4N,IAC1BS,OAAQ,CAAEzR,KAAM,SAAUoF,IAAK,GAAIC,IAAK,KACxCqM,QAAS,SAACC,GAAD,OAAOA,EAAI,QACpB7L,QAAS,gBAAE0L,EAAF,EAAEA,KAAF,OACP,kDACiB,iCAASA,EAAKpO,KAAKwO,aAClC,uBAFF,iBAGgB,iCAASJ,EAAKpO,KAAKyO,iBAGrCC,WAAY,CACVC,SAAU,GACVC,eAAgB,SAChBC,aAAc,GACdlN,OAAQ,0BAEVmN,SAAU,CACRH,SAAU,GACVC,eAAgB,SAChBC,cAAe,GACflN,OAAQ,gCC3BH,SAASoN,GAAT,GAAyD,IAArCC,EAAoC,EAApCA,WAAYC,EAAwB,EAAxBA,UAAWrB,EAAa,EAAbA,UAExD,EAA4BtP,qBAA5B,mBAAOwP,EAAP,KAAeoB,EAAf,KACMC,EAAkBC,uBAAY,SAAChB,GAAD,OAAUc,EAAUd,EAAKpR,MAAK,CAACkS,IAC7DG,EAAmBD,uBAAY,kBAAMF,MAAa,CAACA,IAInDrB,EAAgB,CACpByB,SAAS,EACT1Q,OAAQ,CAAE2Q,IAAK,GAAIC,MAAO,GAAIC,OAAQ,GAAIC,KAAM,IAChDC,OAAQ,CAAE/S,KAAM,SAAUoF,IAAK,GAAIC,IAAK,KACxC2N,UAAW,SACXC,QAAS,SAACtB,GAAD,OAAOA,EAAI,QACpBuB,SATkBC,mBAAQ,kBAAM,SAAC3B,GAAD,OAAWN,GAAWA,IAAWM,EAAKpR,GAAO,GAAK,KAAG,CAAC8Q,IAUtFkC,aAAa,EACbC,aAAa,EACbC,YAAaf,EACbgB,aAAcd,EACdX,WAAY,CACVC,SAAU,GACVC,eAAgB,SAChBC,aAAc,IAEhBC,SAAU,CACRH,SAAU,GACVC,eAAgB,SAChBC,cAAe,KAInB,OACE,eAAC7K,EAAA,EAAD,WACE,cAACE,EAAA,EAAD,CAAK5I,MAAO,CAAE8D,QAAQ,kBAAmB4O,YAAY,MAAOD,WAAW,SAAvE,SACE,qBAAKzS,MAAO,CAAE6D,OAAQ,IAAKN,MAAO,IAAKqP,MAAM,OAAQD,SAAS,gBAA9D,SACE,cAAC,KAAD,yBACEjO,KAAM,CAAC,CAAChD,GAAI,OAAQgD,KAAMgP,IAC1BtM,QAAS,gBAAE0L,EAAF,EAAEA,KAAF,OAAY,8BAAK,iCAASA,EAAKpO,KAAKwO,gBAC7CL,OAAQ,SAACC,GAAD,OAAWA,EAAKpR,KAAO8Q,EAAU,UAAY,YACjDD,GAJN,IAKEQ,OAAQ,CAAEzR,KAAM,SAAUoF,IAAK,EAAGC,IAAK,GACvCyM,WAAU,2BAAMb,EAAca,YAApB,IAAgC/M,OAAQ,2BAClDmN,SAAQ,2BAAMjB,EAAciB,UAApB,IAA8BnN,OAAQ,iBAIpD,cAACuC,EAAA,EAAD,CAAK5I,MAAO,CAAE8D,QAAQ,kBAAmB2O,WAAW,QAASC,YAAY,MAAOnP,MAAO,eAAvF,SACE,qBAAKvD,MAAO,CAAE6D,OAAQ,IAAKN,MAAO,IAAKqP,MAAM,OAAQD,SAAS,eAAgBF,WAAW,OAAzF,SACE,cAAC,KAAD,yBACE/N,KAAM,CAAC,CAAChD,GAAI,OAAQgD,KAAMiP,IAC1BvM,QAAS,gBAAE0L,EAAF,EAAEA,KAAF,OAAY,8BAAK,iCAASA,EAAKpO,KAAKwO,gBAC7CL,OAAQ,SAACC,GAAD,OAAWA,EAAKpR,KAAO8Q,EAAU,UAAY,YACjDD,GAJN,IAKEQ,OAAQ,CAAEzR,KAAM,SAAUoF,IAAK,EAAGC,IAAK,GACvCyM,WAAU,2BAAMb,EAAca,YAApB,IAAgC/M,OAAQ,0BAClDmN,SAAQ,2BAAMjB,EAAciB,UAApB,IAA8BnN,OAAQ,iBAIpD,cAACuC,EAAA,EAAD,UACE,cAACyJ,GAAD,CACEC,UAAWA,EACXC,cAAeA,EACfC,OAAQA,SCtEH,SAASsC,GAAT,GAA2D,IAApCnL,EAAmC,EAAnCA,MAAOjD,EAA4B,EAA5BA,IAAKC,EAAuB,EAAvBA,IAAKyL,EAAkB,EAAlBA,KAAMxI,EAAY,EAAZA,SAC3D,OACE,eAACL,EAAA,EAAD,CAAYvJ,MAAO,CAAC6D,OAAQ,OAAQN,MAAO,QAASD,OAAQ,QAA5D,UACE,cAACkG,EAAA,EAAD,CACElI,KAAK,QACLxB,UAAU,eACVE,MAAO,CAACuD,MAAO,OACfoG,MAAOA,EACPjD,IAAKA,EACLC,IAAKA,EACLyL,KAAMA,EACNxI,SAAU,SAACC,GAAD,OAAWD,EAASC,EAAMC,OAAOH,UAE7C,cAACI,EAAA,EAAD,CAAiBC,UAAU,SAA3B,SACE,cAACR,EAAA,EAAD,CACElI,KAAK,SACLxB,UAAU,mBACV6J,MAAOA,EACPjD,IAAKA,EACLC,IAAKA,EACLyL,KAAMA,EACNxI,SAAU,SAACC,GAAD,OAAWD,EAASC,EAAMC,OAAOH,eCZtC,SAASoL,KACtB,MAAoC/R,mBAAS,IAA7C,mBAAOgS,EAAP,KAAmBC,EAAnB,KACA,EAAkCjS,mBAAS,IAA3C,mBAAOkS,EAAP,KAAkBC,EAAlB,KACA,EAAgCnS,mBAAS,GAAzC,mBAAOoS,EAAP,KAAiBC,EAAjB,KACA,EAA8BrS,mBAAS,GAAvC,mBAAOsS,EAAP,KAAgBC,EAAhB,KACA,EAAsCvS,mBAAS,GAA/C,mBAAOwS,EAAP,KAAoBC,EAApB,KACA,EAA0BzS,mBAAS,GAAnC,mBAAOuL,EAAP,KAAcC,EAAd,KACA,EAA8BxL,mBAAS,CAAC0S,OAAQ,GAAIC,MAAO,GAAIC,MAAO,KAAtE,mBAAOC,EAAP,KAAgBC,EAAhB,KAEA/P,qBAAU,WACH8P,EAAQH,OAAOxO,OAAS,GAAO2O,EAAQF,MAAMzO,OAAS,GAAO2O,EAAQD,MAAM1O,OAAS,GACvFsH,EAAS,KAEV,CAACqH,IAuCJ,OACE,eAACrN,EAAA,EAAD,CAAWC,OAAK,EAAhB,UACE,eAACC,EAAA,EAAD,WACE,cAACE,EAAA,EAAD,CAAKmN,GAAI,EAAGjN,GAAI,EAAGkN,GAAI,GAAIhW,MAAO,CAAC8D,QAAS,IAA5C,SACE,cAACkO,GAAD,CAAapR,MAAM,SAASsE,KAAM8P,EAAY/C,QAASgD,EAAe1F,GAAI6F,EAAUlD,MAAOmD,MAE7F,cAACzM,EAAA,EAAD,CAAKmN,GAAI,EAAGjN,GAAI,EAAGkN,GAAI,GAAIhW,MAAO,CAAC8D,QAAS,IAA5C,SACE,cAACkO,GAAD,CAAapR,MAAM,QAAQsE,KAAMgQ,EAAWjD,QAASkD,EAAc5F,GAAI+F,EAASpD,MAAOqD,MAEzF,eAAC3M,EAAA,EAAD,CAAKmN,GAAI,EAAGjN,GAAI,GAAI9I,MAAO,CAAC8D,QAAS,IAArC,UACE,oDACA,cAACgR,GAAD,CAAanL,MAAO6L,EAAa9O,KAAM,EAAGC,IAAK,EAAGyL,KAAM,GAAKxI,SAAU,SAACD,GAAD,OAAW8L,EAAe9L,MACjG,mBAAG3J,MAAO,CAAEsD,OAAQ,QAApB,wBACA,cAAC6O,GAAA,EAAD,WAAkBqD,EAAcJ,EAAWE,GAASW,QAAQ,WAGhE,cAACvN,EAAA,EAAD,CAAK5I,UAAU,SAAf,SACE,cAACM,EAAA,EAAD,CACER,SAAO,EACPC,MAAM,UACNG,MAAO,CAACsD,OAAO,MAAOC,MAAO,eAC7B0G,UAAW+K,IAAeI,IAAaF,IAAcI,EACrDjV,QAAS,kBA1DA,WAOf,IANA,IACM6V,GADyC,IAAtBC,cAAKX,GAAuB,QAAWA,EAAeA,GAC3CJ,EAAWE,EACzCc,EAAY,CAAC,CAAC,KAAD,IAAChB,EAAY,GAAGc,GAAa,CAACA,EAAD,SAAaZ,EAAW,KAClEhQ,EAAe+Q,KAAmB,EAAErB,GAAaE,GAAYkB,GAE7DE,EAAc,GACXxL,EAAI,EAAGA,EAAI,IAAKA,IAAK,CAC5B,MAAoCxF,EAAa2I,SAAjD,mBAAOsI,EAAP,KAAqBC,EAArB,KACAF,EAAYvL,KAAK,CAAC1G,EAAG2E,IAAEC,MAAMsN,EAAc,GAAI/R,EAAGwE,IAAEC,MAAMuN,EAAa,KAGzE,IAAMC,EAAe,GACfC,EAAe,GACfC,EAAc,GACdC,EAAc,GAEpBN,EAAY3L,SAAQ,YAAa,IAAXtG,EAAU,EAAVA,EAAGG,EAAO,EAAPA,EACnBiS,EAAapS,GACfoS,EAAapS,KAEboS,EAAapS,GAAK,EAEpBqS,EAAa3L,KAAK,CAAC1G,EAAGA,EAAGG,EAAGiS,EAAapS,KACrCsS,EAAYnS,GACdmS,EAAYnS,KAEZmS,EAAYnS,GAAK,EAEnBoS,EAAY7L,KAAK,CAAC1G,EAAGG,EAAGA,EAAGmS,EAAYnS,QAIzCsR,EADa,CAACJ,OAAQgB,EAAcf,MAAOiB,EAAahB,MAAOU,IA0B1CO,IALjB,yBAUU,IAAVtI,GAAgB,cAACkF,GAAD,CAAUC,WAAYmC,EAAQH,OAAQ/B,UAAWkC,EAAQF,MAAOrD,UAAWuD,EAAQD,WCpF5F,SAASkB,KACtB,OACE,sBAAKhX,UAAU,gBAAf,UACE,cAAC6I,EAAA,EAAD,CAAO3I,MAAO,CAAEuD,MAAO,MAAOD,OAAQ,QAAUzD,MAAM,UAAtD,iCAGA,uBACA,cAACkV,GAAD,OCZS,SAASgC,GAAT,GAA8D,IAAlCC,EAAiC,EAAjCA,KAAMC,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,SAC/D,OACE,gCACE,eAAC5N,EAAA,EAAD,WACE,cAACQ,EAAA,EAAD,CAAiBC,UAAU,UAA3B,SACE,cAACmI,GAAA,EAAD,8DAEF,cAAC3I,EAAA,EAAD,CACE1J,UAAU,SACVwB,KAAK,SACL8Q,KAAM,GACNzI,MAAOqN,EACPtQ,KAAM,EACNC,IAAK,EACLiD,SAAU,SAACC,GAAD,OAAWoN,EAAQpN,EAAMC,OAAOH,aAE9C,uBACA,eAACJ,EAAA,EAAD,WACE,cAACQ,EAAA,EAAD,CAAiBC,UAAU,UAA3B,SACI,cAACmI,GAAA,EAAD,8DAEJ,cAAC3I,EAAA,EAAD,CACE1J,UAAU,SACVwB,KAAK,SACL8Q,KAAM,GACNzI,MAAOuN,EACPxQ,KAAM,EACNC,IAAK,EACLiD,SAAU,SAACC,GAAD,OAAWsN,EAAStN,EAAMC,OAAOH,gB,yBC1BtC,SAASyN,GAAT,GAAyE,IAAzCC,EAAwC,EAAxCA,WAAYC,EAA4B,EAA5BA,UAAWC,EAAiB,EAAjBA,cACpE,EAA8BvU,mBAAS,IAAvC,mBAAOwU,EAAP,KAAgBC,EAAhB,KAwDA,OAtDA1R,qBAAU,WAmDR0R,EAlDiB,CACf5R,MAAO,CACLvE,KAAM,UACNoW,SAAU,MAEZ9W,MAAO,CACLiG,KAAM,8BAERJ,MAAO,CACLC,IAAK,EACLC,IAAK,GACL/F,MAAQ,CACNiG,KAAM,gBAGVG,MAAO,CACLN,IAAK,GACLC,IAAK,IACL/F,MAAO,CACLiG,KAAM,eAGVpB,OAAQ,CACN,CACEnE,KAAM,UACNoD,KAAM2S,EACN/W,KAAM,aACNT,MAAO,WAET,CACEyB,KAAM,OACNoD,KAAM4S,EACNhX,KAAM,mBACNT,MAAO,UACPkF,MAAO,CACL6B,SAAS,IAGb,CACEtF,KAAM,OACNoD,KAAM6S,EACNjX,KAAM,uBACNT,MAAO,UACPkF,MAAO,CACL6B,SAAS,SAOhB,CAACyQ,EAAYC,EAAWC,IAGzB,cAAC,IAAD,CAAiBjQ,WAAYC,IAAYjF,QAASkV,ICrDvC,SAASG,KACtB,MAAwB3U,mBAAS,GAAjC,mBAAOgU,EAAP,KAAaC,EAAb,KACA,EAA0BjU,mBAAS,GAAnC,mBAAOkU,EAAP,KAAcC,EAAd,KACA,EAAsCnU,mBAAS,GAA/C,mBAAOwS,EAAP,KAAoBC,EAApB,KACA,EAAoCzS,mBAAS,GAA7C,mBAAOkT,EAAP,KAAmB0B,EAAnB,KACA,EAA0B5U,mBAAS,GAAnC,mBAAOuL,EAAP,KAAcC,EAAd,KACA,EAA4BxL,mBAAS,IAArC,mBAAOyC,EAAP,KAAeoS,EAAf,KACA,EAAsC7U,oBAAS,GAA/C,mBAAO8U,EAAP,KAAoBC,EAApB,KACA,EAA8B/U,mBAAS,CAACgV,OAAQ,GAAIV,UAAW,GAAIC,cAAe,KAAlF,mBAAO1B,EAAP,KAAgBC,EAAhB,KAEA/P,qBAAU,WACJN,EAAOyB,OAAS,IAClB+Q,IACAF,GAAe,MAEhB,CAACtS,IAEJM,qBAAU,WACH8P,EAAQmC,OAAO9Q,OAAS,GAAO2O,EAAQyB,UAAUpQ,OAAS,GAC7DsH,EAAS,KAEV,CAACqH,IAEJ,IAEMqC,EAAM,IAENC,EAAiB,SAACC,EAAOC,GAG7B,IAFA,IAAML,EAAS,GAEPlN,EAAE,EAAEA,EAAE,GAAGA,IACfkN,EAAOlN,GAAK9B,IAAEC,MAAMoP,EAAMvN,EAAIsN,EAAO,GAGvC,OAAOJ,GAyBHC,EAAe,WAYnB,IATA,IAAMK,EAAUjO,KAAGC,MAAM4N,EAAK,EAAG,GAG3BK,EAAO,GACPC,EAAS,GACTC,EAAS,GAGTC,EAAS,GACP5N,EAAE,EAAEA,EAAEoN,EAAIpN,IAAI,CACpB,IAAM6N,EAAa,GAAK3B,EAAOvR,EAAOqF,GAAG,GAAKoM,EAAQzR,EAAOqF,GAAG,GAAKwN,EAAQxN,GAC7E4N,EAAO3N,KAAK9B,aAAiB,IAAX0P,GAAgB,KAClCJ,EAAKxN,KAAK,GACVyN,EAAOzN,KAAKtF,EAAOqF,GAAG,IACtB2N,EAAO1N,KAAKtF,EAAOqF,GAAG,IAKxB,IADA,IAAM8N,EAAc,GACZ9N,EAAE,EAAEA,EAAEoN,EAAIpN,IAChB8N,EAAY7N,KAAK,CAACtF,EAAOqF,GAAG,GAAG4N,EAAO5N,KAIxC,IAAM+N,EAAWC,KAAWC,OAAOH,GAC7BI,EAAcH,EAASI,SAAS,GAChCC,EAAYL,EAASI,SAAS,GAK9BE,EAAIC,aAAUC,aAAO,CAACd,EAAKC,EAAQC,KACnCa,EAAIF,aAAUC,aAAO,CAACX,KACtBa,EAAUC,aAAIC,aAASL,aAAUD,GAAGA,IACpCO,EAAOD,aAASA,aAASF,EAAQH,aAAUD,IAAIG,GAErDxD,EAAW,CACTkC,OAAQY,EAAY7W,KAAI,yCAAa,CAACsC,EAAd,KAAiBG,EAAjB,SACxB8S,UAAWa,EAAea,EAAYE,GACtC3B,cAAeY,EAAewB,WAAWD,EAAKE,IAAI,CAAC,EAAE,KAAKD,WAAWD,EAAKE,IAAI,CAAC,EAAE,SASrF,OACE,gCACE,cAAClR,EAAA,EAAD,UACE,mBAAG5I,UAAU,SAAb,6CAEF,uBACA,eAAC4I,EAAA,EAAD,CAAKG,GAAI,EAAGgR,GAAI,EAAhB,UACE,cAACjR,EAAA,EAAD,CAAK5I,MAAO,CAACsD,OAAQ,OAAQQ,QAAS,IAAtC,SACE,cAACiT,GAAD,CAAkBC,KAAMA,EAAMC,QAASA,EAASC,MAAOA,EAAOC,SAAUA,MAE1E,eAACvO,EAAA,EAAD,WACE,qBAAK5I,MAAO,CAAC8D,QAAS,IAAtB,sEACA,cAACgR,GAAD,CAAanL,MAAO6L,EAAa9O,KAAM,IAAMC,IAAK,IAAMyL,KAAM,IAAKxI,SAAU,SAACD,GAAD,OAjB3D,SAACA,GACzB8L,EAAe9L,GACfiO,EApFW,EAoFGjO,EAnFH,GAkGmFmQ,CAAkBnQ,MAC1G,uBACA,eAACJ,EAAA,EAAD,CAAYvJ,MAAO,CAACuD,MAAO,cAAeD,OAAQ,QAAlD,UACE,cAAC6O,GAAA,EAAD,CAAgBrS,UAAU,SAA1B,6DACA,cAACqS,GAAA,EAAD,CAAgBrS,UAAU,SAA1B,SAAoCoW,EAAWD,QAAQ,cAI7D,uBACA,cAACvN,EAAA,EAAD,UACE,eAACE,EAAA,EAAD,WACE,2FACA,cAACxI,EAAA,EAAD,CAAQP,MAAM,UAAUQ,QAAS,kBAjGlB,WAarB,IAVA,IAAM0Z,EAAmB,CACvB,CAACC,EAAa9D,GACd,CAACA,EAAY+D,KAIT3U,EAAe+Q,KAAmB,CAAC,EAAG,GAAI0D,GAC1CG,EAAY,GAGTpP,EAAI,EAAGA,EAAIoN,EAAKpN,IAAI,CAC3B,MAAexF,EAAa2I,SAA5B,mBAAOkM,EAAP,KAAUC,EAAV,KACAF,EAAUnP,KAAK,CAAC/B,IAAEC,MAAMkR,EAAG,GAAInR,IAAEC,MAAMmR,EAAG,KAG5CvC,EAAUqC,GA+EmCG,IAAvC,4BAGJ,uBACE9L,GAAS,GACT,gCACE,cAAC7F,EAAA,EAAD,UACE,cAACE,EAAA,EAAD,CAAKC,GAAI,CAAC5D,KAAM,GAAIqV,OAAQ,GAAIvE,GAAI,CAAC9Q,KAAM,EAAGqV,OAAQ,GAAtD,SACE,cAAClD,GAAD,CACEC,WAAYxB,EAAQmC,OACpBV,UAAWzB,EAAQyB,UACnBC,cAAeO,EAAcjC,EAAQ0B,cAAgB,SAI3D,cAAC7O,EAAA,EAAD,UACE,eAACE,EAAA,EAAD,WACE,mBAAG/I,MAAM,UAAT,0DACA,cAACO,EAAA,EAAD,CAAQR,SAAO,EAACC,MAAM,UAAUQ,QAAS,kBAAM0X,GAAe,IAA9D,uDC/JC,SAASwC,KACtB,OACE,sBAAKza,UAAU,gBAAf,UACE,cAAC6I,EAAA,EAAD,CAAO3I,MAAO,CAAEuD,MAAO,MAAOD,OAAQ,QAAUzD,MAAM,UAAtD,mCAGA,uBACA,eAAC6I,EAAA,EAAD,WACE,mBAAG5I,UAAU,SAAb,kFACA,mBAAGA,UAAU,SAAb,oHAEF,uBACA,cAAC6X,GAAD,IACA,0BCVS,SAAS6C,GAAT,GAA+E,IAAnDzN,EAAkD,EAAlDA,SAAU0N,EAAwC,EAAxCA,YAAaC,EAA2B,EAA3BA,UAAWC,EAAgB,EAAhBA,aAC3E,OACE,gCACE,cAACjS,EAAA,EAAD,CAAK5I,UAAU,SAAf,SACE,qHACgF,IAC9E,cAACuC,EAAD,CAAqBC,QAAS,CAAC,IAAK,KAAMC,OAAQkY,EAAajY,SAAUuK,SAG7E,uBACA,cAACrE,EAAA,EAAD,CAAK5I,UAAU,SAAf,SACE,wDACwB,IACtB,cAACuC,EAAD,CACEC,QAAS,CAAC,MAAO,MAAO,OACxBC,OAAQ,SAACqY,GAAD,OAASD,EAAaC,EAAIC,MAAM,EAAG,KAC3CrY,SAAUkY,EAAY,WAI5B,uBACA,cAAChS,EAAA,EAAD,CAAK5I,UAAU,SAAf,SACE,cAAC8I,EAAA,EAAD,CAAKiR,GAAG,KAAK/Q,GAAI,CAAE7D,KAAM,EAAGqV,OAAQ,GAApC,SACE,+CAEE,cAACxF,GAAD,CAAanL,MAAO+Q,EAAWhU,IAAK,EAAGC,IAAK,GAAIyL,KAAM,EAAGxI,SAAU+Q,c,cCnBhE,SAASG,GAAT,GAA2G,IAAvEzV,EAAsE,EAAtEA,gBAAiB0V,EAAqD,EAArDA,QAASnT,EAA4C,EAA5CA,SAAUQ,EAAkC,EAAlCA,QAAS5F,EAAyB,EAAzBA,SAAUS,EAAe,EAAfA,YACxG,EAA0BD,mBAAS,IAAnC,mBAAO6C,EAAP,KAAcC,EAAd,KA4LA,OA1LAC,qBAAU,WACR,MAA4C9E,EAAW2G,GAA/CnH,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,QAASE,EAA1B,EAA0BA,MAAOC,EAAjC,EAAiCA,OAE3BuO,EAAc,GACd4L,EAAe,GACfC,EAAoB,GAE1BF,EAAQpQ,SAAQ,SAACuQ,GACf9L,EAAYrE,KAAZ,2BACKmQ,GADL,IAEE7W,EAAG6W,EAAaxZ,GAChB8C,EAAG0W,EAAahW,QAEdgW,EAAanW,MACfiW,EAAajQ,KAAb,2BACKmQ,GADL,IAEE/P,IAAK+P,EAAa/V,UAClBgW,KAAMD,EAAa9V,UACnBf,EAAG6W,EAAaxZ,MAGlBuZ,EAAkBlQ,KAAlB,2BACKmQ,GADL,IAEE/P,IAAK+P,EAAa/V,UAClBgW,KAAMD,EAAa9V,UACnBf,EAAG6W,EAAaxZ,SAKtB,IAAM0Z,EAAgB,CACpBC,aAAc,GACdhU,YAAa,iRACbiU,SAAS,EACTC,YAAa,QAGTvV,EAAW,CACfH,MAAO,CACLvE,KAAM,cACNka,UAAU,EACVtV,WAAW,EACXuV,SAAU,KACVC,OAAQ,CAENC,UAAW,SAAC9R,GACVA,EAAMC,OAAOrE,OAAOkF,SAAQ,SAAClF,GAC3BA,EAAOf,KAAKiG,SAAQ,SAACiR,GACnBA,EAAMrZ,QAAO,GAAO,YAM9B0D,YAAa,CACXR,OAAQ,CACNmW,MAAO,CACLF,OAAQ,CACNG,MADM,WAEJ5Y,EAAYwM,MACZA,KAAKlN,QAAO,GAAO,MAIzB2D,UAAW,CACTC,SAAU,GAEZ2V,OAAQ,YAGZlb,MAAO,CACLiG,KAAMjG,GAER6F,MAAO,CACLsV,UAAU,EACVrV,IAAK,EACLC,IAAKA,aAAIoU,EAAQ7T,OAAQ,IACzBJ,aAAa,EACblG,MAAO,CACLiG,KAAM,iBAERmV,kBAAmB,EACnBC,aAAc,GAEhBjV,MAAO,CACLN,IAAKhG,EACLiG,IAAKlG,EACLqG,aAAa,EACbC,WAAW,EACXnG,MAAO,CACLiG,KAAMhG,IAGV4E,OAAQ,CACN,CACEnF,KAAM,sBACNoE,KAAMsW,EACNnb,MAAO,uBACPqc,kBAAkB,EAClBrX,cAAc,EACduC,QAASgU,EACTe,kBAAkB,EAClBjW,UAAW,CACTC,SAAU,GAEZsH,OAAQ,CACNC,MAAO,CACL7N,MAAO,sBAET+N,SAAU,CACR/N,MAAO,wBAET0C,OAAQ,CACNqE,SAAS,EACT/G,MAAO,0BAIb,CACES,KAAM,sBACNoE,KAAMuW,EACNpb,MAAO,uBACPqc,kBAAkB,EAClBrX,cAAc,EACduC,QAASgU,EACTe,kBAAkB,EAClBjW,UAAW,CACTC,SAAU,GAEZsH,OAAQ,CACNC,MAAO,CACL7N,MAAO,sBAET+N,SAAU,CACR/N,MAAO,wBAET0C,OAAQ,CACNqE,SAAS,EACT/G,MAAO,0BAIb,CACES,KAAM,eACNgB,KAAM,UACNoD,KAAM0K,EACNvP,MAAO,UACPuc,OAAQ,CACNxV,SAAS,EACTyV,OAAQ,UACRC,OAAQ,GAEVH,kBAAkB,EAClBjW,UAAW,CACTC,SAAU,GAEZsH,OAAQ,CACNC,MAAO,CACL9G,SAAS,GAEXrE,OAAQ,CACNqE,SAAS,IAGbQ,QAASgU,GAEX,CACE9Z,KAAM,OACNhB,KAAM,kBACNoE,KAAM,CAAC,CAAC,EAAG0D,GAAU,CAAC2S,EAAQ7T,OAAQkB,IACtCvI,MAAO,OACP8E,qBAAqB,EACrBE,cAAc,EACdE,MAAO,CACL6B,SAAS,GAEXwV,OAAQ,CACNxV,SAAS,GAEX2V,QAAS,KAIfzW,EAASE,KACR,CAACX,EAAiB0V,EAASnT,EAAUQ,EAASnF,IAG/C,gCAEIT,EACE,eAACmG,EAAA,EAAD,CAAO9I,MAAO2C,EAASuC,MAAQ,UAAY,SAAUjF,UAAU,SAA/D,2BACiB0C,EAASd,GAD1B,kBAC6Cc,EAAS0C,KAAK+Q,QAAQ,GADnE,UAC8E5Q,EAD9E,SACqG2D,IAAEC,MAAMzG,EAAS2C,UAAW,GADjI,KACuI6D,IAAEC,MAAMzG,EAAS4C,UAAW,GADnK,uCAC2M5C,EAASuC,MAAMyX,cAExN,qBAAKxc,MAAO,CAAC6D,OAAQ,MAE3B,cAAC,IAAD,CAAiByD,WAAYC,IAAYjF,QAASuD,OC/MzC,SAAS4W,GAAT,GAA2D,IAA/BC,EAA8B,EAA9BA,eAAgBjM,EAAc,EAAdA,WACzD,EAA8CzN,mBAAS,GAAvD,mBAAO0N,EAAP,KAAwBC,EAAxB,KACA,EAAwC3N,mBAAS,GAAjD,mBAAO4N,EAAP,KAAqBC,EAArB,KAEA,OACE,sBAAK7Q,MAAO,CAAE8D,QAAS,IAAvB,UACE,cAAC6E,EAAA,EAAD,CAAO9I,MAAM,UAAUG,MAAO,CAACuD,MAAO,MAAOD,OAAQ,QAArD,gDAGA,uBACA,kDACA,cAACkG,EAAA,EAAD,CACExJ,MAAO,CAACuD,MAAO,MAAOD,OAAQ,QAC9BoD,IAAK,EACLpF,KAAK,SACLoI,YAAY,eACZE,SAAU,SAACC,GAAD,OAAWgH,EAAgBhH,EAAMC,OAAOH,QAClDA,MAAOiH,IAET,uBACA,6DACA,cAACpH,EAAA,EAAD,CACExJ,MAAO,CAACuD,MAAO,MAAOD,OAAQ,QAC9BoD,IAAK,EACLpF,KAAK,SACLoI,YAAY,0BACZE,SAAU,SAACC,GAAD,OAAW8G,EAAmB9G,EAAMC,OAAOH,QACrDA,MAAO+G,IAET,uBACA,cAACtQ,EAAA,EAAD,CACEC,QAAS,kBAAMoQ,EAAWG,EAAcF,IACxCzG,SAAW2G,EAAe,GAAOA,EAAe8L,GAAoBhM,EAAkB,EAFxF,iBAMA,cAACtQ,EAAA,EAAD,CAAQC,QAAS,kBAAMoQ,KAAvB,sBCnCS,SAASkM,GAAT,GAAiD,IAAzB5B,EAAwB,EAAxBA,QAAS9X,EAAe,EAAfA,YAExC2Z,EAAe7B,EAAQhZ,KAAI,SAACmZ,GAAD,OAC/B,qBACElb,MAAO,CAAE2C,gBAAiBuY,EAAanW,MAAQ,2BAA6B,2BAA4B+W,OAAQ,WAEhHzb,QAAS,kBAAM4C,EAAYiY,IAH7B,UAKE,6BAAKA,EAAaxZ,KAClB,6BAAKwZ,EAAajW,OAClB,6BAAKiW,EAAahW,OAClB,6BAAKgW,EAAa/V,YAClB,6BAAK+V,EAAa9V,YAClB,6BAAK8V,EAAa7V,kBAClB,6BAAK6V,EAAa5V,aAAauX,kBAT1B3B,EAAaxZ,OAetB,OAFAkb,EAAaE,UAGX,qBAAK9c,MAAO,CAAE6D,OAAQ,IAAKkZ,SAAU,OAAQjO,WAAY,IAAzD,SACE,eAAC9G,EAAA,EAAD,CAAO0F,OAAK,EAAC5N,UAAU,UAAvB,UACE,gCACE,+BACE,wCACA,sCACA,sCACA,oDACA,oDACA,kDACA,mDAGJ,gCACG8c,SChCI,SAASI,GAAT,GAAoE,IAAzCtV,EAAwC,EAAxCA,SAAUU,EAA8B,EAA9BA,QAASC,EAAqB,EAArBA,QAAST,EAAY,EAAZA,SACpE,EAAqD3G,EAAW2G,GAAxDnH,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,QAASC,EAA1B,EAA0BA,QAASC,EAAnC,EAAmCA,MAAOC,EAA1C,EAA0CA,OAEpC4E,EAAS,CACb,CACEnF,KAAM,aACNoE,KAAMgD,GAER,CACEpH,KAAM,UACNoE,KAAM2D,IAIV,OACE,eAACG,EAAA,EAAD,CAAWC,OAAK,EAAhB,UACE,eAACE,EAAA,EAAD,CAAO9I,MAAM,YAAYC,UAAU,SAAnC,4BACkBqB,EAAUyG,GAAU,GADtC,OAC8CF,EAASR,OADvD,IACgE/F,EAAUyG,GAAU,GADpF,sDAGA,cAACpC,EAAD,CACEC,OAAQA,EACR7E,MAAK,UAAKA,EAAL,oCAAsCoI,IAAEC,MAAMb,EAAS,IAC5D1C,KAAMhF,EACNiF,KAAMlF,EACNmF,KAAMjF,EACNE,OAAQA,O,OHtBhBoc,GAAK1V,K,cIKU,SAAS2V,GAAT,GAAqD,IAA7BtV,EAA4B,EAA5BA,SAAU8U,EAAkB,EAAlBA,eAC/C,EAAgC1Z,mBAAS,KAAzC,mBAAO+J,EAAP,KAAiB0N,EAAjB,KACA,EAAkCzX,mBAAS,IAA3C,mBAAO0X,EAAP,KAAkBC,EAAlB,KACA,EAAgC3X,mBAAS,IAAzC,mBAAO0E,EAAP,KAAiBgH,EAAjB,KACA,EAA8B1L,mBAAS,IAAvC,mBAAO+X,EAAP,KAAgBoC,EAAhB,KACA,EAAgCna,qBAAhC,mBAAOR,EAAP,KAAiBS,EAAjB,KAEA8C,qBAAU,WACR2I,EAAY,IACZyO,EAAW,MACV,CAACvV,IAGJ7B,qBAAU,WACR,GAAwB,IAApB2B,EAASR,OAAc,CAEzB,IAAM0H,EAAS9B,GAAqBlF,EAAU8U,EAAgB,CAACvR,IAAK,GAAIC,GAAI,KAC5EsD,EAAYE,MAEb,CAAClH,EAAUE,EAAU8U,IAIxB,IAAMU,EAAW,WACf7V,IAAW8V,OAAO1S,SAAQ,SAAC9E,GACrBA,GACFA,EAAMJ,OAAOkF,SAAQ,SAAClF,GACpBA,EAAOf,KAAKiG,SAAQ,SAACiR,GACnBA,EAAMrZ,QAAO,GAAO,aAOxB+a,EAAkB,SAACrY,GAA0B,IAApBsY,EAAmB,uDAAN,EAE1C,GADAH,IACKnY,EAGE,CAEL,IADA,IAAMuY,EAAgB,GACb1S,EAAI,EAAGA,EAAIyS,EAAczS,IAAK,CACrC,IAAMmD,EAASjF,IAAEK,WAAW3B,EAAUzC,GAChCC,EAAO8D,IAAEC,MAAMgE,GAAegB,GAAS,GACvC7F,EAAUY,IAAEC,MAAMgE,GAAevF,GAAW,GAC5CyC,EAAcgD,GAAoC,MAAbJ,EAAoBrF,EAAWuG,GACpEwP,EAA2B,MAAb1Q,EAAoB2Q,SAAMC,SAAWD,SAAME,IAC/D,EAA+BH,EAAWvY,EAAM,EAAKwV,EAAY,IAAMvQ,EAAalF,GAApF,mBAAOE,EAAP,KAAkBC,EAAlB,KACM8V,EAAe,CACnBxW,KAAMuJ,EACNhJ,MAAOA,EACPC,KAAMA,EACNC,UAAW6D,IAAEC,MAAM9D,EAAW,GAC9BC,UAAW4D,IAAEC,MAAM7D,EAAW,GAC9BC,gBAAiBqV,EACjBpV,aAAcyH,EACdhI,MAAQqD,GAAWY,IAAEC,MAAM9D,EAAW,IAAQiD,GAAWY,IAAEC,MAAM7D,EAAW,IAE9EoY,EAAczS,KAAKmQ,GAErB,IAAMlK,EAAU,sBAAO+J,GAAYyC,GAC7BK,EAAiB7M,EAAWjP,KAAI,SAACkM,EAAQhD,GAAT,mBAAC,eAAuBgD,GAAxB,IAAgCvM,GAAIuJ,EAAQ,OAClFkS,EAAWU,GACX5a,EAAY4a,EAAeA,EAAe3W,OAAS,SA1BnDiW,EAAW,IACXla,KAkCJ,OACE,cAACG,EAAD,UACE,gCACE,cAACsF,EAAA,EAAD,UACE,cAAC8R,GAAD,CACEzN,SAAUA,EACV0N,YAAaA,EACbC,UAAWA,EACXC,aAAcA,MAGlB,uBACA,eAACjS,EAAA,EAAD,CAAKI,GAAI,EAAGD,GAAI,EAAhB,UACE,eAACD,EAAA,EAAD,WACE,cAACoU,GAAD,CACEtV,SAAUA,EACVU,QAAS6E,GAAevF,GACxBW,QAAS7F,EAAWA,EAASkC,KAAO,GACpCkD,SAAUA,IAEZ,+EACA,cAACsB,EAAD,CAAiBC,QAASzB,EAASR,OAAQkC,YAAakU,OAE1D,cAAC1U,EAAA,EAAD,UACE,cAACkS,GAAD,CACEzV,gBAAiBqV,EACjBK,QAASA,EACTnT,SAAUA,EACVQ,QAASY,IAAEC,MAAMgE,GAAevF,IAChClF,SAAUA,EACVS,YAAaA,SAInB,eAACyF,EAAA,EAAD,WACE,cAACE,EAAA,EAAD,CAAKC,GAAI,GAAIkN,GAAI,EAAjB,SACE,cAAC0G,GAAD,CACEC,eAAgBhV,EAASR,OACzBuJ,WAAY6M,MAGhB,cAAC1U,EAAA,EAAD,CAAKC,GAAI,GAAIkN,GAAI,EAAjB,SACE,cAAC4G,GAAD,CAAc5B,QAASA,EAAS9X,YA/CtB,SAAC2Y,GACnB3Y,EAAY2Y,GACZwB,YAgDI,uBACA,cAAC1U,EAAA,EAAD,UACIqS,EAAQ7T,OAAS,GACjB,eAACyB,EAAA,EAAD,CAAO9I,MAAM,OAAOG,MAAO,CAACsD,OAAO,QAAnC,UACGyX,EAAQ+C,QAAO,qBAAG/Y,SAAoBmC,OADzC,kDAEE,uBACC6T,EAAQ+C,QAAO,qBAAG/Y,SAAmBmC,OAHxC,SAGsD8B,IAAEC,MAAM,IAAM8R,EAAQ+C,QAAO,qBAAG/Y,SAAmBmC,OAAS6T,EAAQ7T,OAAQ,GAHlI,gBCnIG,SAAS6W,KACtB,MAA+B/a,mBAAS,IAAxC,mBAAO4E,EAAP,KAAiBoH,EAAjB,KAEA,OACE,sBAAKlP,UAAU,gBAAf,UACE,cAAC6I,EAAA,EAAD,CAAO3I,MAAO,CAAEuD,MAAO,MAAOD,OAAQ,QAAUzD,MAAM,UAAtD,kCAGA,cAAC8I,EAAA,EAAD,CAAO3I,MAAO,CAAEuD,MAAO,MAAOD,OAAQ,QAAUzD,MAAM,UAAtD,2iBAGA,cAACgD,EAAD,CAAQC,IAAI,KAAKC,OAAQiM,IACxBpH,GAAY,cAACsV,GAAD,CAActV,SAAUA,EAAU8U,epClB1B,SqCS3B,IACesB,GADC,CAAC,CAAC,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,MAAO,GAAK,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,MAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,MAAQ,CAAC,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,MAAO,GAAK,GAAO,KAAO,GAAO,IAAM,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,MAAQ,CAAC,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,MAAO,GAAK,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,MAAQ,CAAC,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,MAAO,GAAK,GAAO,KAAO,GAAO,KAAO,GAAO,IAAM,GAAO,KAAO,GAAO,KAAO,GAAO,IAAM,GAAO,KAAO,GAAO,KAAO,GAAO,IAAM,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,KAAO,CAAC,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,MAAO,GAAK,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,IAAM,GAAO,KAAO,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,KAAO,IAAO,KAAO,IAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,MAAQ,CAAC,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,MAAO,GAAK,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,IAAM,IAAO,IAAM,IAAO,KAAO,IAAO,KAAO,MAAO,KAAO,IAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,MAAQ,CAAC,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,MAAO,GAAK,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,IAAM,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,KAAO,CAAC,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,GAAK,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,MAAO,GAAK,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,IAAM,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,GAAK,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,IAAM,MAAO,MAAQ,CAAC,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,MAAO,GAAK,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,MAAO,KAAO,IAAO,IAAM,IAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,IAAM,IAAO,KAAO,MAAO,MAAQ,CAAC,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,MAAO,GAAK,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,IAAM,GAAO,KAAO,GAAO,KAAO,MAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,IAAM,IAAO,IAAM,IAAO,KAAO,IAAO,KAAO,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,MAAQ,CAAC,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,MAAO,GAAK,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,IAAM,GAAO,KAAO,GAAO,IAAM,GAAO,KAAO,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,IAAM,IAAO,KAAO,MAAO,KAAO,IAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,IAAM,IAAO,KAAO,IAAO,KAAO,MAAO,MAAQ,CAAC,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,MAAO,GAAK,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,IAAM,GAAO,KAAO,GAAO,IAAM,GAAO,KAAO,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,IAAM,IAAO,KAAO,IAAO,KAAO,MAAO,MAAQ,CAAC,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,MAAO,GAAK,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,IAAM,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,MAAQ,CAAC,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,MAAO,GAAK,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,MAAQ,CAAC,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,MAAO,GAAK,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,MAAQ,CAAC,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,MAAO,GAAK,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,MAAQ,CAAC,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,MAAO,GAAK,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,IAAM,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,MAAQ,CAAC,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,MAAO,GAAK,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,IAAM,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,MAAQ,CAAC,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,MAAO,GAAK,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,IAAM,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,IAAM,IAAO,KAAO,IAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,MAAQ,CAAC,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,MAAO,GAAK,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,IAAM,IAAO,KAAO,IAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,MAAQ,CAAC,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,MAAO,GAAK,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,KAAO,IAAO,KAAO,IAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,MAAQ,CAAC,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,MAAO,GAAK,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,MAAQ,CAAC,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,MAAO,GAAK,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,MAAQ,CAAC,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,MAAO,GAAK,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,MAAQ,CAAC,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,MAAO,GAAK,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,MAAQ,CAAC,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,MAAO,GAAK,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,MAAO,KAAO,IAAO,KAAO,IAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,MAAQ,CAAC,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,MAAO,GAAK,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,MAAO,KAAO,IAAO,KAAO,IAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,IAAM,IAAO,KAAO,IAAO,KAAO,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,MAAQ,CAAC,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,MAAO,GAAK,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,IAAM,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,MAAO,KAAO,IAAO,IAAM,IAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,IAAM,IAAO,IAAM,IAAO,KAAO,IAAO,KAAO,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,MAAQ,CAAC,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,MAAO,GAAK,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,IAAM,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,MAAO,KAAO,IAAO,IAAM,IAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,IAAM,IAAO,IAAM,IAAO,KAAO,IAAO,KAAO,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,MAAQ,CAAC,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,MAAO,GAAK,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,IAAM,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,MAAO,KAAO,IAAO,IAAM,IAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,IAAM,IAAO,IAAM,IAAO,KAAO,IAAO,KAAO,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,MAAQ,CAAC,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,MAAO,GAAK,GAAO,IAAM,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,IAAM,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,MAAO,KAAO,IAAO,IAAM,IAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,IAAM,IAAO,IAAM,IAAO,KAAO,IAAO,KAAO,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,MAAQ,CAAC,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,MAAO,GAAK,GAAO,IAAM,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,IAAM,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,MAAO,KAAO,IAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,MAAQ,CAAC,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,MAAO,GAAK,GAAO,IAAM,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,IAAM,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,MAAO,KAAO,IAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,MAAQ,CAAC,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,MAAO,GAAK,GAAO,IAAM,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,IAAM,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,MAAO,KAAO,IAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,IAAM,IAAO,KAAO,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,MAAQ,CAAC,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,MAAO,GAAK,GAAO,IAAM,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,IAAM,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,IAAM,IAAO,KAAO,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,MAAQ,CAAC,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,MAAO,GAAK,GAAO,IAAM,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,IAAM,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,IAAM,IAAO,KAAO,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,MAAQ,CAAC,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,MAAO,GAAK,GAAO,IAAM,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,IAAM,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,IAAM,IAAO,KAAO,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,MAAQ,CAAC,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,MAAO,GAAK,GAAO,IAAM,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,IAAM,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,IAAM,IAAO,KAAO,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,MAAQ,CAAC,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,MAAO,GAAK,GAAO,IAAM,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,IAAM,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,IAAM,IAAO,KAAO,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,MAAQ,CAAC,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,MAAO,GAAK,GAAO,IAAM,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,IAAM,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,IAAM,IAAO,KAAO,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,MAAQ,CAAC,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,GAAK,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,MAAO,GAAK,GAAO,IAAM,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,IAAM,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,GAAK,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,IAAM,IAAO,KAAO,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,MAAQ,CAAC,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,GAAK,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,MAAO,GAAK,GAAO,IAAM,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,IAAM,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,GAAK,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,IAAM,IAAO,KAAO,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,MAAQ,CAAC,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,GAAK,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,MAAO,GAAK,GAAO,IAAM,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,IAAM,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,GAAK,IAAO,KAAO,IAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,MAAQ,CAAC,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,GAAK,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,MAAO,GAAK,GAAO,IAAM,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,IAAM,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,GAAK,IAAO,KAAO,IAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,MAAQ,CAAC,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,GAAK,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,MAAO,GAAK,GAAO,IAAM,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,IAAM,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,GAAK,IAAO,KAAO,IAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,MAAQ,CAAC,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,GAAK,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,MAAO,GAAK,GAAO,IAAM,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,IAAM,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,GAAK,IAAO,KAAO,IAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,MAAQ,CAAC,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,GAAK,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,MAAO,GAAK,GAAO,IAAM,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,IAAM,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,GAAK,IAAO,KAAO,IAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,MAAQ,CAAC,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,GAAK,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,MAAO,GAAK,GAAO,IAAM,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,IAAM,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,GAAK,IAAO,KAAO,IAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,MAAQ,CAAC,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,GAAK,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,MAAO,GAAK,GAAO,IAAM,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,IAAM,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,GAAK,IAAO,KAAO,IAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,KAAO,IAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,MAAQ,CAAC,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,GAAK,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,MAAO,GAAK,GAAO,IAAM,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,IAAM,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,GAAK,IAAO,KAAO,IAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,KAAO,IAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,MAAQ,CAAC,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,GAAK,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,MAAO,GAAK,GAAO,IAAM,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,IAAM,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,GAAK,IAAO,KAAO,IAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,KAAO,IAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,MAAQ,CAAC,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,GAAK,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,MAAO,GAAK,GAAO,IAAM,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,IAAM,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,GAAK,IAAO,KAAO,IAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,KAAO,IAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,MAAQ,CAAC,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,GAAK,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,MAAO,GAAK,GAAO,IAAM,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,IAAM,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,GAAK,IAAO,KAAO,IAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,KAAO,IAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,MAAQ,CAAC,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,GAAK,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,MAAO,GAAK,GAAO,IAAM,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,IAAM,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,GAAK,IAAO,KAAO,IAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,KAAO,IAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,MAAQ,CAAC,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,GAAK,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,MAAO,GAAK,GAAO,IAAM,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,IAAM,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,GAAK,IAAO,KAAO,IAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,KAAO,IAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,MAAQ,CAAC,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,MAAO,GAAK,GAAO,IAAM,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,IAAM,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,KAAO,IAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,MAAQ,CAAC,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,MAAO,GAAK,GAAO,IAAM,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,KAAO,IAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,MAAQ,CAAC,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,MAAO,GAAK,GAAO,IAAM,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,KAAO,IAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,MAAQ,CAAC,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,MAAO,GAAK,GAAO,IAAM,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,KAAO,IAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,MAAQ,CAAC,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,MAAO,GAAK,GAAO,IAAM,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,KAAO,IAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,MAAQ,CAAC,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,MAAO,GAAK,GAAO,IAAM,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,KAAO,IAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,MAAQ,CAAC,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,MAAO,GAAK,GAAO,IAAM,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,KAAO,IAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,MAAQ,CAAC,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,MAAO,GAAK,GAAO,IAAM,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,KAAO,IAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,MAAQ,CAAC,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,MAAO,GAAK,GAAO,IAAM,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,KAAO,IAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,MAAQ,CAAC,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,MAAO,GAAK,GAAO,IAAM,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,KAAO,IAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,MAAQ,CAAC,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,MAAO,GAAK,GAAO,IAAM,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,MAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,KAAO,IAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,MAAQ,CAAC,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,MAAO,GAAK,GAAO,IAAM,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,MAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,KAAO,IAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,MAAQ,CAAC,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,MAAO,GAAK,GAAO,IAAM,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,MAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,KAAO,IAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,MAAQ,CAAC,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,MAAO,GAAK,GAAO,IAAM,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,MAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,KAAO,IAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,MAAQ,CAAC,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,MAAO,GAAK,GAAO,IAAM,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,MAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,KAAO,IAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,MAAQ,CAAC,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,MAAO,GAAK,GAAO,IAAM,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,MAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,KAAO,IAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,MAAQ,CAAC,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,MAAO,GAAK,GAAO,IAAM,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,MAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,KAAO,IAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,MAAQ,CAAC,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,MAAO,GAAK,GAAO,IAAM,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,MAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,KAAO,IAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,MAAQ,CAAC,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,MAAO,GAAK,GAAO,IAAM,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,MAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,KAAO,IAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,MAAQ,CAAC,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,MAAO,GAAK,GAAO,IAAM,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,MAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,KAAO,IAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,MAAQ,CAAC,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,MAAO,GAAK,GAAO,IAAM,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,MAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,KAAO,IAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,MAAQ,CAAC,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,MAAO,GAAK,GAAO,IAAM,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,MAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,KAAO,IAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,MAAQ,CAAC,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,MAAO,GAAK,GAAO,IAAM,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,MAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,MAAQ,CAAC,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,MAAO,GAAK,GAAO,IAAM,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,MAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,MAAQ,CAAC,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,MAAO,GAAK,GAAO,IAAM,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,MAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,MAAQ,CAAC,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,MAAO,GAAK,GAAO,IAAM,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,MAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,IAAM,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,MAAQ,CAAC,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,MAAO,GAAK,GAAO,IAAM,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,MAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,IAAM,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,MAAQ,CAAC,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,MAAO,GAAK,GAAO,IAAM,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,MAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,IAAM,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,MAAQ,CAAC,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,MAAO,GAAK,GAAO,IAAM,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,MAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,IAAM,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,MAAQ,CAAC,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,MAAO,GAAK,GAAO,IAAM,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,MAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,IAAM,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,MAAQ,CAAC,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,MAAO,GAAK,GAAO,IAAM,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,MAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,IAAM,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,MAAQ,CAAC,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,MAAO,GAAK,GAAO,IAAM,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,MAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,IAAM,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,MAAQ,CAAC,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,MAAO,GAAK,GAAO,IAAM,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,MAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,IAAM,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,MAAQ,CAAC,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,MAAO,GAAK,GAAO,IAAM,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,MAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,IAAM,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,MAAQ,CAAC,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,MAAO,GAAK,GAAO,IAAM,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,MAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,IAAM,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,MAAQ,CAAC,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,MAAO,GAAK,GAAO,IAAM,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,MAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,IAAM,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,MAAQ,CAAC,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,MAAO,GAAK,GAAO,IAAM,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,MAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,IAAM,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,MAAQ,CAAC,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,MAAO,GAAK,GAAO,IAAM,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,MAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,IAAM,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,MAAQ,CAAC,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,MAAO,GAAK,GAAO,IAAM,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,MAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,IAAM,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,MAAQ,CAAC,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,MAAO,GAAK,GAAO,IAAM,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,MAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,IAAM,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,MAAQ,CAAC,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,MAAO,GAAK,GAAO,IAAM,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,MAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,IAAM,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,MAAQ,CAAC,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,MAAO,GAAK,GAAO,IAAM,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,MAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,IAAM,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,MAAQ,CAAC,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,MAAO,GAAK,GAAO,IAAM,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,MAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,IAAM,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,MAAQ,CAAC,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,MAAO,GAAK,GAAO,IAAM,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,MAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,IAAM,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,MAAQ,CAAC,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,MAAO,GAAK,GAAO,IAAM,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,MAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,IAAM,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,MAAQ,CAAC,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,MAAO,GAAK,GAAO,IAAM,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,MAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,IAAM,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,MAAQ,CAAC,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,MAAO,GAAK,GAAO,IAAM,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,MAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,IAAM,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,MAAQ,CAAC,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,MAAO,GAAK,GAAO,IAAM,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,MAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,IAAM,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,MAAQ,CAAC,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,MAAO,GAAK,GAAO,IAAM,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,MAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,IAAM,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,MAAQ,CAAC,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,MAAO,GAAK,GAAO,IAAM,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,MAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,IAAM,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,MAAQ,CAAC,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,MAAO,GAAK,GAAO,IAAM,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,MAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,IAAM,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,MAAQ,CAAC,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,MAAO,GAAK,GAAO,IAAM,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,MAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,IAAM,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,MAAQ,CAAC,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,MAAO,GAAK,GAAO,IAAM,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,MAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,IAAM,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,MAAQ,CAAC,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,MAAO,GAAK,GAAO,IAAM,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,MAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,IAAM,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,MAAQ,CAAC,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,MAAO,GAAK,GAAO,IAAM,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,MAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,IAAM,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,MAAQ,CAAC,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,MAAO,GAAK,GAAO,IAAM,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,MAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,IAAM,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,MAAQ,CAAC,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,MAAO,GAAK,GAAO,IAAM,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,MAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,IAAM,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,MAAQ,CAAC,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,MAAO,GAAK,GAAO,IAAM,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,MAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,IAAM,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,MAAQ,CAAC,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,MAAO,GAAK,GAAO,IAAM,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,MAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,IAAM,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,MAAQ,CAAC,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,MAAO,GAAK,GAAO,IAAM,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,MAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,IAAM,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,MAAQ,CAAC,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,MAAO,GAAK,GAAO,IAAM,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,MAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,IAAM,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,MAAQ,CAAC,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,MAAO,GAAK,GAAO,IAAM,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,MAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,IAAM,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,MAAQ,CAAC,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,MAAO,GAAK,GAAO,IAAM,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,MAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,IAAM,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,MAAQ,CAAC,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,MAAO,GAAK,GAAO,IAAM,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,GAAO,KAAO,MAAO,IAAM,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,IAAM,MAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,IAAO,KAAO,MAAO,MAAQ,CAAC,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,IAAM,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,KAAO,OAAQ,K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","file":"static/js/main.459b2fc6.chunk.js","sourcesContent":["import React from 'react';\nimport { Button, Card, CardText } from 'reactstrap';\nimport PropTypes from 'prop-types';\n\nexport default function SimBarOption({ section, setSection }) {\n  return (\n    <Card body outline color=\"primary\" className=\"simOption\">\n      <CardText style={{overflowY: 'auto', boxSizing: 'content-box' }}>{section.description}</CardText>\n      <Button outline color='primary' onClick={() => setSection(section.name)}>\n        {section.name}\n      </Button>\n    </Card>\n  );\n}\n\nSimBarOption.propTypes = {\n  setSection: PropTypes.func.isRequired,\n  section: PropTypes.shape({\n    name: PropTypes.string,\n    description: PropTypes.string\n  }).isRequired,\n}\n","export const SAMPLE_SIZE = 2000;\n\nexport const VALUES = {\n  Normal: { xmaxval: 74, xminval: 56, ymaxval: 40, title: \"Milk Production\", xLabel: \"Gallons\" },\n  Uniform: { xmaxval: 10, xminval: -10, ymaxval: 25, title: \"Lottery Outcome\", xLabel: \"Dollars\"},\n  Exponential: { xmaxval: 400, xminval: 0, ymaxval: 10, title: \"Duration of Telemarketer Call\", xLabel: \"Duration (seconds)\"},\n  \"Chi-Squared\": {xmaxval: 25, xminval: 0, ymaxval: 40, title: \"Money Spent on Lunch\", xLabel: \"Dollars\"},\n  Mystery: { xmaxval: 80, xminval: 50, ymaxval: 40, title:\"Alien Female Height\", xLabel: \"Height (in)\"}\n}\n\nexport const VALUES_ALT = {\n  Normal: { xmaxval: 74, xminval: 56, title: \"Milk Production\", xLabel: \"Gallons\" },\n  Uniform: { xmaxval: 74, xminval: 56, title: \"Alien Female Height\", xLabel: \"Height (in)\"},\n  Exponential: { xmaxval: 400, xminval: 0, title: \"Duration of Telemarketer Call\", xLabel: \"Duration (seconds)\"},\n  \"Chi-Squared\": {xmaxval: 25, xminval: 0, title: \"Money Spent on Lunch\", xLabel: \"Dollars\"}\n}\n\nexport const TEXTS = {\n  Normal: [\"monthly Milk Production\", \"cows\",\"produced\", \" gallons a month.\"],\n  //Uniform: ['the wait time', 'people at the DMV in VT', \"reported a total time of\", \" minutes.\"],\n  Exponential: [\"duration\", \"Telemarketer Calls\",\"reported a duration of\", \" seconds on a call.\"],\n  \"Chi-Squared\": [\"expenditure\", \"workers on lunch\",\"reported an expenditure of\",\" dollars on lunch.\"],\n  Mystery: ['the height', 'Alien Females from planet Stata', \"reported a height of\", \" inches.\"],\n}\n\nexport const TEXTS_ALT = {\n  Normal: [\"monthly Milk Production\", \"cows\"],\n  Uniform: ['the height', 'Alien Females from planet Stata'],\n  Exponential: [\"duration\", \"Telemarketer Calls\"],\n  \"Chi-Squared\": [\"expenditure\", \"workers on lunch\"]\n}\n\nexport const HYPOTHESIS_OPTIONS = {\n  oneSample: [\n    {\n      type: \"≤\",\n      hypoText: \"Option 1: These cows produce more than \",\n      nullH: \"H_0: μ ≤  \",\n      alterH: \"H_a: μ >  \",\n      id: 0\n    },\n    {\n      type: \"≥\",\n      hypoText: \"Option 2: These cows produce less than \" ,\n      nullH: \"H_0: μ ≥  \",\n      alterH: \"H_a: μ <  \",\n      id: 1\n    },\n    {\n      type: \"=\",\n      hypoText: \"Option 3: These cows produce an amount not equal to \",\n      nullH: \"H_0: μ =  \",\n      alterH: \"H_a: μ ≠  \",\n      id: 2\n    }\n  ],\n  twoSample: [\n    {\n      hypoText: \"Option 1: These cows produce more than they did before.\",\n      nullH: \"H_0: μ_1 - μ_2 ≥ 0\",\n      alterH: \"H_a: μ_1 - μ_2 < 0\",\n      id: 0\n    },\n    {\n      hypoText: \"Option 2: These cows produce less than they did before\",\n      nullH: \"H_0: μ_1 - μ_2 ≤ 0\",\n      alterH: \"H_a: μ_1 - μ_2 > 0\",\n      id: 1\n    },\n    {\n      hypoText: \"Option 3: These cows produce a different amount now compared to before.\",\n      nullH: \"H_0: μ_1 - μ_2 = 0\",\n      alterH: \"H_a: μ_1 - μ_2 ≠ 0\",\n      id: 2\n    }\n  ]\n}\n\nexport const MODULES = [\n  {\n    name: 'Law of Large Numbers',\n    description: 'The Law of Large Numbers tells us that that the sample mean approaches the mean of the population as we increase the sample size. This simulation investigates the behavior of the sample mean as we change the sample size.',\n  },\n  {\n    name: \"Central Limit Theorem\",\n    description: \"The Central Limit Theorem states that, for sufficiently large samples, the sample mean is approximately normally distributed, even if the underlying population is not normally distributed (or if we have no idea what the underlying population looks like). This simulation investigates how the distribution of the sample mean is affected by the sample size and the shape of the population distribution.\",\n  },\n  {\n    name: \"Joint Distributions\",\n    description: \"A joint probability distribution describes the simultaneous behavior of two random variables.\",\n  },\n  {\n    name: \"Least Squares\",\n    description: \"Ordinary least squares regression estimates the slope(s) and intercept of a line to best fit data for two (or more) variables by minimizing the sum of the squared distances from the data points to the line.\",\n  },\n  {\n    name: \"Omitted Variable Bias\",\n    description: \"Omitted variable bias (OVB) arises when a variable that is i) correlated with the outcome and ii) correlated with one on the included regressors is omitted from the regression model.\",\n  },\n  {\n    name: \"Confidence Intervals\",\n    description: \"A confidence interval provides a range of values for the likely location of the true population mean, based on information gathered from a sample.\",\n  },\n  // {\n  //   name: \"Hypothesis Testing\",\n  //   description: \"test\",\n  // }\n];\n","/*\n\n  Displays a menu with all the simulations and allows the user to click to start them\n\n*/\nimport React from 'react';\nimport SimBarOption from './SimBarOption';\nimport PropTypes from 'prop-types'\nimport { MODULES } from '../lib/constants';\n\nexport default function SimBar({ setSection }) {\n\n  const sections = MODULES.map((section) =>\n    <li key={section.name}>\n      <SimBarOption section={section} setSection={setSection}/>\n    </li>\n  );\n\n  return (\n    <div key={'key23'}>\n      <div className=\"MiniLogo\"></div>\n      <ul className=\"simBarOptionList\">{sections}</ul>\n    </div>\n  );\n}\n\nSimBar.propTypes = {\n  setSection: PropTypes.func.isRequired,\n}\n","/*\n\n  Displays the introduction to the website and the start button\n\n*/\nimport React from 'react';\nimport { Button, Fade } from 'reactstrap';\nimport PropTypes from 'prop-types';\n\nexport default function StartHere({ start, showApp }) {\n  return (\n    <Fade in={start}>\n      <div className=\"Jumbotron\">\n        <p className=\"lead\">This website is an interactive educational application developed to simulate and visualize\n        various statistical concepts.</p>\n        <hr className=\"my2\" />\n        <p>Project of Professor Tanya Byker and Professor Amanda Gregg at Middlebury College, with research assistants Kevin Serrao, Class of 2018, Dylan Mortimer, Class of 2019, Ammar Almahdy, Class of 2020, Jacqueline Palacios, Class of 2020, Siyuan Niu, Class of 2021, David Gikoshvili, Class of 2021, and Ethan Saxenian, Class of 2022</p>\n        <Button outline color='danger' onClick={() => showApp()}>Start!</Button>\n      </div>\n    </Fade>\n  );\n}\n\nStartHere.propTypes = {\n  start: PropTypes.bool.isRequired,\n  showApp: PropTypes.func.isRequired,\n}\n","import React from \"react\";\nimport { ButtonGroup, Button } from \"reactstrap\";\nimport PropTypes from \"prop-types\";\n\nexport default function SelectorButtonGroup({ options, select, selected }) {\n  const buttons = options.map((option) =>\n    <Button\n      style={{ backgroundColor: (selected === option) ? \"#4CAF50\" : \"#555555\" }}\n      onClick={() => select(option)}\n      key={`${option}`}\n    >\n      {option}\n    </Button>\n  );\n\n  return (\n    <ButtonGroup>\n      {buttons}\n    </ButtonGroup>\n  )\n}\n\nSelectorButtonGroup.propTypes = {\n  options: PropTypes.arrayOf(PropTypes.string).isRequired,\n  select: PropTypes.func.isRequired,\n  selected: PropTypes.string\n}\n","/*\n  Allows the user to select simulation variations\n\n  Used by Law of Large Numbers and Central Limit Theorem\n*/\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport SelectorButtonGroup from './SelectorButtonGroup';\n\n\nexport default function PopBar({ sim, setPop }) {\n  const [selected, setSelected] = useState();\n\n  let modes = [];\n  if (sim === \"CLT\") {\n    modes = [ \"Normal\", \"Uniform\", \"Exponential\", \"Chi-Squared\", \"Mystery\" ];\n  } else if ((sim === \"LLN\") || (sim === \"CI\")) {\n    modes = [ \"Normal\", \"Uniform\", \"Exponential\", \"Chi-Squared\" ];\n  }\n\n  const onClick = (mode) => {\n    setPop(mode);\n    setSelected(mode);\n  }\n\n  return (\n    <div className=\"buttonGroup\">\n      <p>Pick a Population Distribution: </p>\n      <SelectorButtonGroup options={modes} select={onClick} selected={selected}/>\n    </div>\n  );\n}\n\nPopBar.propTypes = {\n  sim: PropTypes.string.isRequired,\n  setPop: PropTypes.func.isRequired,\n}\n","/*\n\n  Uses the Collapse element to create a variable-size div for its contents\n\n*/\nimport React from 'react';\nimport Collapse from 'react-collapse';\nimport { presets } from 'react-motion';\nimport '../styles/MarzEg.css';\nimport PropTypes from 'prop-types';\n\nexport default function Collapsable({ children }) {\n\n  return (\n    <div>\n      <Collapse\n        style={{\n          margin: \"auto\",\n          width: \"100%\",\n          textAlign: \"center\",\n          backgroundColor: \"rgba(255,255,255,0.4)\",\n          marginBottom: '1em'\n        }}\n        isOpened\n        springConfig={{ ...presets['gentle'] }}\n      >\n        <div style={{ height: \"100%\", padding: '2em' }}>\n          <div style={{ padding: '2em' }}>\n            {children}\n          </div>\n        </div>\n      </Collapse>\n    </div>\n  );\n}\n\nCollapsable.propTypes = {\n  children: PropTypes.element.isRequired,\n}\n","import PropTypes from \"prop-types\";\n\nexport const popShapeType = PropTypes.oneOf([\n  \"Normal\",\n  \"Uniform\",\n  \"Exponential\",\n  \"Chi-Squared\",\n  \"Mystery\"\n]);\n\nexport const distributionType = PropTypes.oneOf([\"Z\",\"T\"]);\n\nexport const dataObjectArrayType = PropTypes.arrayOf(\n  PropTypes.shape({\n    x: PropTypes.number.isRequired,\n    y: PropTypes.number.isRequired,\n    id: PropTypes.number\n  })\n);\n\nexport const highchartsSeriesType = PropTypes.arrayOf(\n  PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    data: dataObjectArrayType.isRequired,\n    type: PropTypes.string,\n    color: PropTypes.string,\n    enableMouseTracking: PropTypes.bool,\n    showInLegend: PropTypes.bool,\n    visible: PropTypes.bool,\n    label: PropTypes.object\n  })\n);\n\nexport const confidenceIntervalsSampleType = PropTypes.shape({\n  data: dataObjectArrayType.isRequired,\n  size: PropTypes.number.isRequired,\n  mean: PropTypes.number.isRequired,\n  lowerConf: PropTypes.number.isRequired,\n  upperConf: PropTypes.number.isRequired,\n  confidenceLevel: PropTypes.number.isRequired,\n  distribution: distributionType.isRequired,\n  label: PropTypes.bool.isRequired,\n  id: PropTypes.number.isRequired\n});\n\nexport const stringOrNumberType = PropTypes.oneOfType([PropTypes.string, PropTypes.number]);\n","import React, { useState, useEffect } from \"react\";\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official'\nimport Label from 'highcharts/modules/series-label';\nimport PropTypes from 'prop-types';\nimport { highchartsSeriesType } from \"../lib/types\";\n\nLabel(Highcharts);\n\n\nexport default function DotPlot({ series, title, xMin, xMax, yMax, xLabel }) {\n  const [chart, setChart] = useState({});\n\n  useEffect(() => {\n    const newChart = {\n      chart: {\n        type: 'scatter',\n      },\n      plotOptions: {\n        series: {\n          animation: {\n            duration: 100,\n            easing: 'easeOutBounce'\n          },\n        }\n      },\n      legend: {\n        symbolHeight: 12,\n        symbolWidth: 12,\n        symbolRadius: 6\n      },\n      xAxis: {\n        min: xMin,\n        max: xMax,\n        title : {\n          enabled: true,\n          text: xLabel\n        },\n        startOnTick: true,\n        endOnTick: true\n      },\n      title: {\n        text: title\n      },\n      yAxis: {\n        max: yMax,\n        startOnTick: true,\n        endOnTick: true,\n        title: {\n          text: \"Count\"\n        }\n      },\n      series: series.map((seriesObject) => (\n        {\n          showInLegend: seriesObject.data.length > 0,\n          turboThreshold: 0,\n          ...seriesObject,\n          data: seriesObject.data.map(({ x, y }) => ({ x, y })),  // don't want any other attributes\n          tooltip: {\n            pointFormat: `${xLabel}: <b>{point.x}</b><br />`\n          }\n        })\n      )\n    }\n    setChart(newChart);\n  }, [series, title, xMin, xMax, yMax, xLabel]);\n\n  return <HighchartsReact highcharts={Highcharts} options={chart}/>\n}\n\nDotPlot.propTypes = {\n  series: highchartsSeriesType.isRequired,\n  title: PropTypes.string,\n  xMin: PropTypes.number,\n  xMax: PropTypes.number,\n  yMax: PropTypes.number,\n  xLabel: PropTypes.string,\n  yLabel: PropTypes.string,\n}\n","import React from \"react\";\nimport { Table } from \"reactstrap\";\nimport PropTypes from \"prop-types\";\nimport { dataObjectArrayType } from \"../lib/types\";\nimport { VALUES } from \"../lib/constants.js\";\n\nexport default function PopTable({ popArray, sampleIDs, popShape }) {\n  const rows = popArray.map(({ x, id }) => {\n    return (\n      <tr key={id} style={{ backgroundColor: sampleIDs.includes(id) ? \"#747EF2\" : undefined }}>\n        <td>{popArray.length - id}</td>\n        <td>{x}</td>\n      </tr>\n    )}\n  );\n\n  return (\n    <Table striped className=\"PopTable\">\n      <thead>\n        <tr>\n          <th>{VALUES[popShape].xLabel}</th>\n          <th>{VALUES[popShape].yLabel}</th>\n        </tr>\n      </thead>\n      <tbody>\n        {rows}\n      </tbody>\n    </Table>\n  );\n}\n\nPopTable.propTypes = {\n  popArray: dataObjectArrayType.isRequired,\n  sampleIDs: PropTypes.arrayOf(PropTypes.number).isRequired,\n  popShape: PropTypes.string.isRequired\n}\n","/*\n\n  Displays a table of values and a corresponding HighCharts plot\n\n  Used by Law of Large Numbers and Central Limit Theorem\n\n*/\nimport React from 'react';\nimport '../styles/dark-unica.css';\nimport DotPlot from './DotPlot';\nimport { Alert, Container, Col, Row } from 'reactstrap';\nimport PopTable from './PopTable.js'\nimport _ from \"lodash\";\nimport PropTypes from 'prop-types';\nimport { dataObjectArrayType, popShapeType } from '../lib/types';\nimport { TEXTS, VALUES } from '../lib/constants';\n\nexport default function ChartContainer({ popArray, popMean, sampled, sampleMean, popShape }) {\n  const { xmaxval, xminval, ymaxval, title, xLabel } = VALUES[popShape];\n\n  const series = [\n    {\n      name: 'Population Observations',\n      data: popArray\n    },\n    {\n      name: 'Sampled Observations',\n      data: sampled\n    },\n    {\n      type: 'line',\n      name: 'Sample Mean',\n      data: [{x: sampleMean || 0, y: 0}, {x: sampleMean || 0, y: ymaxval}],\n      color: 'red',\n      enableMouseTracking: false,\n      showInLegend: false,\n      visible: (sampleMean !== undefined) && (sampled.length > 0),\n      label: {\n        format: `<div>Sample Mean: ${sampleMean}</div>`\n      }\n    }\n  ];\n\n  return (\n    <div>\n      <Container fluid style={{marginBottom: \"2vh\"}}>\n        <Row>\n          <Alert color=\"secondary\" className=\"Center\">\n            {(popShape !== \"Uniform\") ? (\n              <p>\n                We queried the {TEXTS[popShape][0]} of {popArray.length} {TEXTS[popShape][1]} and plotted the results on the following chart.\n              </p>\n            ) : (\n              <p>\n                Behavioral economists studying loss aversion design a lottery among 2000 participants where each amount between -10 and +10 is equally likely.  We plotted the winnings and losses below.\n              </p>\n            )}\n          </Alert>\n        </Row>\n        <Row>\n          <Col lg={2} md={12}>\n            <PopTable\n              popArray={popArray}\n              sampleIDs={sampled.map((obj) => obj.id)}\n              popShape={popShape}\n            />\n          </Col>\n          <Col lg={10}>\n            <DotPlot\n              series={series}\n              title={`${title} <br /> Population Mean: ${_.round(popMean, 2)}`}\n              xMin={xminval}\n              xMax={xmaxval}\n              yMax={ymaxval}\n              xLabel={xLabel}\n            />\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  );\n}\n\nChartContainer.propTypes = {\n  popArray: dataObjectArrayType.isRequired,\n  popMean: PropTypes.number.isRequired,\n  sampled: dataObjectArrayType.isRequired,\n  sampleMean: PropTypes.number,\n  popShape: popShapeType.isRequired,\n}\n","/*\n\n  Displays an input and a button for the user to enter a sample size\n\n  Used by Law of Large Numbers and Central Limit Theorem\n\n*/\nimport React, { useState } from 'react';\nimport { Button, Input, InputGroup, InputGroupAddon } from 'reactstrap';\nimport PropTypes from 'prop-types'\n\nexport default function SampleSizeInput({ maxSize, handleClick }) {\n  const [sampleSize, setSampleSize] = useState(\"\");\n\n  return (\n    <InputGroup style={{width: \"50%\", margin: \"auto\"}}>\n      <Input\n        align=\"right\"\n        type=\"number\"\n        placeholder=\"Sample Size:\"\n        min={1}\n        value={sampleSize}\n        max={maxSize}\n        onChange={(event) => setSampleSize(event.target.value)}\n      />\n      <InputGroupAddon addonType=\"append\">\n        <Button disabled={!sampleSize || sampleSize > maxSize || sampleSize < 1} onClick={()=> handleClick(+sampleSize)}>\n          Sample\n        </Button>\n      </InputGroupAddon>\n    </InputGroup>\n  );\n}\n\nSampleSizeInput.propTypes = {\n  maxSize: PropTypes.number.isRequired,\n  handleClick: PropTypes.func.isRequired,\n}\n","import { mean, sqrt, random, round, std } from \"mathjs\";\nimport PD from \"probability-distributions\";\nimport _ from \"lodash\";\n\n// generates a dataset with normal distribution\n// returns an array of {x, y, id}\nexport const generateNormal = (sampleSize, mean, standardDev) => {\n  const population = PD.rnorm(sampleSize, mean, standardDev).map((num) => _.round(num, 1));\n  const counts = _.countBy(population);\n  const popArray = [];\n  _.entries(counts).forEach(([amt, count]) => {\n    for (let i = 1; i <= count; i++) {\n      popArray.push({x: +amt, y: i})\n    }\n  });\n  return _.shuffle(popArray).map((obj, index) => ({...obj, id: index}));\n}\n\n// generates a dataset with uniform distribution\n// returns an array of {x, y, id}\nexport const generateUniform = (sampleSize, low, hi) => {\n  const population = PD.runif(sampleSize, low, hi).map((num) => _.round(num, 1));\n  const counts = _.countBy(population);\n  const popArray = [];\n  _.entries(counts).forEach(([amt, count]) => {\n    for (let i = 1; i <= count; i++) {\n      popArray.push({x: +amt, y: i})\n    }\n  });\n  return _.shuffle(popArray).map((obj, index) => ({...obj, id: index}));\n}\n\n// generates a dataset with exponential distribution\n// returns an array of {x, y, id}\nexport const generateExponential = (sampleSize, lambda) => {\n  const population = PD.rexp(sampleSize, lambda).map((num) => _.round(num, 1));\n  const counts = _.countBy(population);\n  const popArray = [];\n  _.entries(counts).forEach(([amt, count]) => {\n    for (let i = 1; i <= count; i++) {\n      popArray.push({x: +amt, y: i})\n    }\n  });\n  return _.shuffle(popArray).map((obj, index) => ({...obj, id: index}));\n}\n\n// generates a dataset with chi-squared distribution\n// returns an array of {x, y, id}\nexport const generateChiSquared = (sampleSize, degreesOfFreedom) => {\n  const population = PD.rchisq(sampleSize, degreesOfFreedom).map((num) => _.round(num, 1));\n  const counts = _.countBy(population);\n  const popArray = [];\n  _.entries(counts).forEach(([amt, count]) => {\n    for (let i = 1; i <= count; i++) {\n      popArray.push({x: +amt, y: i})\n    }\n  });\n  return _.shuffle(popArray).map((obj, index) => ({...obj, id: index}));\n}\n\n// generates a dataset with 'mystery' distribution\n// returns an array of {x, y, id}\nexport const generateMystery = (sampleSize) => {\n\n  const popArray = [];\n\n  const firstMEAN = 75.5;\n  const firstSTANDARD_DEV = 3;\n  const firstITERATES = 9;\n  const firstrange = sqrt(12) * firstSTANDARD_DEV * firstSTANDARD_DEV;\n  const firstpopMin = firstMEAN - (firstrange / 2);\n  const secondMEAN = 60.5;\n  const secondSTANDARD_DEV = 2;\n  const secondITERATES = 9;\n  const secondrange = sqrt(12) * secondSTANDARD_DEV * secondSTANDARD_DEV;\n  const secondpopMin = secondMEAN - (secondrange / 2);\n\n  const clearedArray = [];\n  const popDict = [];\n  const newCleared = clearedArray;\n  const stateCopy = popDict;\n\n\n  for (let i = 0; i < sampleSize/2; i++){\n    let sum = 0;\n    if(clearedArray.length === 0){\n        for (let j = 0; j < firstITERATES; j++){\n            sum += random() * firstrange + firstpopMin;\n        }\n    }\n    else{\n        sum = newCleared.pop() * firstITERATES;\n    }\n    if (popDict[round(sum / firstITERATES * 10)]){\n        stateCopy[round(sum / firstITERATES * 10)] += 1\n    }\n    else {\n        stateCopy[round(sum / firstITERATES * 10)] = 1\n    }\n    popArray.push(round((sum / firstITERATES)*100)/100)\n  }\n\n  for (let i = 0; i < sampleSize/2; i++){\n      let sum = 0;\n      if(clearedArray.length === 0){\n          for (let j = 0; j < secondITERATES; j++){\n              sum += random() * secondrange + secondpopMin;\n          }\n      }\n      else{\n          sum = newCleared.pop() * secondITERATES;\n      }\n      if (popDict[round(sum / secondITERATES * 10)]){\n          stateCopy[round(sum / secondITERATES * 10)] += 1\n      }\n      else {\n          stateCopy[round(sum / secondITERATES * 10)] = 1\n      }\n      popArray.push(round((sum / secondITERATES)*100)/100)\n  }\n\n  const finalPopArray = [];\n\n  let count = Array(sampleSize).fill(-1);\n  for (let i = 0; i < sampleSize; i++){\n\n      let val = popArray[i];\n\n      if (count[round(val * 10)] !== -1){\n          count[round(val * 10)] += 1;\n      }\n      else {\n          count[round(val * 10)] = 1;\n      }\n\n      finalPopArray.push({x: +(round(val * 10)/10), y: count[round(val * 10)]})\n  }\n\n  return _.shuffle(finalPopArray).map((obj, index) => ({...obj, id: index}));\n}\n\n\n// returns the data set from the function corresponding with distType\n// objects in array are of shape {x, y, id}\nexport const dataFromDistribution = (\n    distType,\n    sampleSize,\n    {\n      mean=64,\n      standardDev=3,\n      low=-10,\n      hi=10,\n      lambda=1/64,\n      degreesOfFreedom=8\n    } = {}\n  ) => {\n\n  const getDistributionFunction = {\n    \"Normal\": () => generateNormal(sampleSize, mean, standardDev),\n    \"Uniform\": () => generateUniform(sampleSize, low, hi),\n    \"Exponential\": () => generateExponential(sampleSize, lambda),\n    \"Chi-Squared\": () => generateChiSquared(sampleSize, degreesOfFreedom),\n    \"Mystery\": () => generateMystery(sampleSize)\n  }\n\n  return getDistributionFunction[distType]();\n}\n\n// returns the mean of popArray\nexport const populationMean = (popArray) => {\n  return (popArray.length > 0) ? mean(popArray.map(p => p.x)) : undefined;\n}\n\n// returns the std of popArray\nexport const populationStandardDev = (popArray) => {\n  return (popArray.length > 0) ? std(popArray.map(p => p.x)) : undefined;\n}\n","import React, { useEffect, useState } from 'react';\nimport Highcharts from \"highcharts\";\nimport HighchartsReact from 'highcharts-react-official';\nimport { Collapse, Card, CardBody } from 'reactstrap';\nimport '../../styles/dark-unica.css';\nimport _ from \"lodash\";\nimport PropTypes from 'prop-types';\nimport { dataObjectArrayType, popShapeType } from '../../lib/types.js';\nimport { populationMean } from '../../lib/stats-utils';\n\nexport default function SimulateSamples({ type, popArray, popMean }) {\n  const [sampled, setSampled] = useState([]);\n  const [meanLine, setMeanLine] = useState([]);\n  const [chart, setChart] = useState({});\n\n  useEffect(() => {\n    const newChart = {\n      chart: {\n        type: 'line',\n        animation: false\n      },\n      plotOptions: {\n        series: {\n          animation: {\n            duration: 0\n          },\n          states: {\n            hover: {\n              enabled: false\n            },\n            select: {\n              enabled: false\n            },\n            normal: {\n              animation: false\n            },\n            inactive: {\n              enabled: false\n            }\n          }\n        }\n      },\n      title: {\n        text: `Population vs Sample Means <br /> (${type})`,\n      },\n      xAxis: {\n        title : {\n          text: 'Sample Size'\n        },\n        min: 0,\n        max: 1000\n      },\n      yAxis: {\n        title: {\n          text: 'Mean'\n        }\n      },\n      tooltip: {\n        enabled: true\n      },\n      series: [\n        {\n          name: 'Population Mean',\n          data: meanLine,\n          label: {\n            enabled: false\n          },\n          color: \"red\"\n        },\n        {\n          name: 'Sampled Means',\n          data: sampled,\n          label: {\n            enabled: false\n          },\n          color: \"black\"\n        }\n      ]\n    }\n\n    setChart(newChart);\n  }, [sampled, meanLine, type, popArray, popMean]);\n\n  useEffect(() => {\n    setSampled([]);\n    setMeanLine([]);\n    let n = 0;\n    const timer = setInterval(function run() {\n      n += 1;\n      if (n >= 1000) {\n        clearInterval(timer)\n      }\n      const sample = _.sampleSize(popArray, n);\n      const avg = _.round(populationMean(sample), 2);\n      setSampled(sampled => [...sampled, {y: avg}]);\n      setMeanLine(meanLine => [...meanLine, {y: popMean}]);\n    }, n);\n\n    return () => clearInterval(timer);\n  }, []);  // eslint-disable-line\n\n  return (\n    <Collapse isOpen>\n      <Card outline style={{ backgroundColor: 'rgba(255, 255, 255, 0)' }}>\n        <CardBody style={{ backgroundColor: 'rgba(255, 255, 255, 0)' }}>\n          <HighchartsReact highcharts={Highcharts} options={chart}/>\n        </CardBody>\n      </Card>\n    </Collapse>\n  );\n}\n\nSimulateSamples.propTypes = {\n  type: popShapeType.isRequired,\n  popArray: dataObjectArrayType.isRequired,\n  popMean: PropTypes.number.isRequired,\n}\n","/*\n\n  Displays one of the LLN simulations\n\n*/\nimport React, { useEffect, useState } from 'react';\nimport Collapsable from '../Collapsable.js';\nimport ChartContainer from '../ChartContainer.js';\nimport SampleSizeInput from '../SampleSizeInput.js';\nimport SimulateSamples from './SimulateSamples.js';\nimport { Alert } from 'reactstrap';\nimport { populationMean, dataFromDistribution } from \"../../lib/stats-utils.js\";\nimport _ from \"lodash\";\nimport PropTypes from 'prop-types';\nimport { popShapeType } from '../../lib/types.js';\n\nexport default function LLNSimulation({ popShape, sampleSize }) {\n  const [sampled, setSampled] = useState([]);\n  const [stage, setStage] = useState(1);\n  const [sampleMean, setSampleMean] = useState();\n  const [popArray, setPopArray] = useState([]);\n  const [popMean, setPopMean] = useState(0);\n\n  useEffect(() => {\n    setStage(1);\n    setPopArray([]);\n    setSampled([]);\n    setSampleMean();\n  }, [popShape]);\n\n  // Highcharts rendering is buggy - this second useEffect takes a second but allows the data to be reset completely before being generated again\n  useEffect(() => {\n    if (popArray.length === 0) {\n      const newPop = dataFromDistribution(popShape, sampleSize);\n      setPopArray(newPop);\n      const newMean = populationMean(newPop);\n      setPopMean(newMean);\n    }\n  }, [popArray, popShape, sampleSize]);\n\n  const handleClick = (size) => {\n    const sample = _.sampleSize(popArray, size);\n    setSampled(sample);\n    setSampleMean(_.round(populationMean(sample), 2));\n    setStage(2);\n  }\n\n  return (\n    <Collapsable>\n      <div>\n        <ChartContainer popArray={popArray} popMean={popMean} sampled={sampled} sampleMean={sampleMean} popShape={popShape}/>\n        <p>Try a few different sample sizes and compare sample mean to population mean</p>\n        <SampleSizeInput maxSize={popArray.length} handleClick={handleClick}/>\n        {(stage >= 2) &&\n          <div>\n            <Alert color=\"success\" style={{ padding: 0, marginTop: '1em' }}>\n              Sample Mean: {_.round(sampleMean, 2) || ''}\n              <br/>\n              Difference of Means: {_.round(popMean - sampleMean, 2)}\n            </Alert>\n            <Alert color=\"info\">\n              According to the law, the average of the results obtained from a large enough sample should be close to the total average of the population, and will tend to become closer the larger the sample is. Make sure to pick several samples, or see below for a simulation to see the law in action.\n            </Alert>\n            <SimulateSamples type={popShape} popArray={popArray} popMean={_.round(popMean, 2)}/>\n          </div>\n        }\n      </div>\n    </Collapsable>\n  );\n}\n\nLLNSimulation.propTypes =  {\n  popShape: popShapeType.isRequired,\n  sampleSize: PropTypes.number.isRequired,\n}\n","/*\n\n  Displays the description for the LLN simulation, a menu bar to choose the different variations, and the simulation component itself\n\n*/\nimport React, { useState } from 'react';\nimport PopBar from '../PopBar.js';\nimport { Alert } from 'reactstrap';\nimport LLNSimulation from './LLNSimulation.js';\nimport { SAMPLE_SIZE } from '../../lib/constants.js';\n\nexport default function LawOfLargeNumbers() {\n  const [popShape, setPopType] = useState(\"\");\n\n  return (\n    <div className=\"MainContainer\">\n      <Alert className=\"simDescription\" color=\"primary\">Law Of Large Numbers</Alert>\n      <Alert className=\"simDescription\" color=\"primary\">\n        The Law of Large Numbers (LLN) is a statement about the relationship between a population and a random sample drawn from that population. Let 𝜇 denote the true mean of a variable when calculated using the entire population, let 𝜎 denote the true standard deviation of that variable when calculated using the entire population, let 𝑥̅ denote the mean calculated from a sample drawn from that population, and let 𝑠 denote the standard deviation calculated from that sample. We would like to use information from the sample to make conclusions about the population. The LLN is helpful in this endeavor, because it states that as the sample size gets larger, the sample mean approaches the true population mean. This simulation’s goal is to demonstrate this handy property.\n      </Alert>\n      <PopBar sim=\"LLN\" setPop={setPopType}/>\n      {popShape && <LLNSimulation popShape={popShape} sampleSize={SAMPLE_SIZE}/>}\n    </div>\n  );\n}\n","import React, {Component} from 'react';\nimport Highcharts from 'highcharts';\nimport PropTypes from 'prop-types';\n\n\nclass SampleMeanChart extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            chart: undefined,\n            sampleMeans:[],\n            popMeans:{\n              \"Normal\" : 64,\n              \"Uniform\" : 64,\n              \"Exponential\" : 64,\n              \"Chi-Squared\" : 8,\n              \"Mystery\" : 62.5\n            },\n            values: {\n              Normal: { xmaxval: 74, xminval: 56, ymaxval: 40, title: \"Milk Production\", xLabel: \"Gallons\" },\n              Uniform: { xmaxval: 10, xminval: -10, ymaxval: 25, title: \"Lottery Outcome\", xLabel: \"Dollars\"},\n              Exponential: { xmaxval: 400, xminval: 0, ymaxval: 10, title: \"Duration of Telemarketer Call\", xLabel: \"Duration (seconds)\"},\n              \"Chi-Squared\": {xmaxval: 25, xminval: 0, ymaxval: 40, title: \"Money Spent on Lunch\", xLabel: \"Dollars\"},\n              Mystery: { xmaxval: 80, xminval: 50, ymaxval: 40, title: \"Alien Female Height\", xLabel: \"Height (in)\"}\n          },\n            sd : undefined,\n            curve: false\n        }\n    }\n    render(){\n        this.state.chart && this.show();\n        return(\n          <div>\n              {\n                  <div id=\"sim-container\" className=\"Center\" />\n              }\n            {/* <button style={{marginTop:\"20px\",marginLeft:\"110px\"}} onClick={() => {\n              this.setState({curve : !this.state.curve})}}>Plot Normal Curve</button> */}\n          </div>\n        );\n    }\n    componentDidMount(){\n        this.show();\n    }\n    show(){\n        //console.log(this.props.sampleMeans);\n        const sampleMeanSeries = {name: \"Sample Means\", data : []};\n        let yMax = 30;\n        let xAxisMeasurement =[];\n        let yAxisMeasurement =[];\n        // const popMean = Math.round(this.props.mean *4)/4;\n        for (const i in this.props.sampleMeans){\n            const val = !this.props.normalized ?\n              Math.round(this.props.sampleMeans[i][1] * 100) / 100\n              : Math.round(((this.props.sampleMeans[i][1] - this.props.mean) / (this.props.sd/Math.sqrt(this.props.sampleSize)) )*100)/100;\n            let count = 1;\n            for (const j of sampleMeanSeries.data){\n                if (Math.round(j[0] * 100) / 100 === val){\n                    count += 1;\n                }\n            }\n            yMax = Math.max(count, yMax);\n            sampleMeanSeries.data[i] = [val, count];\n            xAxisMeasurement.push(val);\n            yAxisMeasurement.push(count);\n            // console.log(sampleMeanSeries.data);\n        }\n\n        let xMin;\n        let xMax;\n        let xLabel;\n        if(!this.props.normalized){\n          xMin = this.state.values[this.props.type].xminval;\n          xMax = this.state.values[this.props.type].xmaxval;\n          xLabel = this.state.values[this.props.type].xLabel;\n        }\n        else{\n          xMin = Math.min.apply(Math, xAxisMeasurement);\n          xMax = Math.max.apply(Math, xAxisMeasurement);\n          yMax = Math.max.apply(Math, yAxisMeasurement);\n          xLabel = \"Standard Deviations\";\n        }\n\n        let sampleMax=0;\n        let sampleMin=1000000000;\n        let sampleMaxX = 0;\n        for(let i=0;i<sampleMeanSeries.data.length;i++){\n          if(sampleMeanSeries.data[i][1] > sampleMax){\n            sampleMax = sampleMeanSeries.data[i][1];\n          }\n          if(sampleMeanSeries.data[i][0] < sampleMin){\n            sampleMin = sampleMeanSeries.data[i][0];\n          }\n          if(sampleMeanSeries.data[i][0] > sampleMaxX){\n            sampleMaxX = sampleMeanSeries.data[i][0];\n          }\n        }\n        // console.log(sampleMax);\n        // console.log(sampleMin);\n        // console.log(sampleMaxX);\n\n        //const lowerBound = sampleMin - 2, upperBound = sampleMaxX + 2;\n\n        //const normalY = (x, mean, stdDev) => Math.exp((-0.5) * Math.pow((x - mean) / stdDev, 2)) * (sampleMax+3);\n\n        //const getMean = (lowerBound, upperBound) => (upperBound + lowerBound) / 2;\n\n        // distance between mean and each bound of a 95% confidence interval\n        // is 2 stdDeviation, so distance between the bounds is 4\n        //const getStdDeviation = (lowerBound, upperBound) => (upperBound - lowerBound) / 4;\n\n        // const generatePoints = (lowerBound, upperBound) => {\n        //   const stdDev = getStdDeviation(lowerBound, upperBound);\n        //   const min = lowerBound - 2 * stdDev;\n        //   const max = upperBound + 2 * stdDev;\n        //   const unit = (max - min) / 40;\n        //   const list = [];\n        //   for(let i=min;i<max;i+=unit){\n        //     list.push(i);\n        //   }\n        //   //return _.range(min, max, unit);\n        //   return list;\n        // }\n\n\n\n\n\n        //const seriesData = points.map(x => ({ x, y: normalY(x, mean, stdDev)}));\n        //const bellSeries = {data : seriesData, color: 'black', name:\"Normal Curve\", plotOptions: {series: {marker: {symbol: \"diamond\"}}}};\n\n        /* Try making normal curve other way  */\n\n        // console.log(this.props.resampleSize[this.props.type])\n        // const normDist = new NormalDistribution(64,3/Math.sqrt(this.props.resampleSize[this.props.type]));\n        // let normalPoints = [];\n        // let nPoint;\n        // let sd = 3/Math.sqrt(10);\n        // let meanN = 64;\n        // for(let i=60;i<=70;i+=.1){\n        //   //nPoint = (1/(Math.sqrt(2*Math.PI*Math.pow(sd,2))))*(Math.pow(Math.E,-(Math.pow(i - meanN,2)/(2*Math.pow(sd,2)))));\n        //   nPoint = normDist.probabilityBetween(i,i+.1);\n        //   normalPoints.push([i,nPoint * this.props.numberResamples[this.props.type]]);\n        // }\n\n        // console.log(normDist.probabilityBetween(61.5,67));\n\n        // console.log(normalPoints);\n        // bellSeries.data = normalPoints;\n\n        // console.log(seriesData);\n\n\n        if (!this.state.chart) {\n            this.setState({chart: Highcharts.chart('sim-container', {\n                            chart: {\n                                type: 'scatter',\n                                animation: false\n                            },\n\n                            title: {\n                                text: 'Sample Mean Distribution'\n                            },\n                            xAxis: {\n                                min: xMin,\n                                max: xMax,\n                                title : {\n                                    enabled: true,\n                                    text: xLabel\n                                },\n                                startOnTick: true,\n                                endOnTick: true,\n                                showLastLabel: true\n                            },\n                            yAxis: {\n                                max: yMax,\n                                title: {\n                                    text: 'Observations of Sample Mean'\n                                }\n                            },\n                            tooltip: {\n                              enabled: true,\n                              pointFormat: `${xLabel}: <b>{point.x}<b><br />`\n                            },\n                            series: [sampleMeanSeries]\n\n                            })});\n                          }\n        else {\n            // console.log(\"running\");\n\n\n            // if(this.state.curve === true && this.state.chart.series.length < 2){\n            //   this.state.chart.addSeries({bellSeries});\n            // }\n            // if(this.state.curve == false && this.state.chart.series.length === 2){\n            //   this.state.chart.series[1].remove();\n            // }\n            // this.state.chart.update({series:[sampleMeanSeries,bellSeries], yAxis: {max: yMax}, xAxis : {title: {text:xLabel},max: xMax, min: xMin}});\n            this.state.chart.update({series:[sampleMeanSeries], yAxis: {max: yMax}, xAxis : {title: {text:xLabel},max: xMax, min: xMin}});\n        }\n\n        // console.log(sampleMeanSeries);\n    }\n}\nexport default SampleMeanChart;\n\nSampleMeanChart.propTypes = {\n\n  sampleMeans : PropTypes.array,\n  popMeans : PropTypes.object,\n  values: PropTypes.object,\n  sd : PropTypes.number,\n  curve : PropTypes.bool,\n}\n","/*\n\n  Displays inputs to allow the user to run a large number of resamples\n\n*/\nimport React, { useState } from \"react\";\nimport {Button, Input } from 'reactstrap';\nimport _ from \"lodash\";\nimport PropTypes from 'prop-types';\nimport { dataObjectArrayType } from \"../../lib/types.js\";\nimport { populationMean } from \"../../lib/stats-utils.js\";\n\nexport default function SampleMeansSimulator({ setSampleSize, population, addSamples }) {\n  const [numberResamples, setNumberResamples] = useState(0);\n  const [resampleSize, setResampleSize] = useState(0);\n\n  const changeSampleSize = (value) => {\n    setSampleSize(value);\n    setResampleSize(value);\n  }\n\n  const resample = () => {\n    const samplePop = _.sampleSize(population, resampleSize);\n    const sampleMean = populationMean(samplePop);\n    return {x: +resampleSize, y: sampleMean};\n  }\n\n  const runSim = () => {\n    const newSamples = [];\n    for (let i = 0; i < numberResamples; i++) {\n      newSamples.push(resample())\n    }\n    addSamples(newSamples);\n  }\n\n  return (\n    <div>\n      <span> Sample Size: </span>\n      <Input\n        style={{width: \"40%\", margin: \"auto\"}}\n        min={1}\n        type=\"number\"\n        placeholder=\"Sample Size:\"\n        onChange={(event) => changeSampleSize(event.target.value)}\n        value={resampleSize}\n      />\n      <br/>\n      <span> Number of Replications: </span>\n      <Input\n        style={{width: \"40%\", margin: \"auto\"}}\n        min={1}\n        type=\"number\"\n        placeholder=\"Number of Replications:\"\n        onChange={(event) => setNumberResamples(event.target.value)}\n        value={numberResamples}\n      />\n      <br/>\n      <Button onClick={() => runSim()} disabled={(resampleSize < 1) || (resampleSize > population.length) || (numberResamples < 1)}>\n        Run\n      </Button>\n      <Button onClick={() => addSamples()}>Clear</Button>\n    </div>\n  );\n}\n\nSampleMeansSimulator.propTypes = {\n  setSampleSize: PropTypes.func.isRequired,\n  population: dataObjectArrayType.isRequired,\n  addSamples: PropTypes.func.isRequired,\n}\n","/*\n\n  Displays a table of sample means\n\n*/\n\nimport React from 'react';\nimport { Table } from 'reactstrap';\nimport { dataObjectArrayType } from '../../lib/types.js';\nimport _ from 'lodash';\n\nexport default function SampleMeansTable({ sampleMeans }) {\n  const tableBody = sampleMeans.map(({x: size, y: mean}, index) =>\n    <tr key={index}>\n      <td>{index + 1}</td>\n      <td>{size}</td>\n      <td>{_.round(mean, 2)}</td>\n    </tr>\n  );\n\n  return (\n    <Table hover className=\"PopTable\">\n      <thead>\n        <tr>\n          <th>Sample</th>\n          <th>Size</th>\n          <th>Mean</th>\n        </tr>\n      </thead>\n      <tbody>\n        {sampleMeans && tableBody}\n      </tbody>\n  </Table>\n  );\n}\n\nSampleMeansTable.propTypes = {\n  sampleMeans: dataObjectArrayType.isRequired,\n}\n","/*\n\n  Displays one of the CLT simulations\n\n*/\nimport React, { useState, useEffect } from \"react\";\nimport Collapsable from \"../Collapsable.js\";\nimport ChartContainer from \"../ChartContainer.js\";\nimport SampleMeanChart from \"./SampleMeanChart.js\"\nimport SampleMeansSimulator from \"./SampleMeansSimulator.js\"\nimport { std } from \"mathjs\";\nimport { Alert, Button, Col, Row } from \"reactstrap\";\nimport { populationMean, dataFromDistribution } from \"../../lib/stats-utils.js\";\nimport SampleSizeInput from \"../SampleSizeInput.js\";\nimport SampleMeansTable from \"./SampleMeansTable.js\";\nimport _ from \"lodash\";\nimport PropTypes from \"prop-types\";\nimport { popShapeType } from \"../../lib/types.js\";\n\nexport default function CLTSimulation({ popShape, mainSampleSize }) {\n  const [sampleMeans, setSampleMeans] = useState([]);\n  const [sampled, setSampled] = useState([]);\n  const [sampleSize, setSampleSize] = useState(mainSampleSize);\n  const [standardNormal, setStandardNormal] = useState(false);\n  const [stage, setStage] = useState(1);\n  const [popArray, setPopArray] = useState([]);\n  const [popMean, setPopMean] = useState(0);\n\n  useEffect(() => {\n    setStage(1);\n    setPopArray([]);\n    setSampled([]);\n    setSampleMeans([]);\n  }, [popShape]);\n\n  // Highcharts rendering is buggy - this second useEffect takes a second but allows the data to be reset completely before being generated again\n  useEffect(() => {\n    if (popArray.length === 0) {\n      const newPop = dataFromDistribution(popShape, mainSampleSize);\n      setPopArray(newPop);\n      const newMean = populationMean(newPop);\n      setPopMean(newMean);\n    }\n  }, [popArray, popShape, mainSampleSize]);\n\n  const addSampleMeans = (means) => {\n    if (!means) {  // calling addSampleMeans with no arguments clears the data\n      setSampleMeans([])\n    } else {\n      const newSampleMeans = [...sampleMeans, ...means];\n      setSampleMeans(newSampleMeans);\n    }\n  }\n\n  const handleClick = (size) => {\n    const sample = _.sampleSize(popArray, size);\n    setSampled(sample);\n    const newMeans = [...sampleMeans, {x: size, y: populationMean(sample)}];\n    setSampleMeans(newMeans);\n  }\n\n  const xvalue = sampled.length === 0 ? [0] : sampled.map((s) => s.x);  // provide a placeholder value until \"sampled\" is updated\n\n  return (\n    <Collapsable>\n      <div>\n        <ChartContainer popArray={popArray} popMean={popMean} sampled={sampled} popShape={popShape}/>\n        <Button color=\"success\" onClick={() => setStage(2)}>Continue</Button>\n        {(stage >= 2) &&\n          <div>\n            <Row className=\"Center\">\n              <div style={{padding: \"30px\"}}>\n                <p>Try drawing some samples and calculating means</p>\n                <SampleSizeInput maxSize={popArray.length} handleClick={handleClick}/>\n              </div>\n            </Row>\n            <Row>\n              <Col lg=\"8\">\n                <Button\n                  outline\n                  color=\"primary\"\n                  active={standardNormal}\n                  onClick={() => setStandardNormal(!standardNormal)}>\n                    Convert to Std. Normal\n                </Button>\n                <SampleMeanChart  // TODO: update this\n                  mean={popMean}\n                  sd={std(xvalue)}\n                  normalized={standardNormal}\n                  sampleSize={sampleSize}\n                  type={popShape}\n                  normal={standardNormal}\n                  sampleMeans={sampleMeans.map(({x, y}) => [x, y])}\n                />\n              </Col>\n              <Col lg=\"4\">\n                <SampleMeansTable sampleMeans={sampleMeans}/>\n              </Col>\n            </Row>\n            <Row style={{width: \"60%\", margin:\"auto\"}}>\n              <div className=\"Center\">\n                <Alert color=\"primary\" style={{width: \"50%\", margin: \"auto\"}}>\n                  Simulate drawing many many samples\n                </Alert>\n                <br/>\n                <SampleMeansSimulator\n                  setSampleSize={setSampleSize}\n                  population={popArray}\n                  addSamples={addSampleMeans}\n                />\n              </div>\n            </Row>\n          </div>\n        }\n\n      </div>\n    </Collapsable>\n  );\n}\n\nCLTSimulation.propTypes = {\n  popShape: popShapeType.isRequired,\n  mainSampleSize: PropTypes.number.isRequired,\n}\n","/*\n\n  Displays the description for the CLT simulation, a menu bar to choose the different variations, and the simulation component itself\n\n*/\nimport React, { useState } from 'react';\nimport PopBar from '../PopBar.js';\nimport { Alert } from 'reactstrap';\nimport CLTSimulation from \"./CLTSimulation.js\";\n\nconst SAMPLE_SIZE = 2000;\n\nexport default function CentralLimitTheorem() {\n  const [popShape, setPopType] = useState(\"\");\n\n  return (\n    <div className=\"MainContainer\">\n      <Alert className=\"simDescription\" color=\"primary\">Central Limit Theorem</Alert>\n      <Alert className=\"simDescription\" color=\"primary\">\n        This simulation demonstrates the shape of the sampling distribution of the sample mean. Suppose I draw a large number of samples, each of size 𝑛, from some population. For each sample, I calculate a sample mean 𝑥̅. I now plot a histogram of those sample means. For a sufficiently large sample size, the shape of that histogram will look like a beautiful bell-shaped curve, no matter what shape the underlying population had.\n      </Alert>\n      <PopBar sim=\"CLT\" setPop={setPopType}/>\n      {popShape && <CLTSimulation popShape={popShape} mainSampleSize={SAMPLE_SIZE}/>}\n    </div>\n  );\n}\n","/*\n\n  Displays sliders for the user to adjust the mean and standard deviation\n\n*/\nimport React from 'react';\nimport { Input, InputGroup, InputGroupAddon, InputGroupText } from 'reactstrap';\nimport PropTypes from 'prop-types';\nimport { stringOrNumberType } from '../../lib/types.js';\n\nexport default function MeanSDInput({ title, mean, setMean, sd, setSD }){\n  return (\n    <div>\n      <p> Choose the Mean and Standard Deviation for {title} Height </p>\n      <InputGroup>\n        <InputGroupAddon addonType='prepend'>\n          <InputGroupText>{title} Height Mean:</InputGroupText>\n        </InputGroupAddon>\n        <Input type=\"number\" min={60} max={80} step={1} value={mean} onChange={(event) => setMean(event.target.value)}/>\n      </InputGroup>\n      <br/>\n      <InputGroup>\n        <InputGroupAddon addonType='prepend'>\n          <InputGroupText>{title} Height SD:</InputGroupText>\n        </InputGroupAddon>\n        <Input type=\"number\" min={1} max={7} value={sd} onChange={(event) => setSD(event.target.value)}/>\n      </InputGroup>\n    </div>\n  );\n}\n\nMeanSDInput.propTypes = {\n  title: PropTypes.string.isRequired,\n  mean: stringOrNumberType.isRequired,\n  setMean: PropTypes.func.isRequired,\n  sd: stringOrNumberType.isRequired,\n  setSD: PropTypes.func.isRequired,\n}\n","/*\n\n  Displays a Nivo scatterplot for the joint distribution data\n\n*/\nimport React from 'react';\nimport { ResponsiveScatterPlot } from \"@nivo/scatterplot\";\nimport { Col } from 'reactstrap';\nimport PropTypes from 'prop-types';\nimport { dataObjectArrayType } from '../../lib/types.js';\n\nexport default function JointChart({ jointData, sharedOptions, nodeId }) {\n\n  return (\n    <Col style={{ padding:\"5px 0px 5px 0px\", marginLeft:\"-50px\", marginRight:\"0px\", width: \"fit-content\"}}>\n    <div style={{ height: 368, width: 366, position:\"inline-block\", float:\"right\", marginLeft:\"0px\",}}>\n      <ResponsiveScatterPlot\n        {...sharedOptions}\n        colors={(node) => (nodeId && (node.id === nodeId)) ? \"#0053a1\" : \"#00b3ff\"}\n        data={[{id: \"data\", data: jointData}]}\n        yScale={{ type: 'linear', min: 40, max: 100 }}\n        yFormat={(e) => e + \" in.\"}\n        tooltip={({node}) =>\n          <div>\n            Parent Height: <strong>{node.data.formattedX}</strong>\n            <br/>\n            Child Height: <strong>{node.data.formattedY}</strong>\n          </div>\n        }\n        axisBottom={{\n          tickSize: 10,\n          legendPosition: 'middle',\n          legendOffset: 46,\n          legend: 'Parent Height (inches)'\n        }}\n        axisLeft={{\n          tickSize: 10,\n          legendPosition: 'middle',\n          legendOffset: -38,\n          legend: 'Child Height (inches)'\n        }}\n      />\n    </div>\n    </Col>\n  );\n}\n\nJointChart.propTypes = {\n  jointData: dataObjectArrayType.isRequired,\n  sharedOptions: PropTypes.objectOf(PropTypes.any).isRequired,\n  nodeId: PropTypes.string,\n}\n","/*\n\n  A container component to hold the three charts for the Joint Distribution simulation\n  Note that Nivo is used for these plots instead of HighCharts - easier to synchronize\n\n*/\nimport React, { useState, useCallback, useMemo } from \"react\";\nimport { Row, Col } from 'reactstrap';\nimport JointChart from \"./JointChart.js\";\nimport { ResponsiveScatterPlotCanvas } from \"@nivo/scatterplot\";\nimport { dataObjectArrayType } from \"../../lib/types.js\";\n\nexport default function JDCharts({ parentData, childData, jointData }) {\n  // these functions synchronize the plots - all three corresponding data points increase in size on mouse over\n  const [nodeId, setNodeId] = useState();\n  const handleMouseMove = useCallback((node) => setNodeId(node.id), [setNodeId]);\n  const handleMouseLeave = useCallback(() => setNodeId(), [setNodeId]);\n  const getNodeSize = useMemo(() => (node) => (nodeId && (nodeId === node.id)) ? 15 : 5, [nodeId]);\n\n  // options common to all three plots\n  const sharedOptions = {\n    animate: false,\n    margin: { top: 60, right: 10, bottom: 70, left: 70 },\n    xScale: { type: 'linear', min: 40, max: 100 },\n    blendMode: \"darken\",\n    xFormat: (e) => e + \" in.\",\n    nodeSize: getNodeSize,\n    enableGridX: false,\n    enableGridY: false,\n    onMouseMove: handleMouseMove,\n    onMouseLeave: handleMouseLeave,\n    axisBottom: {\n      tickSize: 10,\n      legendPosition: 'middle',\n      legendOffset: 46\n    },\n    axisLeft: {\n      tickSize: 10,\n      legendPosition: 'middle',\n      legendOffset: -30\n    }\n  }\n\n  return (\n    <Row>\n      <Col style={{ padding:\"5px 0px 5px 0px\", marginRight:\"0px\", marginLeft:\"-60px\"}}>\n        <div style={{ height: 368, width: 366, float:\"left\", position:\"inline-block\",}}>\n          <ResponsiveScatterPlotCanvas\n            data={[{id: \"data\", data: parentData}]}\n            tooltip={({node}) => <div><strong>{node.data.formattedX}</strong></div>}\n            colors={(node) => (node.id === nodeId) ? \"#910000\" : \"#ff0000\"}\n            {...sharedOptions}\n            yScale={{ type: 'linear', min: 0, max: 8 }}\n            axisBottom={{...sharedOptions.axisBottom, legend: 'Parent Height (inches)'}}\n            axisLeft={{...sharedOptions.axisLeft, legend: 'Count'}}\n          />\n        </div>\n      </Col>\n      <Col style={{ padding:\"5px 0px 5px 0px\", marginLeft:\"-55px\", marginRight:\"0px\", width: \"fit-content\"}}>\n        <div style={{ height: 368, width: 366, float:\"left\", position:\"inline-block\", marginLeft:\"0px\",}}>\n          <ResponsiveScatterPlotCanvas\n            data={[{id: \"data\", data: childData}]}\n            tooltip={({node}) => <div><strong>{node.data.formattedX}</strong></div>}\n            colors={(node) => (node.id === nodeId) ? \"#006607\" : \"#00ba0c\"}\n            {...sharedOptions}\n            yScale={{ type: 'linear', min: 0, max: 8 }}\n            axisBottom={{...sharedOptions.axisBottom, legend: 'Child Height (inches)'}}\n            axisLeft={{...sharedOptions.axisLeft, legend: 'Count'}}\n          />\n        </div>\n      </Col>\n      <Col>\n        <JointChart\n          jointData={jointData}\n          sharedOptions={sharedOptions}\n          nodeId={nodeId}\n        />\n      </Col>\n    </Row>\n  )\n}\n\nJDCharts.propTypes = {\n  parentData: dataObjectArrayType.isRequired,\n  childData: dataObjectArrayType.isRequired,\n  jointData: dataObjectArrayType.isRequired,\n}\n","import React from \"react\";\nimport { Input, InputGroup, InputGroupAddon } from \"reactstrap\";\nimport PropTypes from 'prop-types';\nimport { stringOrNumberType } from \"../lib/types\";\n\nexport default function InputSlider({ value, min, max, step, onChange }) {\n  return (\n    <InputGroup style={{height: \"30px\", width: \"400px\", margin: \"auto\"}}>\n      <Input\n        type=\"range\"\n        className=\"custom-range\"\n        style={{width: \"60%\"}}\n        value={value}\n        min={min}\n        max={max}\n        step={step}\n        onChange={(event) => onChange(event.target.value)}\n      />\n      <InputGroupAddon addonType=\"append\">\n        <Input\n          type=\"number\"\n          className=\"inputGroupAppend\"\n          value={value}\n          min={min}\n          max={max}\n          step={step}\n          onChange={(event) => onChange(event.target.value)}\n        />\n      </InputGroupAddon>\n    </InputGroup>\n  );\n}\n\nInputSlider.propTypes = {\n  value: stringOrNumberType.isRequired,\n  min: PropTypes.number.isRequired,\n  max: PropTypes.number.isRequired,\n  step: PropTypes.number.isRequired,\n  onChange: PropTypes.func.isRequired,\n}\n","/*\n\n  Displays the Joint Distributions simulation\n\n*/\nimport React, { useEffect, useState } from 'react';\nimport MultivariateNormal from 'multivariate-normal';\nimport { Container, Row, Col, InputGroupText, Button } from 'reactstrap';\nimport MeanSDInput from './MeanSDInput';\nimport JDCharts from './JDCharts';\nimport _ from \"lodash\";\nimport InputSlider from '../InputSlider';\nimport { abs } from 'mathjs';\n\nexport default function JDSimulation() {\n  const [parentMean, setParentMean] = useState(70);\n  const [childMean, setChildMean] = useState(70);\n  const [parentSD, setParentSD] = useState(1);\n  const [childSD, setChildSD] = useState(1);\n  const [correlation, setCorrelation] = useState(0);\n  const [stage, setStage] = useState(1);\n  const [allData, setAllData] = useState({parent: [], child: [], joint: []});\n\n  useEffect(() => {\n    if ((allData.parent.length > 0) && (allData.child.length > 0) && (allData.joint.length > 0)) {\n      setStage(2)\n    }\n  }, [allData]);\n\n  // generate datapoints for parent height and child height in a normal distribution\n  const generate = () => {\n    const newCorrelation = ((abs(+correlation) === 1) ? (0.999999 * correlation) : correlation);\n    const covariance = newCorrelation * parentSD * childSD;\n    const covMatrix = [[parentSD ** 2, covariance], [covariance, childSD ** 2]];\n    const distribution = MultivariateNormal([+parentMean, +childMean], covMatrix);\n\n    const jointSeries = [];\n    for (let i = 0; i < 500; i++) {\n      const [parentHeight, childHeight] = distribution.sample();\n      jointSeries.push({x: _.round(parentHeight, 2), y: _.round(childHeight, 2)});\n    }\n\n    const parentCounts = {};\n    const parentSeries = [];\n    const childCounts = {};\n    const childSeries = [];\n\n    jointSeries.forEach(({x, y}) => {\n      if (parentCounts[x]) {\n        parentCounts[x]++\n      } else {\n        parentCounts[x] = 1\n      }\n      parentSeries.push({x: x, y: parentCounts[x]});\n      if (childCounts[y]) {\n        childCounts[y]++\n      } else {\n        childCounts[y] = 1\n      }\n      childSeries.push({x: y, y: childCounts[y]});\n    });\n\n    const data = {parent: parentSeries, child: childSeries, joint: jointSeries}\n    setAllData(data);\n  }\n\n  return (\n    <Container fluid>\n      <Row>\n        <Col xl={4} md={6} xs={12} style={{padding: 10}}>\n          <MeanSDInput title=\"Parent\" mean={parentMean} setMean={setParentMean} sd={parentSD} setSD={setParentSD}/>\n        </Col>\n        <Col xl={4} md={6} xs={12} style={{padding: 10}}>\n          <MeanSDInput title=\"Child\" mean={childMean} setMean={setChildMean} sd={childSD} setSD={setChildSD}/>\n        </Col>\n        <Col xl={4} md={12} style={{padding: 10}}>\n          <p>Set the Correlation</p>\n          <InputSlider value={correlation} min={-1} max={1} step={0.1} onChange={(value) => setCorrelation(value)}/>\n          <p style={{ margin: \"15px\" }}>Covariance</p>\n          <InputGroupText>{(correlation * parentSD * childSD).toFixed(2)}</InputGroupText>\n        </Col>\n      </Row>\n      <Row className='Center'>\n        <Button\n          outline\n          color='primary'\n          style={{margin:\"3vh\", width: \"fit-content\"}}\n          disabled={!parentMean || !parentSD || !childMean || !childSD}\n          onClick={() => generate()}\n        >\n          Generate!\n        </Button>\n      </Row>\n      {(stage === 2) && <JDCharts parentData={allData.parent} childData={allData.child} jointData={allData.joint}/>}\n    </Container>\n  );\n}\n","/*\n\n  A container component that holds the description and simulation for Joint Distribution\n\n*/\nimport React from 'react';\nimport { Alert } from 'reactstrap';\nimport JDSimulation from './JDSimulation.js';\n\nexport default function JointWrapper() {\n  return(\n    <div className=\"MainContainer\">\n      <Alert style={{ width: \"50%\", margin: 'auto' }} color=\"primary\">\n          Joint Distributions\n      </Alert>\n      <br/>\n      <JDSimulation/>\n    </div>\n  );\n}\n","import React from 'react';\nimport { Input, InputGroup, InputGroupAddon, InputGroupText } from 'reactstrap';\nimport PropTypes from 'prop-types';\n\nexport default function CoefficientInput({ beta, setBeta, delta, setDelta }){\n  return (\n    <div>\n      <InputGroup>\n        <InputGroupAddon addonType='prepend'>\n          <InputGroupText>β₁, the Coefficient on Study Hours:</InputGroupText>\n        </InputGroupAddon>\n        <Input\n          className=\"Center\"\n          type=\"number\"\n          step={.1}\n          value={beta}\n          min={-4}\n          max={4}\n          onChange={(event) => setBeta(event.target.value)}/>\n      </InputGroup>\n      <br/>\n      <InputGroup>\n        <InputGroupAddon addonType='prepend'>\n            <InputGroupText>𝛿, the Coefficient on Sleep Hours:</InputGroupText>\n        </InputGroupAddon>\n        <Input\n          className=\"Center\"\n          type=\"number\"\n          step={.1}\n          value={delta}\n          min={-4}\n          max={4}\n          onChange={(event) => setDelta(event.target.value)}/>\n      </InputGroup>\n    </div>\n  );\n}\n\nCoefficientInput.propTypes = {\n  beta: PropTypes.number.isRequired,\n  setBeta: PropTypes.func.isRequired,\n  delta: PropTypes.number.isRequired,\n  setDelta: PropTypes.func.isRequired,\n}\n","import React, { useEffect, useState } from 'react';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official'\nimport PropTypes from 'prop-types';\nimport { dataObjectArrayType } from '../../lib/types.js';\n\nexport default function OmittedVariableChart({ dataPoints, naiveLine, correctedLine }) {\n  const [myChart, setMyChart] = useState({});\n\n  useEffect(() => {\n    const newChart = {\n      chart: {\n        type: 'scatter',\n        zoomtype: 'xy'\n      },\n      title: {\n        text: 'Study Hours vs. Test Score'\n      },\n      xAxis: {\n        min: 0,\n        max: 10,\n        title : {\n          text: 'Study Hours'\n        }\n      },\n      yAxis: {\n        min: 20,\n        max: 100,\n        title: {\n          text: 'Test Score'\n        }\n      },\n      series: [\n        {\n          type: 'scatter',\n          data: dataPoints,\n          name: \"Test Score\",\n          color: '#33A5FF'\n        },\n        {\n          type: 'line',\n          data: naiveLine,\n          name: \"Naive Regression\",\n          color: '#E30404',\n          label: {\n            enabled: false\n          }\n        },\n        {\n          type: 'line',\n          data: correctedLine,\n          name: \"Corrected Regression\",\n          color: '#2AC208',\n          label: {\n            enabled: false\n          }\n        }\n      ]\n    }\n\n    setMyChart(newChart);\n  }, [dataPoints, naiveLine, correctedLine]);\n\n  return (\n    <HighchartsReact highcharts={Highcharts} options={myChart}/>\n  );\n}\n\nOmittedVariableChart.propTypes = {\n  dataPoints: dataObjectArrayType.isRequired,\n  naiveLine: PropTypes.arrayOf(PropTypes.number),\n  correctedLine: PropTypes.arrayOf(PropTypes.number)\n}\n","import React, { useState, useEffect } from \"react\";\nimport { Row, Col, Button, InputGroup, InputGroupText } from \"reactstrap\";\nimport CoefficientInput from \"./CoefficientInput.js\";\nimport MultivariateNormal from \"multivariate-normal\";\nimport { round, transpose, matrix, multiply, inv } from \"mathjs\";\nimport regression from \"regression\";\nimport OmittedVariableChart from \"./OmittedVariableChart.js\";\nimport PD from \"probability-distributions\";\nimport _ from \"lodash\";\nimport InputSlider from \"../InputSlider.js\";\n\nexport default function OVBSimulation() {\n  const [beta, setBeta] = useState(3);\n  const [delta, setDelta] = useState(3);\n  const [correlation, setCorrelation] = useState(0);\n  const [covariance, setCovariance] = useState(0);\n  const [stage, setStage] = useState(1);\n  const [series, setSeries] = useState([]);\n  const [showCorrect, setShowCorrect] = useState(false);\n  const [allData, setAllData] = useState({points: [], naiveLine: [], correctedLine: []})\n\n  useEffect(() => {\n    if (series.length > 0) {\n      generateData();\n      setShowCorrect(false);\n    }\n  }, [series]);  // eslint-disable-line\n\n  useEffect(() => {\n    if ((allData.points.length > 0) && (allData.naiveLine.length > 0)) {\n      setStage(2);\n    }\n  }, [allData]);\n\n  const stdX = 3;\n  const stdY = 6;\n  const OBS = 1000;\n\n  const generatePoints = (slope, int) => {\n    const points = [];\n\n    for(let i=0;i<11;i++){\n      points[i] = _.round(int + i * slope, 2);\n    }\n\n    return points;\n  }\n\n  const generateSeries = () => {\n    // covariance between dimensions. This examples makes the first and third\n    // dimensions highly correlated, and the second dimension independent.\n    const covarianceMatrix = [\n      [stdX * stdX, covariance],\n      [covariance, stdY * stdY]\n    ];\n\n    // lets you sample from distribution\n    const distribution = MultivariateNormal([5, 2], covarianceMatrix);\n    const seriesArr = []\n\n    // samples 1000\n    for (let i = 0; i < OBS; i++){\n      const [a, b] = distribution.sample()\n      seriesArr.push([_.round(a, 2), _.round(b, 2)]);\n    }\n\n    setSeries(seriesArr);\n  }\n\n  // TODO - simplify this\n  const generateData = () => {\n\n    // generate epsilon\n    const epsilon = PD.rnorm(OBS, 0, 5);\n\n    // matrix data\n    const ones = [];\n    const colOne = [];\n    const colTwo = [];\n\n    // generate test score data\n    const scores = [];\n    for(let i=0;i<OBS;i++){\n      const scorePoint = 40 + beta * series[i][0] + delta * series[i][1] + epsilon[i];\n      scores.push(round(scorePoint*100)/100);\n      ones.push(1);\n      colOne.push(series[i][0]);\n      colTwo.push(series[i][1]);\n    }\n\n    // get series with study hours vs test scores\n    const studyScores = [];\n    for(let i=0;i<OBS;i++){\n      studyScores.push([series[i][0],scores[i]]);\n    }\n\n    // regress study hours with test scores\n    const naiveReg = regression.linear(studyScores);\n    const naiveSlope = (naiveReg.equation[0]);\n    const naiveInt = (naiveReg.equation[1]);\n\n    // Corrected regression\n\n    // using matrices\n    const X = transpose(matrix([ones,colOne, colTwo]));\n    const Y = transpose(matrix([scores]));\n    const inverse = inv(multiply(transpose(X),X));\n    const bHat = multiply(multiply(inverse,transpose(X)),Y);\n\n    setAllData({\n      points: studyScores.map(([x, y]) => ({x, y})),\n      naiveLine: generatePoints(naiveSlope, naiveInt),\n      correctedLine: generatePoints(parseFloat(bHat.get([1,0])),parseFloat(bHat.get([0,0])))\n    });\n  }\n\n  const adjustCorrelation = (value) => {\n    setCorrelation(value);\n    setCovariance(value * stdX * stdY);\n  }\n\n  return (\n    <div>\n      <Row>\n        <p className=\"Center\">Choose Population Parameters:</p>\n      </Row>\n      <br/>\n      <Row lg={2} sm={1}>\n        <Col style={{margin: \"auto\", padding: 10}}>\n          <CoefficientInput beta={beta} setBeta={setBeta} delta={delta} setDelta={setDelta}/>\n        </Col>\n        <Col>\n          <div style={{padding: 10}}>Set the Correlation between Study Hours and Sleep Hours:</div>\n          <InputSlider value={correlation} min={-0.99} max={0.99} step={.01} onChange={(value) => adjustCorrelation(value)}/>\n          <br/>\n          <InputGroup style={{width: \"fit-content\", margin: \"auto\"}}>\n            <InputGroupText className=\"Center\">Covariance between Study Hours and Sleep Hours:</InputGroupText>\n            <InputGroupText className=\"Center\">{covariance.toFixed(2)}</InputGroupText>\n          </InputGroup>\n        </Col>\n      </Row>\n      <br/>\n      <Row>\n        <Col>\n          <p>Estimate Regression Using Test Score and Study Hours Data </p>\n          <Button color=\"primary\" onClick={() => generateSeries()}>Generate!</Button>\n        </Col>\n      </Row>\n      <br/>\n      {(stage >= 2) && (\n        <div>\n          <Row>\n            <Col lg={{size: 12, offset: 0}} xl={{size: 8, offset: 2}}>\n              <OmittedVariableChart\n                dataPoints={allData.points}\n                naiveLine={allData.naiveLine}\n                correctedLine={showCorrect ? allData.correctedLine : []}\n              />\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              <p color=\"primary\">Add Omitted Variable, Density, to Regression</p>\n              <Button outline color=\"primary\" onClick={() => setShowCorrect(true)}>Show Corrected Regression Line</Button>\n            </Col>\n          </Row>\n        </div>\n      )}\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Alert, Row } from \"reactstrap\";\nimport OVBSimulation from \"./OVBSimulation\";\n\nexport default function OmittedVariableBias() {\n  return (\n    <div className=\"MainContainer\">\n      <Alert style={{ width: \"50%\", margin: 'auto' }} color=\"primary\">\n        Omitted Variable Bias\n      </Alert>\n      <br/>\n      <Row>\n        <p className=\"Center\">We are studying the relationship between test score and study hours:</p>\n        <p className=\"Center\">Test Score = β₀ + β₁Study Hoursᵢ + 𝛿Sleep Hoursᵢ + uᵢ</p>\n      </Row>\n      <br/>\n      <OVBSimulation/>\n      <br/>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Row, Col } from \"reactstrap\";\nimport InputSlider from \"../InputSlider.js\";\nimport SelectorButtonGroup from \"../SelectorButtonGroup.js\";\nimport PropTypes from 'prop-types';\nimport { distributionType, stringOrNumberType } from \"../../lib/types.js\";\n\nexport default function ConfidenceInputs({ distType, setDistType, confLevel, setConfLevel }) {\n  return (\n    <div>\n      <Row className=\"Center\">\n        <div>\n          1) Do you want to assume that you know σ? If yes, choose Z. If no, choose T: {\" \"}\n          <SelectorButtonGroup options={[\"Z\", \"T\"]} select={setDistType} selected={distType}/>\n        </div>\n      </Row>\n      <br/>\n      <Row className=\"Center\">\n        <div>\n          2) Confidence Level: {\" \"}\n          <SelectorButtonGroup\n            options={[\"90%\", \"95%\", \"99%\"]}\n            select={(pct) => setConfLevel(pct.slice(0, 2))}\n            selected={confLevel + \"%\"}\n          />\n        </div>\n      </Row>\n      <br/>\n      <Row className=\"Center\">\n        <Col sm=\"12\" md={{ size: 6, offset: 3 }}>\n          <div>\n            More Levels:\n            <InputSlider value={confLevel} min={1} max={99} step={1} onChange={setConfLevel}/>\n          </div>\n        </Col>\n      </Row>\n    </div>\n  );\n}\n\nConfidenceInputs.propTypes = {\n  distType: distributionType.isRequired,\n  setDistType: PropTypes.func.isRequired,\n  confLevel: stringOrNumberType.isRequired,\n  setConfLevel: PropTypes.func.isRequired,\n}\n","import React, { useEffect, useState } from \"react\";\nimport Highcharts from \"highcharts\";\nimport HighchartsReact from \"highcharts-react-official\";\nimport { Alert } from \"reactstrap\";\nimport _ from \"lodash\";\nimport More from \"highcharts/highcharts-more\";\nimport { max } from \"mathjs\";\nimport PropTypes from 'prop-types';\nimport { confidenceIntervalsSampleType, popShapeType } from \"../../lib/types.js\";\nimport { VALUES_ALT } from \"../../lib/constants.js\";\n\nMore(Highcharts);\n\nexport default function ConfidenceIntervalsChart({ confidenceLevel, samples, popShape, popMean, selected, setSelected }) {\n  const [chart, setChart] = useState({});\n\n  useEffect(() => {\n    const { xmaxval, xminval, title, xLabel } = VALUES_ALT[popShape];\n\n    const sampleMeans = [];\n    const containsMean = [];\n    const doesntContainMean = [];\n\n    samples.forEach((sampleObject) => {\n      sampleMeans.push({\n        ...sampleObject,\n        x: sampleObject.id,\n        y: sampleObject.mean\n      });\n      if (sampleObject.label) {\n        containsMean.push({\n          ...sampleObject,\n          low: sampleObject.lowerConf,\n          high: sampleObject.upperConf,\n          x: sampleObject.id\n        })\n      } else {\n        doesntContainMean.push({\n          ...sampleObject,\n          low: sampleObject.lowerConf,\n          high: sampleObject.upperConf,\n          x: sampleObject.id\n        })\n      }\n    });\n\n    const tooltipFormat = {\n      headerFormat: \"\",\n      pointFormat: \"Sample Size: <b>{point.size}</b><br/>Sample Mean: <b>{point.mean}</b><br/>Lower Bound of CI: <b>{point.lowerConf}</b><br/>Upper Bound of CI: <b>{point.upperConf}</b><br/>Confidence Level: <b>{point.confidenceLevel}%</b><br/>Distribution: <b>{point.distribution}</b><br/>\",\n      outside: true,\n      borderColor: \"gray\",\n    }\n\n    const newChart = {\n      chart: {\n        type: 'columnrange',\n        inverted: true,\n        animation: false,\n        zoomType: \"xy\",\n        events: {\n          // hack to allow zoom\n          selection: (event) => {\n            event.target.series.forEach((series) => {\n              series.data.forEach((point) => {\n                point.select(false, false)\n              })\n            })\n          }\n        }\n      },\n      plotOptions: {\n        series: {\n          point: {\n            events: {\n              click() {\n                setSelected(this);\n                this.select(false, false);\n              }\n            }\n          },\n          animation: {\n            duration: 0\n          },\n          cursor: \"pointer\"\n        }\n      },\n      title: {\n        text: title\n      },\n      xAxis: {\n        reversed: false,\n        min: 1,\n        max: max(samples.length, 10),\n        startOnTick: true,\n        title: {\n          text: \"Sample Number\"\n        },\n        tickPixelInterval: 1,\n        tickInterval: 1\n      },\n      yAxis: {\n        min: xminval,\n        max: xmaxval,\n        startOnTick: true,\n        endOnTick: true,\n        title: {\n          text: xLabel\n        }\n      },\n      series: [\n        {\n          name: \"Confidence Interval\",\n          data: containsMean,\n          color: \"rgba(0, 170, 0, 0.5)\",\n          centerInCategory: true,\n          showInLegend: false,\n          tooltip: tooltipFormat,\n          allowPointSelect: true,\n          animation: {\n            duration: 0\n          },\n          states: {\n            hover: {\n              color: \"rgba(0, 170, 0, 1)\"\n            },\n            inactive: {\n              color: \"rgba(0, 170, 0, 0.5)\"\n            },\n            select: {\n              enabled: false,\n              color: \"rgba(0, 170, 0, 0.5)\"\n            }\n          }\n        },\n        {\n          name: \"Confidence Interval\",\n          data: doesntContainMean,\n          color: \"rgba(255, 0, 0, 0.5)\",\n          centerInCategory: true,\n          showInLegend: false,\n          tooltip: tooltipFormat,\n          allowPointSelect: true,\n          animation: {\n            duration: 0\n          },\n          states: {\n            hover: {\n              color: \"rgba(255, 0, 0, 1)\"\n            },\n            inactive: {\n              color: \"rgba(255, 0, 0, 0.5)\"\n            },\n            select: {\n              enabled: false,\n              color: \"rgba(255, 0, 0, 0.5)\"\n            }\n          }\n        },\n        {\n          name: \"Sample Means\",\n          type: \"scatter\",\n          data: sampleMeans,\n          color: \"#616161\",\n          marker: {\n            enabled: true,\n            symbol: \"diamond\",\n            radius: 1\n          },\n          allowPointSelect: true,\n          animation: {\n            duration: 0\n          },\n          states: {\n            hover: {\n              enabled: false\n            },\n            select: {\n              enabled: false,\n            }\n          },\n          tooltip: tooltipFormat,\n        },\n        {\n          type: \"line\",\n          name: \"Population Mean\",\n          data: [[0, popMean], [samples.length, popMean]],\n          color: \"gray\",\n          enableMouseTracking: false,\n          showInLegend: false,\n          label: {\n            enabled: false\n          },\n          marker: {\n            enabled: false\n          },\n          zIndex: -5\n        }\n      ]\n    }\n    setChart(newChart);\n  }, [confidenceLevel, samples, popShape, popMean, setSelected]);\n\n  return (\n    <div>\n      {\n        selected ? (\n          <Alert color={selected.label ? \"success\" : \"danger\"} className=\"Center\">\n            Sample number {selected.id} has a mean of {selected.mean.toFixed(2)}, with {confidenceLevel}% CI ({_.round(selected.lowerConf, 2)}, {_.round(selected.upperConf, 2)}). CI contains the population mean? {selected.label.toString()}\n          </Alert>\n        ) : <div style={{height: 80}}/>\n      }\n      <HighchartsReact highcharts={Highcharts} options={chart}/>\n    </div>\n  );\n}\n\nConfidenceIntervalsChart.propTypes = {\n  confidenceLevel: PropTypes.number.isRequired,\n  samples: PropTypes.arrayOf(confidenceIntervalsSampleType).isRequired,\n  popShape: popShapeType.isRequired,\n  popMean: PropTypes.number.isRequired,\n  selected: confidenceIntervalsSampleType,\n  setSelected: PropTypes.func.isRequired,\n}\n","import React, { useState } from \"react\";\nimport { Button, Input, Alert } from \"reactstrap\";\nimport PropTypes from \"prop-types\";\n\nexport default function ManySamplesInput({ populationSize, addSamples }) {\n  const [numberResamples, setNumberResamples] = useState(0);\n  const [resampleSize, setResampleSize] = useState(0);\n\n  return (\n    <div style={{ padding: 50 }}>\n      <Alert color=\"primary\" style={{width: \"50%\", margin: \"auto\"}}>\n        Simulate drawing many many samples\n      </Alert>\n      <br/>\n      <span> Sample Size: </span>\n      <Input\n        style={{width: \"40%\", margin: \"auto\"}}\n        min={1}\n        type=\"number\"\n        placeholder=\"Sample Size:\"\n        onChange={(event) => setResampleSize(event.target.value)}\n        value={resampleSize}\n      />\n      <br/>\n      <span> Number of Replications: </span>\n      <Input\n        style={{width: \"40%\", margin: \"auto\"}}\n        min={1}\n        type=\"number\"\n        placeholder=\"Number of Replications:\"\n        onChange={(event) => setNumberResamples(event.target.value)}\n        value={numberResamples}\n      />\n      <br/>\n      <Button\n        onClick={() => addSamples(resampleSize, numberResamples)}\n        disabled={(resampleSize < 1) || (resampleSize > populationSize) || (numberResamples < 1)}\n      >\n        Run\n      </Button>\n      <Button onClick={() => addSamples()}>Clear</Button>\n    </div>\n  );\n}\n\nManySamplesInput.propTypes = {\n  populationSize: PropTypes.number.isRequired,\n  addSamples: PropTypes.func.isRequired,\n}\n","import React from \"react\";\nimport { Table } from \"reactstrap\";\nimport PropTypes from 'prop-types';\nimport { confidenceIntervalsSampleType } from \"../../lib/types.js\";\n\nexport default function SamplesTable({ samples, setSelected }) {\n\n  const samplesTable = samples.map((sampleObject) =>\n    <tr\n      style={{ backgroundColor: sampleObject.label ? \"rgba(23, 161, 80, 0.233)\" : \"rgba(161, 23, 23, 0.233)\", cursor: \"pointer\" }}\n      key={sampleObject.id}\n      onClick={() => setSelected(sampleObject)}\n    >\n      <td>{sampleObject.id}</td>\n      <td>{sampleObject.size}</td>\n      <td>{sampleObject.mean}</td>\n      <td>{sampleObject.lowerConf}</td>\n      <td>{sampleObject.upperConf}</td>\n      <td>{sampleObject.confidenceLevel}</td>\n      <td>{sampleObject.distribution.toUpperCase()}</td>\n    </tr>\n  );\n\n  samplesTable.reverse()\n\n  return (\n    <div style={{ height: 500, overflow: \"auto\", marginTop: -50 }}>\n      <Table hover className=\"ciTable\">\n        <thead>\n          <tr>\n            <th>Sample</th>\n            <th>Size</th>\n            <th>Mean</th>\n            <th>Lower Bound for CI</th>\n            <th>Upper Bound for CI</th>\n            <th>Confidence Level</th>\n            <th>Distribution</th>\n          </tr>\n        </thead>\n        <tbody>\n          {samplesTable}\n        </tbody>\n      </Table>\n    </div>\n  )\n}\n\nSamplesTable.propTypes = {\n  samples: PropTypes.arrayOf(confidenceIntervalsSampleType).isRequired,\n  setSelected: PropTypes.func.isRequired,\n}\n","import React from \"react\";\nimport DotPlot from \"../DotPlot\";\nimport { Alert, Container } from \"reactstrap\";\nimport _ from \"lodash\";\nimport PropTypes from 'prop-types';\nimport { dataObjectArrayType, popShapeType } from \"../../lib/types.js\";\nimport { TEXTS_ALT, VALUES_ALT } from \"../../lib/constants.js\";\n\nexport default function PopulationChart({ popArray, popMean, sampled, popShape }) {\n  const { xmaxval, xminval, ymaxval, title, xLabel } = VALUES_ALT[popShape];\n\n  const series = [\n    {\n      name: 'Population',\n      data: popArray\n    },\n    {\n      name: 'Samples',\n      data: sampled\n    }\n  ];\n\n  return (\n    <Container fluid>\n      <Alert color=\"secondary\" className=\"Center\">\n        We queried the {TEXTS_ALT[popShape][0]} of {popArray.length} {TEXTS_ALT[popShape][1]} and plotted the results on the following chart.\n      </Alert>\n      <DotPlot\n        series={series}\n        title={`${title} <br /> Population Mean: ${_.round(popMean, 2)}`}\n        xMin={xminval}\n        xMax={xmaxval}\n        yMax={ymaxval}\n        xLabel={xLabel}\n      />\n  </Container>\n  );\n}\n\nPopulationChart.propTypes = {\n  popArray: dataObjectArrayType.isRequired,\n  popMean: PropTypes.number,\n  sampled: dataObjectArrayType.isRequired,\n  popShape: popShapeType.isRequired\n}\n","import React, { useState, useEffect } from \"react\";\nimport Collapsable from \"../Collapsable.js\";\nimport ConfidenceInputs from \"./ConfidenceInputs.js\";\nimport SampleSizeInput from \"../SampleSizeInput.js\";\nimport ConfidenceIntervalsChart from \"./ConfidenceIntervalsChart.js\";\nimport ManySamplesInput from \"./ManySamplesInput.js\";\nimport SamplesTable from \"./SamplesTable.js\";\nimport { dataFromDistribution, populationMean, populationStandardDev } from \"../../lib/stats-utils.js\";\nimport { Row, Col, Alert } from \"reactstrap\";\nimport PopulationChart from \"./PopulationChart.js\";\nimport _ from \"lodash\";\nimport { jStat } from \"jstat\";\nimport PropTypes from \"prop-types\";\nimport Highcharts from \"highcharts\";\nimport { popShapeType } from \"../../lib/types.js\";\n\nexport default function CISimulation({ popShape, populationSize }) {\n  const [distType, setDistType] = useState(\"Z\");  // can be \"Z\" or \"T\"\n  const [confLevel, setConfLevel] = useState(95);\n  const [popArray, setPopArray] = useState([]);\n  const [samples, setSamples] = useState([]);\n  const [selected, setSelected] = useState();\n\n  useEffect(() => {\n    setPopArray([]);\n    setSamples([]);\n  }, [popShape]);\n\n  // Highcharts rendering is buggy - this second useEffect takes a second but allows the data to be reset completely before being generated again\n  useEffect(() => {\n    if (popArray.length === 0) {\n      // adjust params for uniform distribution to fit example\n      const newPop = dataFromDistribution(popShape, populationSize, {low: 54, hi: 74});\n      setPopArray(newPop);\n    }\n  }, [popArray, popShape, populationSize]);\n\n  // this is a hack to get around what I believe is a bug in highcharts\n  // where a point will sometimes turn gray when selected\n  const unselect = () => {\n    Highcharts.charts.forEach((chart) => {\n      if (chart) {\n        chart.series.forEach((series) => {\n          series.data.forEach((point) => {\n            point.select(false, false)\n          })\n        })\n      }\n    });\n  }\n\n  const generateSamples = (size, replications=1) => {\n    unselect();\n    if (!size) {  // calling generateSamples with no arguments clears the data\n      setSamples([]);\n      setSelected();\n    } else {\n      const sampleObjects = [];\n      for (let i = 0; i < replications; i++) {\n        const sample = _.sampleSize(popArray, size);\n        const mean = _.round(populationMean(sample), 2);\n        const popMean = _.round(populationMean(popArray), 2);\n        const standardDev = populationStandardDev((distType === \"Z\") ? popArray : sample);\n        const ciFunction = (distType === \"Z\") ? jStat.normalci : jStat.tci;\n        const [lowerConf, upperConf] = ciFunction(mean, 1 - (confLevel / 100), standardDev, size);\n        const sampleObject = {\n          data: sample,\n          size: +size,\n          mean: mean,\n          lowerConf: _.round(lowerConf, 2),\n          upperConf: _.round(upperConf, 2),\n          confidenceLevel: confLevel,\n          distribution: distType,\n          label: (popMean >= _.round(lowerConf, 2)) && (popMean <= _.round(upperConf, 2)),\n        }\n        sampleObjects.push(sampleObject);\n      }\n      const newSamples = [...samples, ...sampleObjects];\n      const indexedSamples = newSamples.map((sample, index) => ({...sample, id: index + 1}))\n      setSamples(indexedSamples);\n      setSelected(indexedSamples[indexedSamples.length - 1]);\n    }\n  }\n\n  const selectPoint = (point) => {\n    setSelected(point);\n    unselect();\n  }\n\n  return (\n    <Collapsable>\n      <div>\n        <Row>\n          <ConfidenceInputs\n            distType={distType}\n            setDistType={setDistType}\n            confLevel={confLevel}\n            setConfLevel={setConfLevel}\n          />\n        </Row>\n        <br/>\n        <Row md={1} lg={2}>\n          <Col>\n            <PopulationChart\n              popArray={popArray}\n              popMean={populationMean(popArray)}\n              sampled={selected ? selected.data : []}  // most recent sample data\n              popShape={popShape}\n            />\n            <p>Try drawing some samples and calculating means</p>\n            <SampleSizeInput maxSize={popArray.length} handleClick={generateSamples}/>\n          </Col>\n          <Col>\n            <ConfidenceIntervalsChart\n              confidenceLevel={confLevel}\n              samples={samples}\n              popShape={popShape}\n              popMean={_.round(populationMean(popArray))}\n              selected={selected}\n              setSelected={setSelected}\n            />\n          </Col>\n        </Row>\n        <Row>\n          <Col lg={12} xl={5}>\n            <ManySamplesInput\n              populationSize={popArray.length}\n              addSamples={generateSamples}\n            />\n          </Col>\n          <Col lg={12} xl={7}>\n            <SamplesTable samples={samples} setSelected={selectPoint}/>\n          </Col>\n        </Row>\n        <br/>\n        <Row>\n          {(samples.length > 0) && (\n            <Alert color=\"info\" style={{margin:\"auto\"}}>\n              {samples.filter(({ label }) => !label).length} intervals did not contain the population mean.\n              <br/>\n              {samples.filter(({ label }) => label).length} did ({_.round(100 * samples.filter(({ label }) => label).length / samples.length, 2)}%).\n            </Alert>\n          )}\n        </Row>\n      </div>\n    </Collapsable>\n  );\n}\n\nCISimulation.propTypes = {\n  popShape: popShapeType.isRequired,\n  populationSize: PropTypes.number.isRequired,\n}\n","import React, { useState } from 'react';\nimport PopBar from '../PopBar.js';\nimport { Alert } from 'reactstrap';\nimport CISimulation from './CISimulation.js';\nimport { SAMPLE_SIZE } from '../../lib/constants.js';\n\nexport default function ConfidenceIntervals() {\n  const [popShape, setPopType] = useState(\"\");\n\n  return (\n    <div className=\"MainContainer\">\n      <Alert style={{ width: \"50%\", margin: 'auto' }} color=\"primary\">\n        Confidence Intervals\n      </Alert>\n      <Alert style={{ width: \"50%\", margin: 'auto' }} color=\"primary\">\n        This simulation demonstrates how confidence intervals provide an estimate for the location of the true population mean µ. In this exercise you will first choose 1) whether to assume that you know the true population standard deviation and 2) what confidence level to impose. Then, you will take random samples from the population, calculation a sample mean for each, and construct confidence intervals around those sample means. The proportion of confidence intervals that contain the true mean corresponds to the chosen confidence level!\n      </Alert>\n      <PopBar sim=\"CI\" setPop={setPopType}/>\n      {popShape && <CISimulation popShape={popShape} populationSize={SAMPLE_SIZE}/>}\n    </div>\n  );\n}\n","/* This table returns a p-value given a t-score and a degree of freedom.\n    e.g.\n\n    TToPval[0]['-3.0'] returns the p-value given a dof of 1 and a t-score of -3.0.\n    dof range: 0~120 & 10000(TToPval[120][x.x])\n    t-score range: -3.0 ~ 3.0\n\n*/\n\nconst TToPval = [{'-3.0': 0.898, '-2.9': 0.894, '-2.8': 0.891, '-2.7': 0.887, '-2.6': 0.883, '-2.5': 0.879, '-2.4': 0.874, '-2.3': 0.869, '-2.2': 0.864, '-2.1': 0.859, '-2.0': 0.852, '-1.9': 0.846, '-1.8': 0.839, '-1.7': 0.831, '-1.6': 0.822, '-1.5': 0.813, '-1.4': 0.803, '-1.3': 0.791, '-1.2': 0.779, '-1.1': 0.765, '-1.0': 0.75, '-0.9': 0.733, '-0.8': 0.715, '-0.7': 0.694, '-0.6': 0.672, '-0.5': 0.648, '-0.4': 0.621, '-0.3': 0.593, '-0.2': 0.563, '-0.1': 0.532, '0.0': 0.5, '0.1': 0.468, '0.2': 0.437, '0.3': 0.407, '0.4': 0.379, '0.5': 0.352, '0.6': 0.328, '0.7': 0.306, '0.8': 0.285, '0.9': 0.267, '1.0': 0.25, '1.1': 0.235, '1.2': 0.221, '1.3': 0.209, '1.4': 0.197, '1.5': 0.187, '1.6': 0.178, '1.7': 0.169, '1.8': 0.161, '1.9': 0.154, '2.0': 0.148, '2.1': 0.141, '2.2': 0.136, '2.3': 0.131, '2.4': 0.126, '2.5': 0.121, '2.6': 0.117, '2.7': 0.113, '2.8': 0.109, '2.9': 0.106, '3.0': 0.102}, {'-3.0': 0.952, '-2.9': 0.949, '-2.8': 0.946, '-2.7': 0.943, '-2.6': 0.939, '-2.5': 0.935, '-2.4': 0.931, '-2.3': 0.926, '-2.2': 0.921, '-2.1': 0.915, '-2.0': 0.908, '-1.9': 0.901, '-1.8': 0.893, '-1.7': 0.884, '-1.6': 0.875, '-1.5': 0.864, '-1.4': 0.852, '-1.3': 0.838, '-1.2': 0.823, '-1.1': 0.807, '-1.0': 0.789, '-0.9': 0.768, '-0.8': 0.746, '-0.7': 0.722, '-0.6': 0.695, '-0.5': 0.667, '-0.4': 0.636, '-0.3': 0.604, '-0.2': 0.57, '-0.1': 0.535, '0.0': 0.5, '0.1': 0.465, '0.2': 0.43, '0.3': 0.396, '0.4': 0.364, '0.5': 0.333, '0.6': 0.305, '0.7': 0.278, '0.8': 0.254, '0.9': 0.232, '1.0': 0.211, '1.1': 0.193, '1.2': 0.177, '1.3': 0.162, '1.4': 0.148, '1.5': 0.136, '1.6': 0.125, '1.7': 0.116, '1.8': 0.107, '1.9': 0.099, '2.0': 0.092, '2.1': 0.085, '2.2': 0.079, '2.3': 0.074, '2.4': 0.069, '2.5': 0.065, '2.6': 0.061, '2.7': 0.057, '2.8': 0.054, '2.9': 0.051, '3.0': 0.048}, {'-3.0': 0.971, '-2.9': 0.969, '-2.8': 0.966, '-2.7': 0.963, '-2.6': 0.96, '-2.5': 0.956, '-2.4': 0.952, '-2.3': 0.948, '-2.2': 0.942, '-2.1': 0.937, '-2.0': 0.93, '-1.9': 0.923, '-1.8': 0.915, '-1.7': 0.906, '-1.6': 0.896, '-1.5': 0.885, '-1.4': 0.872, '-1.3': 0.858, '-1.2': 0.842, '-1.1': 0.824, '-1.0': 0.804, '-0.9': 0.783, '-0.8': 0.759, '-0.7': 0.733, '-0.6': 0.705, '-0.5': 0.674, '-0.4': 0.642, '-0.3': 0.608, '-0.2': 0.573, '-0.1': 0.537, '0.0': 0.5, '0.1': 0.463, '0.2': 0.427, '0.3': 0.392, '0.4': 0.358, '0.5': 0.326, '0.6': 0.295, '0.7': 0.267, '0.8': 0.241, '0.9': 0.217, '1.0': 0.196, '1.1': 0.176, '1.2': 0.158, '1.3': 0.142, '1.4': 0.128, '1.5': 0.115, '1.6': 0.104, '1.7': 0.094, '1.8': 0.085, '1.9': 0.077, '2.0': 0.07, '2.1': 0.063, '2.2': 0.058, '2.3': 0.052, '2.4': 0.048, '2.5': 0.044, '2.6': 0.04, '2.7': 0.037, '2.8': 0.034, '2.9': 0.031, '3.0': 0.029}, {'-3.0': 0.98, '-2.9': 0.978, '-2.8': 0.976, '-2.7': 0.973, '-2.6': 0.97, '-2.5': 0.967, '-2.4': 0.963, '-2.3': 0.959, '-2.2': 0.954, '-2.1': 0.948, '-2.0': 0.942, '-1.9': 0.935, '-1.8': 0.927, '-1.7': 0.918, '-1.6': 0.908, '-1.5': 0.896, '-1.4': 0.883, '-1.3': 0.868, '-1.2': 0.852, '-1.1': 0.833, '-1.0': 0.813, '-0.9': 0.79, '-0.8': 0.766, '-0.7': 0.739, '-0.6': 0.71, '-0.5': 0.678, '-0.4': 0.645, '-0.3': 0.61, '-0.2': 0.574, '-0.1': 0.537, '0.0': 0.5, '0.1': 0.463, '0.2': 0.426, '0.3': 0.39, '0.4': 0.355, '0.5': 0.322, '0.6': 0.29, '0.7': 0.261, '0.8': 0.234, '0.9': 0.21, '1.0': 0.187, '1.1': 0.167, '1.2': 0.148, '1.3': 0.132, '1.4': 0.117, '1.5': 0.104, '1.6': 0.092, '1.7': 0.082, '1.8': 0.073, '1.9': 0.065, '2.0': 0.058, '2.1': 0.052, '2.2': 0.046, '2.3': 0.041, '2.4': 0.037, '2.5': 0.033, '2.6': 0.03, '2.7': 0.027, '2.8': 0.024, '2.9': 0.022, '3.0': 0.02}, {'-3.0': 0.985, '-2.9': 0.983, '-2.8': 0.981, '-2.7': 0.979, '-2.6': 0.976, '-2.5': 0.973, '-2.4': 0.969, '-2.3': 0.965, '-2.2': 0.96, '-2.1': 0.955, '-2.0': 0.949, '-1.9': 0.942, '-1.8': 0.934, '-1.7': 0.925, '-1.6': 0.915, '-1.5': 0.903, '-1.4': 0.89, '-1.3': 0.875, '-1.2': 0.858, '-1.1': 0.839, '-1.0': 0.818, '-0.9': 0.795, '-0.8': 0.77, '-0.7': 0.742, '-0.6': 0.713, '-0.5': 0.681, '-0.4': 0.647, '-0.3': 0.612, '-0.2': 0.575, '-0.1': 0.538, '0.0': 0.5, '0.1': 0.462, '0.2': 0.425, '0.3': 0.388, '0.4': 0.353, '0.5': 0.319, '0.6': 0.287, '0.7': 0.258, '0.8': 0.23, '0.9': 0.205, '1.0': 0.182, '1.1': 0.161, '1.2': 0.142, '1.3': 0.125, '1.4': 0.11, '1.5': 0.097, '1.6': 0.085, '1.7': 0.075, '1.8': 0.066, '1.9': 0.058, '2.0': 0.051, '2.1': 0.045, '2.2': 0.04, '2.3': 0.035, '2.4': 0.031, '2.5': 0.027, '2.6': 0.024, '2.7': 0.021, '2.8': 0.019, '2.9': 0.017, '3.0': 0.015}, {'-3.0': 0.988, '-2.9': 0.986, '-2.8': 0.984, '-2.7': 0.982, '-2.6': 0.98, '-2.5': 0.977, '-2.4': 0.973, '-2.3': 0.969, '-2.2': 0.965, '-2.1': 0.96, '-2.0': 0.954, '-1.9': 0.947, '-1.8': 0.939, '-1.7': 0.93, '-1.6': 0.92, '-1.5': 0.908, '-1.4': 0.894, '-1.3': 0.879, '-1.2': 0.862, '-1.1': 0.843, '-1.0': 0.822, '-0.9': 0.799, '-0.8': 0.773, '-0.7': 0.745, '-0.6': 0.715, '-0.5': 0.683, '-0.4': 0.648, '-0.3': 0.613, '-0.2': 0.576, '-0.1': 0.538, '0.0': 0.5, '0.1': 0.462, '0.2': 0.424, '0.3': 0.387, '0.4': 0.352, '0.5': 0.317, '0.6': 0.285, '0.7': 0.255, '0.8': 0.227, '0.9': 0.201, '1.0': 0.178, '1.1': 0.157, '1.2': 0.138, '1.3': 0.121, '1.4': 0.106, '1.5': 0.092, '1.6': 0.08, '1.7': 0.07, '1.8': 0.061, '1.9': 0.053, '2.0': 0.046, '2.1': 0.04, '2.2': 0.035, '2.3': 0.031, '2.4': 0.027, '2.5': 0.023, '2.6': 0.02, '2.7': 0.018, '2.8': 0.016, '2.9': 0.014, '3.0': 0.012}, {'-3.0': 0.99, '-2.9': 0.989, '-2.8': 0.987, '-2.7': 0.985, '-2.6': 0.982, '-2.5': 0.98, '-2.4': 0.976, '-2.3': 0.973, '-2.2': 0.968, '-2.1': 0.963, '-2.0': 0.957, '-1.9': 0.95, '-1.8': 0.943, '-1.7': 0.934, '-1.6': 0.923, '-1.5': 0.911, '-1.4': 0.898, '-1.3': 0.883, '-1.2': 0.865, '-1.1': 0.846, '-1.0': 0.825, '-0.9': 0.801, '-0.8': 0.775, '-0.7': 0.747, '-0.6': 0.716, '-0.5': 0.684, '-0.4': 0.649, '-0.3': 0.614, '-0.2': 0.576, '-0.1': 0.538, '0.0': 0.5, '0.1': 0.462, '0.2': 0.424, '0.3': 0.386, '0.4': 0.351, '0.5': 0.316, '0.6': 0.284, '0.7': 0.253, '0.8': 0.225, '0.9': 0.199, '1.0': 0.175, '1.1': 0.154, '1.2': 0.135, '1.3': 0.117, '1.4': 0.102, '1.5': 0.089, '1.6': 0.077, '1.7': 0.066, '1.8': 0.057, '1.9': 0.05, '2.0': 0.043, '2.1': 0.037, '2.2': 0.032, '2.3': 0.027, '2.4': 0.024, '2.5': 0.02, '2.6': 0.018, '2.7': 0.015, '2.8': 0.013, '2.9': 0.011, '3.0': 0.01}, {'-3.0': 0.991, '-2.9': 0.99, '-2.8': 0.988, '-2.7': 0.986, '-2.6': 0.984, '-2.5': 0.982, '-2.4': 0.978, '-2.3': 0.975, '-2.2': 0.971, '-2.1': 0.966, '-2.0': 0.96, '-1.9': 0.953, '-1.8': 0.945, '-1.7': 0.936, '-1.6': 0.926, '-1.5': 0.914, '-1.4': 0.9, '-1.3': 0.885, '-1.2': 0.868, '-1.1': 0.848, '-1.0': 0.827, '-0.9': 0.803, '-0.8': 0.777, '-0.7': 0.748, '-0.6': 0.717, '-0.5': 0.685, '-0.4': 0.65, '-0.3': 0.614, '-0.2': 0.577, '-0.1': 0.539, '0.0': 0.5, '0.1': 0.461, '0.2': 0.423, '0.3': 0.386, '0.4': 0.35, '0.5': 0.315, '0.6': 0.283, '0.7': 0.252, '0.8': 0.223, '0.9': 0.197, '1.0': 0.173, '1.1': 0.152, '1.2': 0.132, '1.3': 0.115, '1.4': 0.1, '1.5': 0.086, '1.6': 0.074, '1.7': 0.064, '1.8': 0.055, '1.9': 0.047, '2.0': 0.04, '2.1': 0.034, '2.2': 0.029, '2.3': 0.025, '2.4': 0.022, '2.5': 0.018, '2.6': 0.016, '2.7': 0.014, '2.8': 0.012, '2.9': 0.01, '3.0': 0.009}, {'-3.0': 0.993, '-2.9': 0.991, '-2.8': 0.99, '-2.7': 0.988, '-2.6': 0.986, '-2.5': 0.983, '-2.4': 0.98, '-2.3': 0.977, '-2.2': 0.972, '-2.1': 0.967, '-2.0': 0.962, '-1.9': 0.955, '-1.8': 0.947, '-1.7': 0.938, '-1.6': 0.928, '-1.5': 0.916, '-1.4': 0.902, '-1.3': 0.887, '-1.2': 0.87, '-1.1': 0.85, '-1.0': 0.828, '-0.9': 0.804, '-0.8': 0.778, '-0.7': 0.749, '-0.6': 0.718, '-0.5': 0.685, '-0.4': 0.651, '-0.3': 0.615, '-0.2': 0.577, '-0.1': 0.539, '0.0': 0.5, '0.1': 0.461, '0.2': 0.423, '0.3': 0.385, '0.4': 0.349, '0.5': 0.315, '0.6': 0.282, '0.7': 0.251, '0.8': 0.222, '0.9': 0.196, '1.0': 0.172, '1.1': 0.15, '1.2': 0.13, '1.3': 0.113, '1.4': 0.098, '1.5': 0.084, '1.6': 0.072, '1.7': 0.062, '1.8': 0.053, '1.9': 0.045, '2.0': 0.038, '2.1': 0.033, '2.2': 0.028, '2.3': 0.023, '2.4': 0.02, '2.5': 0.017, '2.6': 0.014, '2.7': 0.012, '2.8': 0.01, '2.9': 0.009, '3.0': 0.007}, {'-3.0': 0.993, '-2.9': 0.992, '-2.8': 0.991, '-2.7': 0.989, '-2.6': 0.987, '-2.5': 0.984, '-2.4': 0.981, '-2.3': 0.978, '-2.2': 0.974, '-2.1': 0.969, '-2.0': 0.963, '-1.9': 0.957, '-1.8': 0.949, '-1.7': 0.94, '-1.6': 0.93, '-1.5': 0.918, '-1.4': 0.904, '-1.3': 0.889, '-1.2': 0.871, '-1.1': 0.851, '-1.0': 0.83, '-0.9': 0.805, '-0.8': 0.779, '-0.7': 0.75, '-0.6': 0.719, '-0.5': 0.686, '-0.4': 0.651, '-0.3': 0.615, '-0.2': 0.577, '-0.1': 0.539, '0.0': 0.5, '0.1': 0.461, '0.2': 0.423, '0.3': 0.385, '0.4': 0.349, '0.5': 0.314, '0.6': 0.281, '0.7': 0.25, '0.8': 0.221, '0.9': 0.195, '1.0': 0.17, '1.1': 0.149, '1.2': 0.129, '1.3': 0.111, '1.4': 0.096, '1.5': 0.082, '1.6': 0.07, '1.7': 0.06, '1.8': 0.051, '1.9': 0.043, '2.0': 0.037, '2.1': 0.031, '2.2': 0.026, '2.3': 0.022, '2.4': 0.019, '2.5': 0.016, '2.6': 0.013, '2.7': 0.011, '2.8': 0.009, '2.9': 0.008, '3.0': 0.007}, {'-3.0': 0.994, '-2.9': 0.993, '-2.8': 0.991, '-2.7': 0.99, '-2.6': 0.988, '-2.5': 0.985, '-2.4': 0.982, '-2.3': 0.979, '-2.2': 0.975, '-2.1': 0.97, '-2.0': 0.965, '-1.9': 0.958, '-1.8': 0.95, '-1.7': 0.941, '-1.6': 0.931, '-1.5': 0.919, '-1.4': 0.905, '-1.3': 0.89, '-1.2': 0.872, '-1.1': 0.853, '-1.0': 0.831, '-0.9': 0.806, '-0.8': 0.78, '-0.7': 0.751, '-0.6': 0.72, '-0.5': 0.687, '-0.4': 0.652, '-0.3': 0.615, '-0.2': 0.577, '-0.1': 0.539, '0.0': 0.5, '0.1': 0.461, '0.2': 0.423, '0.3': 0.385, '0.4': 0.348, '0.5': 0.313, '0.6': 0.28, '0.7': 0.249, '0.8': 0.22, '0.9': 0.194, '1.0': 0.169, '1.1': 0.147, '1.2': 0.128, '1.3': 0.11, '1.4': 0.095, '1.5': 0.081, '1.6': 0.069, '1.7': 0.059, '1.8': 0.05, '1.9': 0.042, '2.0': 0.035, '2.1': 0.03, '2.2': 0.025, '2.3': 0.021, '2.4': 0.018, '2.5': 0.015, '2.6': 0.012, '2.7': 0.01, '2.8': 0.009, '2.9': 0.007, '3.0': 0.006}, {'-3.0': 0.994, '-2.9': 0.993, '-2.8': 0.992, '-2.7': 0.99, '-2.6': 0.988, '-2.5': 0.986, '-2.4': 0.983, '-2.3': 0.98, '-2.2': 0.976, '-2.1': 0.971, '-2.0': 0.966, '-1.9': 0.959, '-1.8': 0.951, '-1.7': 0.943, '-1.6': 0.932, '-1.5': 0.92, '-1.4': 0.907, '-1.3': 0.891, '-1.2': 0.873, '-1.1': 0.854, '-1.0': 0.831, '-0.9': 0.807, '-0.8': 0.78, '-0.7': 0.751, '-0.6': 0.72, '-0.5': 0.687, '-0.4': 0.652, '-0.3': 0.615, '-0.2': 0.578, '-0.1': 0.539, '0.0': 0.5, '0.1': 0.461, '0.2': 0.422, '0.3': 0.385, '0.4': 0.348, '0.5': 0.313, '0.6': 0.28, '0.7': 0.249, '0.8': 0.22, '0.9': 0.193, '1.0': 0.169, '1.1': 0.146, '1.2': 0.127, '1.3': 0.109, '1.4': 0.093, '1.5': 0.08, '1.6': 0.068, '1.7': 0.057, '1.8': 0.049, '1.9': 0.041, '2.0': 0.034, '2.1': 0.029, '2.2': 0.024, '2.3': 0.02, '2.4': 0.017, '2.5': 0.014, '2.6': 0.012, '2.7': 0.01, '2.8': 0.008, '2.9': 0.007, '3.0': 0.006}, {'-3.0': 0.995, '-2.9': 0.994, '-2.8': 0.992, '-2.7': 0.991, '-2.6': 0.989, '-2.5': 0.987, '-2.4': 0.984, '-2.3': 0.981, '-2.2': 0.977, '-2.1': 0.972, '-2.0': 0.967, '-1.9': 0.96, '-1.8': 0.952, '-1.7': 0.944, '-1.6': 0.933, '-1.5': 0.921, '-1.4': 0.908, '-1.3': 0.892, '-1.2': 0.874, '-1.1': 0.854, '-1.0': 0.832, '-0.9': 0.808, '-0.8': 0.781, '-0.7': 0.752, '-0.6': 0.721, '-0.5': 0.687, '-0.4': 0.652, '-0.3': 0.616, '-0.2': 0.578, '-0.1': 0.539, '0.0': 0.5, '0.1': 0.461, '0.2': 0.422, '0.3': 0.384, '0.4': 0.348, '0.5': 0.313, '0.6': 0.279, '0.7': 0.248, '0.8': 0.219, '0.9': 0.192, '1.0': 0.168, '1.1': 0.146, '1.2': 0.126, '1.3': 0.108, '1.4': 0.092, '1.5': 0.079, '1.6': 0.067, '1.7': 0.056, '1.8': 0.048, '1.9': 0.04, '2.0': 0.033, '2.1': 0.028, '2.2': 0.023, '2.3': 0.019, '2.4': 0.016, '2.5': 0.013, '2.6': 0.011, '2.7': 0.009, '2.8': 0.008, '2.9': 0.006, '3.0': 0.005}, {'-3.0': 0.995, '-2.9': 0.994, '-2.8': 0.993, '-2.7': 0.991, '-2.6': 0.99, '-2.5': 0.987, '-2.4': 0.985, '-2.3': 0.981, '-2.2': 0.977, '-2.1': 0.973, '-2.0': 0.967, '-1.9': 0.961, '-1.8': 0.953, '-1.7': 0.944, '-1.6': 0.934, '-1.5': 0.922, '-1.4': 0.908, '-1.3': 0.893, '-1.2': 0.875, '-1.1': 0.855, '-1.0': 0.833, '-0.9': 0.808, '-0.8': 0.781, '-0.7': 0.752, '-0.6': 0.721, '-0.5': 0.688, '-0.4': 0.652, '-0.3': 0.616, '-0.2': 0.578, '-0.1': 0.539, '0.0': 0.5, '0.1': 0.461, '0.2': 0.422, '0.3': 0.384, '0.4': 0.348, '0.5': 0.312, '0.6': 0.279, '0.7': 0.248, '0.8': 0.219, '0.9': 0.192, '1.0': 0.167, '1.1': 0.145, '1.2': 0.125, '1.3': 0.107, '1.4': 0.092, '1.5': 0.078, '1.6': 0.066, '1.7': 0.056, '1.8': 0.047, '1.9': 0.039, '2.0': 0.033, '2.1': 0.027, '2.2': 0.023, '2.3': 0.019, '2.4': 0.015, '2.5': 0.013, '2.6': 0.01, '2.7': 0.009, '2.8': 0.007, '2.9': 0.006, '3.0': 0.005}, {'-3.0': 0.996, '-2.9': 0.995, '-2.8': 0.993, '-2.7': 0.992, '-2.6': 0.99, '-2.5': 0.988, '-2.4': 0.985, '-2.3': 0.982, '-2.2': 0.978, '-2.1': 0.973, '-2.0': 0.968, '-1.9': 0.962, '-1.8': 0.954, '-1.7': 0.945, '-1.6': 0.935, '-1.5': 0.923, '-1.4': 0.909, '-1.3': 0.893, '-1.2': 0.876, '-1.1': 0.856, '-1.0': 0.833, '-0.9': 0.809, '-0.8': 0.782, '-0.7': 0.753, '-0.6': 0.721, '-0.5': 0.688, '-0.4': 0.653, '-0.3': 0.616, '-0.2': 0.578, '-0.1': 0.539, '0.0': 0.5, '0.1': 0.461, '0.2': 0.422, '0.3': 0.384, '0.4': 0.347, '0.5': 0.312, '0.6': 0.279, '0.7': 0.247, '0.8': 0.218, '0.9': 0.191, '1.0': 0.167, '1.1': 0.144, '1.2': 0.124, '1.3': 0.107, '1.4': 0.091, '1.5': 0.077, '1.6': 0.065, '1.7': 0.055, '1.8': 0.046, '1.9': 0.038, '2.0': 0.032, '2.1': 0.027, '2.2': 0.022, '2.3': 0.018, '2.4': 0.015, '2.5': 0.012, '2.6': 0.01, '2.7': 0.008, '2.8': 0.007, '2.9': 0.005, '3.0': 0.004}, {'-3.0': 0.996, '-2.9': 0.995, '-2.8': 0.994, '-2.7': 0.992, '-2.6': 0.99, '-2.5': 0.988, '-2.4': 0.986, '-2.3': 0.982, '-2.2': 0.979, '-2.1': 0.974, '-2.0': 0.969, '-1.9': 0.962, '-1.8': 0.955, '-1.7': 0.946, '-1.6': 0.935, '-1.5': 0.923, '-1.4': 0.91, '-1.3': 0.894, '-1.2': 0.876, '-1.1': 0.856, '-1.0': 0.834, '-0.9': 0.809, '-0.8': 0.782, '-0.7': 0.753, '-0.6': 0.722, '-0.5': 0.688, '-0.4': 0.653, '-0.3': 0.616, '-0.2': 0.578, '-0.1': 0.539, '0.0': 0.5, '0.1': 0.461, '0.2': 0.422, '0.3': 0.384, '0.4': 0.347, '0.5': 0.312, '0.6': 0.278, '0.7': 0.247, '0.8': 0.218, '0.9': 0.191, '1.0': 0.166, '1.1': 0.144, '1.2': 0.124, '1.3': 0.106, '1.4': 0.09, '1.5': 0.077, '1.6': 0.065, '1.7': 0.054, '1.8': 0.045, '1.9': 0.038, '2.0': 0.031, '2.1': 0.026, '2.2': 0.021, '2.3': 0.018, '2.4': 0.014, '2.5': 0.012, '2.6': 0.01, '2.7': 0.008, '2.8': 0.006, '2.9': 0.005, '3.0': 0.004}, {'-3.0': 0.996, '-2.9': 0.995, '-2.8': 0.994, '-2.7': 0.992, '-2.6': 0.991, '-2.5': 0.989, '-2.4': 0.986, '-2.3': 0.983, '-2.2': 0.979, '-2.1': 0.975, '-2.0': 0.969, '-1.9': 0.963, '-1.8': 0.955, '-1.7': 0.946, '-1.6': 0.936, '-1.5': 0.924, '-1.4': 0.91, '-1.3': 0.895, '-1.2': 0.877, '-1.1': 0.857, '-1.0': 0.834, '-0.9': 0.81, '-0.8': 0.783, '-0.7': 0.753, '-0.6': 0.722, '-0.5': 0.688, '-0.4': 0.653, '-0.3': 0.616, '-0.2': 0.578, '-0.1': 0.539, '0.0': 0.5, '0.1': 0.461, '0.2': 0.422, '0.3': 0.384, '0.4': 0.347, '0.5': 0.312, '0.6': 0.278, '0.7': 0.247, '0.8': 0.217, '0.9': 0.19, '1.0': 0.166, '1.1': 0.143, '1.2': 0.123, '1.3': 0.105, '1.4': 0.09, '1.5': 0.076, '1.6': 0.064, '1.7': 0.054, '1.8': 0.045, '1.9': 0.037, '2.0': 0.031, '2.1': 0.025, '2.2': 0.021, '2.3': 0.017, '2.4': 0.014, '2.5': 0.011, '2.6': 0.009, '2.7': 0.008, '2.8': 0.006, '2.9': 0.005, '3.0': 0.004}, {'-3.0': 0.996, '-2.9': 0.995, '-2.8': 0.994, '-2.7': 0.993, '-2.6': 0.991, '-2.5': 0.989, '-2.4': 0.986, '-2.3': 0.983, '-2.2': 0.979, '-2.1': 0.975, '-2.0': 0.97, '-1.9': 0.963, '-1.8': 0.956, '-1.7': 0.947, '-1.6': 0.936, '-1.5': 0.925, '-1.4': 0.911, '-1.3': 0.895, '-1.2': 0.877, '-1.1': 0.857, '-1.0': 0.835, '-0.9': 0.81, '-0.8': 0.783, '-0.7': 0.754, '-0.6': 0.722, '-0.5': 0.688, '-0.4': 0.653, '-0.3': 0.616, '-0.2': 0.578, '-0.1': 0.539, '0.0': 0.5, '0.1': 0.461, '0.2': 0.422, '0.3': 0.384, '0.4': 0.347, '0.5': 0.312, '0.6': 0.278, '0.7': 0.246, '0.8': 0.217, '0.9': 0.19, '1.0': 0.165, '1.1': 0.143, '1.2': 0.123, '1.3': 0.105, '1.4': 0.089, '1.5': 0.075, '1.6': 0.064, '1.7': 0.053, '1.8': 0.044, '1.9': 0.037, '2.0': 0.03, '2.1': 0.025, '2.2': 0.021, '2.3': 0.017, '2.4': 0.014, '2.5': 0.011, '2.6': 0.009, '2.7': 0.007, '2.8': 0.006, '2.9': 0.005, '3.0': 0.004}, {'-3.0': 0.996, '-2.9': 0.995, '-2.8': 0.994, '-2.7': 0.993, '-2.6': 0.991, '-2.5': 0.989, '-2.4': 0.987, '-2.3': 0.984, '-2.2': 0.98, '-2.1': 0.975, '-2.0': 0.97, '-1.9': 0.964, '-1.8': 0.956, '-1.7': 0.947, '-1.6': 0.937, '-1.5': 0.925, '-1.4': 0.911, '-1.3': 0.895, '-1.2': 0.878, '-1.1': 0.857, '-1.0': 0.835, '-0.9': 0.81, '-0.8': 0.783, '-0.7': 0.754, '-0.6': 0.722, '-0.5': 0.689, '-0.4': 0.653, '-0.3': 0.616, '-0.2': 0.578, '-0.1': 0.539, '0.0': 0.5, '0.1': 0.461, '0.2': 0.422, '0.3': 0.384, '0.4': 0.347, '0.5': 0.311, '0.6': 0.278, '0.7': 0.246, '0.8': 0.217, '0.9': 0.19, '1.0': 0.165, '1.1': 0.143, '1.2': 0.122, '1.3': 0.105, '1.4': 0.089, '1.5': 0.075, '1.6': 0.063, '1.7': 0.053, '1.8': 0.044, '1.9': 0.036, '2.0': 0.03, '2.1': 0.025, '2.2': 0.02, '2.3': 0.016, '2.4': 0.013, '2.5': 0.011, '2.6': 0.009, '2.7': 0.007, '2.8': 0.006, '2.9': 0.005, '3.0': 0.004}, {'-3.0': 0.996, '-2.9': 0.996, '-2.8': 0.994, '-2.7': 0.993, '-2.6': 0.991, '-2.5': 0.989, '-2.4': 0.987, '-2.3': 0.984, '-2.2': 0.98, '-2.1': 0.976, '-2.0': 0.97, '-1.9': 0.964, '-1.8': 0.957, '-1.7': 0.948, '-1.6': 0.937, '-1.5': 0.925, '-1.4': 0.912, '-1.3': 0.896, '-1.2': 0.878, '-1.1': 0.858, '-1.0': 0.835, '-0.9': 0.811, '-0.8': 0.783, '-0.7': 0.754, '-0.6': 0.722, '-0.5': 0.689, '-0.4': 0.653, '-0.3': 0.616, '-0.2': 0.578, '-0.1': 0.539, '0.0': 0.5, '0.1': 0.461, '0.2': 0.422, '0.3': 0.384, '0.4': 0.347, '0.5': 0.311, '0.6': 0.278, '0.7': 0.246, '0.8': 0.217, '0.9': 0.189, '1.0': 0.165, '1.1': 0.142, '1.2': 0.122, '1.3': 0.104, '1.4': 0.088, '1.5': 0.075, '1.6': 0.063, '1.7': 0.052, '1.8': 0.043, '1.9': 0.036, '2.0': 0.03, '2.1': 0.024, '2.2': 0.02, '2.3': 0.016, '2.4': 0.013, '2.5': 0.011, '2.6': 0.009, '2.7': 0.007, '2.8': 0.006, '2.9': 0.004, '3.0': 0.004}, {'-3.0': 0.997, '-2.9': 0.996, '-2.8': 0.995, '-2.7': 0.993, '-2.6': 0.992, '-2.5': 0.99, '-2.4': 0.987, '-2.3': 0.984, '-2.2': 0.98, '-2.1': 0.976, '-2.0': 0.971, '-1.9': 0.964, '-1.8': 0.957, '-1.7': 0.948, '-1.6': 0.938, '-1.5': 0.926, '-1.4': 0.912, '-1.3': 0.896, '-1.2': 0.878, '-1.1': 0.858, '-1.0': 0.836, '-0.9': 0.811, '-0.8': 0.784, '-0.7': 0.754, '-0.6': 0.723, '-0.5': 0.689, '-0.4': 0.653, '-0.3': 0.616, '-0.2': 0.578, '-0.1': 0.539, '0.0': 0.5, '0.1': 0.461, '0.2': 0.422, '0.3': 0.384, '0.4': 0.347, '0.5': 0.311, '0.6': 0.277, '0.7': 0.246, '0.8': 0.216, '0.9': 0.189, '1.0': 0.164, '1.1': 0.142, '1.2': 0.122, '1.3': 0.104, '1.4': 0.088, '1.5': 0.074, '1.6': 0.062, '1.7': 0.052, '1.8': 0.043, '1.9': 0.036, '2.0': 0.029, '2.1': 0.024, '2.2': 0.02, '2.3': 0.016, '2.4': 0.013, '2.5': 0.01, '2.6': 0.008, '2.7': 0.007, '2.8': 0.005, '2.9': 0.004, '3.0': 0.003}, {'-3.0': 0.997, '-2.9': 0.996, '-2.8': 0.995, '-2.7': 0.993, '-2.6': 0.992, '-2.5': 0.99, '-2.4': 0.987, '-2.3': 0.984, '-2.2': 0.981, '-2.1': 0.976, '-2.0': 0.971, '-1.9': 0.965, '-1.8': 0.957, '-1.7': 0.948, '-1.6': 0.938, '-1.5': 0.926, '-1.4': 0.912, '-1.3': 0.896, '-1.2': 0.879, '-1.1': 0.858, '-1.0': 0.836, '-0.9': 0.811, '-0.8': 0.784, '-0.7': 0.754, '-0.6': 0.723, '-0.5': 0.689, '-0.4': 0.653, '-0.3': 0.617, '-0.2': 0.578, '-0.1': 0.539, '0.0': 0.5, '0.1': 0.461, '0.2': 0.422, '0.3': 0.383, '0.4': 0.347, '0.5': 0.311, '0.6': 0.277, '0.7': 0.246, '0.8': 0.216, '0.9': 0.189, '1.0': 0.164, '1.1': 0.142, '1.2': 0.121, '1.3': 0.104, '1.4': 0.088, '1.5': 0.074, '1.6': 0.062, '1.7': 0.052, '1.8': 0.043, '1.9': 0.035, '2.0': 0.029, '2.1': 0.024, '2.2': 0.019, '2.3': 0.016, '2.4': 0.013, '2.5': 0.01, '2.6': 0.008, '2.7': 0.007, '2.8': 0.005, '2.9': 0.004, '3.0': 0.003}, {'-3.0': 0.997, '-2.9': 0.996, '-2.8': 0.995, '-2.7': 0.994, '-2.6': 0.992, '-2.5': 0.99, '-2.4': 0.988, '-2.3': 0.985, '-2.2': 0.981, '-2.1': 0.977, '-2.0': 0.971, '-1.9': 0.965, '-1.8': 0.958, '-1.7': 0.949, '-1.6': 0.938, '-1.5': 0.926, '-1.4': 0.913, '-1.3': 0.897, '-1.2': 0.879, '-1.1': 0.859, '-1.0': 0.836, '-0.9': 0.811, '-0.8': 0.784, '-0.7': 0.755, '-0.6': 0.723, '-0.5': 0.689, '-0.4': 0.654, '-0.3': 0.617, '-0.2': 0.578, '-0.1': 0.539, '0.0': 0.5, '0.1': 0.461, '0.2': 0.422, '0.3': 0.383, '0.4': 0.346, '0.5': 0.311, '0.6': 0.277, '0.7': 0.245, '0.8': 0.216, '0.9': 0.189, '1.0': 0.164, '1.1': 0.141, '1.2': 0.121, '1.3': 0.103, '1.4': 0.087, '1.5': 0.074, '1.6': 0.062, '1.7': 0.051, '1.8': 0.042, '1.9': 0.035, '2.0': 0.029, '2.1': 0.023, '2.2': 0.019, '2.3': 0.015, '2.4': 0.012, '2.5': 0.01, '2.6': 0.008, '2.7': 0.006, '2.8': 0.005, '2.9': 0.004, '3.0': 0.003}, {'-3.0': 0.997, '-2.9': 0.996, '-2.8': 0.995, '-2.7': 0.994, '-2.6': 0.992, '-2.5': 0.99, '-2.4': 0.988, '-2.3': 0.985, '-2.2': 0.981, '-2.1': 0.977, '-2.0': 0.972, '-1.9': 0.965, '-1.8': 0.958, '-1.7': 0.949, '-1.6': 0.939, '-1.5': 0.927, '-1.4': 0.913, '-1.3': 0.897, '-1.2': 0.879, '-1.1': 0.859, '-1.0': 0.836, '-0.9': 0.811, '-0.8': 0.784, '-0.7': 0.755, '-0.6': 0.723, '-0.5': 0.689, '-0.4': 0.654, '-0.3': 0.617, '-0.2': 0.578, '-0.1': 0.539, '0.0': 0.5, '0.1': 0.461, '0.2': 0.422, '0.3': 0.383, '0.4': 0.346, '0.5': 0.311, '0.6': 0.277, '0.7': 0.245, '0.8': 0.216, '0.9': 0.189, '1.0': 0.164, '1.1': 0.141, '1.2': 0.121, '1.3': 0.103, '1.4': 0.087, '1.5': 0.073, '1.6': 0.061, '1.7': 0.051, '1.8': 0.042, '1.9': 0.035, '2.0': 0.028, '2.1': 0.023, '2.2': 0.019, '2.3': 0.015, '2.4': 0.012, '2.5': 0.01, '2.6': 0.008, '2.7': 0.006, '2.8': 0.005, '2.9': 0.004, '3.0': 0.003}, {'-3.0': 0.997, '-2.9': 0.996, '-2.8': 0.995, '-2.7': 0.994, '-2.6': 0.992, '-2.5': 0.99, '-2.4': 0.988, '-2.3': 0.985, '-2.2': 0.981, '-2.1': 0.977, '-2.0': 0.972, '-1.9': 0.965, '-1.8': 0.958, '-1.7': 0.949, '-1.6': 0.939, '-1.5': 0.927, '-1.4': 0.913, '-1.3': 0.897, '-1.2': 0.879, '-1.1': 0.859, '-1.0': 0.837, '-0.9': 0.812, '-0.8': 0.784, '-0.7': 0.755, '-0.6': 0.723, '-0.5': 0.689, '-0.4': 0.654, '-0.3': 0.617, '-0.2': 0.578, '-0.1': 0.539, '0.0': 0.5, '0.1': 0.461, '0.2': 0.422, '0.3': 0.383, '0.4': 0.346, '0.5': 0.311, '0.6': 0.277, '0.7': 0.245, '0.8': 0.216, '0.9': 0.188, '1.0': 0.163, '1.1': 0.141, '1.2': 0.121, '1.3': 0.103, '1.4': 0.087, '1.5': 0.073, '1.6': 0.061, '1.7': 0.051, '1.8': 0.042, '1.9': 0.035, '2.0': 0.028, '2.1': 0.023, '2.2': 0.019, '2.3': 0.015, '2.4': 0.012, '2.5': 0.01, '2.6': 0.008, '2.7': 0.006, '2.8': 0.005, '2.9': 0.004, '3.0': 0.003}, {'-3.0': 0.997, '-2.9': 0.996, '-2.8': 0.995, '-2.7': 0.994, '-2.6': 0.992, '-2.5': 0.99, '-2.4': 0.988, '-2.3': 0.985, '-2.2': 0.982, '-2.1': 0.977, '-2.0': 0.972, '-1.9': 0.966, '-1.8': 0.958, '-1.7': 0.949, '-1.6': 0.939, '-1.5': 0.927, '-1.4': 0.913, '-1.3': 0.897, '-1.2': 0.88, '-1.1': 0.859, '-1.0': 0.837, '-0.9': 0.812, '-0.8': 0.785, '-0.7': 0.755, '-0.6': 0.723, '-0.5': 0.689, '-0.4': 0.654, '-0.3': 0.617, '-0.2': 0.578, '-0.1': 0.539, '0.0': 0.5, '0.1': 0.461, '0.2': 0.422, '0.3': 0.383, '0.4': 0.346, '0.5': 0.311, '0.6': 0.277, '0.7': 0.245, '0.8': 0.215, '0.9': 0.188, '1.0': 0.163, '1.1': 0.141, '1.2': 0.12, '1.3': 0.103, '1.4': 0.087, '1.5': 0.073, '1.6': 0.061, '1.7': 0.051, '1.8': 0.042, '1.9': 0.034, '2.0': 0.028, '2.1': 0.023, '2.2': 0.018, '2.3': 0.015, '2.4': 0.012, '2.5': 0.01, '2.6': 0.008, '2.7': 0.006, '2.8': 0.005, '2.9': 0.004, '3.0': 0.003}, {'-3.0': 0.997, '-2.9': 0.996, '-2.8': 0.995, '-2.7': 0.994, '-2.6': 0.993, '-2.5': 0.991, '-2.4': 0.988, '-2.3': 0.985, '-2.2': 0.982, '-2.1': 0.977, '-2.0': 0.972, '-1.9': 0.966, '-1.8': 0.958, '-1.7': 0.95, '-1.6': 0.939, '-1.5': 0.927, '-1.4': 0.914, '-1.3': 0.898, '-1.2': 0.88, '-1.1': 0.859, '-1.0': 0.837, '-0.9': 0.812, '-0.8': 0.785, '-0.7': 0.755, '-0.6': 0.723, '-0.5': 0.689, '-0.4': 0.654, '-0.3': 0.617, '-0.2': 0.579, '-0.1': 0.539, '0.0': 0.5, '0.1': 0.461, '0.2': 0.421, '0.3': 0.383, '0.4': 0.346, '0.5': 0.311, '0.6': 0.277, '0.7': 0.245, '0.8': 0.215, '0.9': 0.188, '1.0': 0.163, '1.1': 0.141, '1.2': 0.12, '1.3': 0.102, '1.4': 0.086, '1.5': 0.073, '1.6': 0.061, '1.7': 0.05, '1.8': 0.042, '1.9': 0.034, '2.0': 0.028, '2.1': 0.023, '2.2': 0.018, '2.3': 0.015, '2.4': 0.012, '2.5': 0.009, '2.6': 0.007, '2.7': 0.006, '2.8': 0.005, '2.9': 0.004, '3.0': 0.003}, {'-3.0': 0.997, '-2.9': 0.996, '-2.8': 0.995, '-2.7': 0.994, '-2.6': 0.993, '-2.5': 0.991, '-2.4': 0.988, '-2.3': 0.985, '-2.2': 0.982, '-2.1': 0.978, '-2.0': 0.972, '-1.9': 0.966, '-1.8': 0.959, '-1.7': 0.95, '-1.6': 0.94, '-1.5': 0.928, '-1.4': 0.914, '-1.3': 0.898, '-1.2': 0.88, '-1.1': 0.86, '-1.0': 0.837, '-0.9': 0.812, '-0.8': 0.785, '-0.7': 0.755, '-0.6': 0.723, '-0.5': 0.69, '-0.4': 0.654, '-0.3': 0.617, '-0.2': 0.579, '-0.1': 0.539, '0.0': 0.5, '0.1': 0.461, '0.2': 0.421, '0.3': 0.383, '0.4': 0.346, '0.5': 0.31, '0.6': 0.277, '0.7': 0.245, '0.8': 0.215, '0.9': 0.188, '1.0': 0.163, '1.1': 0.14, '1.2': 0.12, '1.3': 0.102, '1.4': 0.086, '1.5': 0.072, '1.6': 0.06, '1.7': 0.05, '1.8': 0.041, '1.9': 0.034, '2.0': 0.028, '2.1': 0.022, '2.2': 0.018, '2.3': 0.015, '2.4': 0.012, '2.5': 0.009, '2.6': 0.007, '2.7': 0.006, '2.8': 0.005, '2.9': 0.004, '3.0': 0.003}, {'-3.0': 0.997, '-2.9': 0.996, '-2.8': 0.996, '-2.7': 0.994, '-2.6': 0.993, '-2.5': 0.991, '-2.4': 0.988, '-2.3': 0.986, '-2.2': 0.982, '-2.1': 0.978, '-2.0': 0.973, '-1.9': 0.966, '-1.8': 0.959, '-1.7': 0.95, '-1.6': 0.94, '-1.5': 0.928, '-1.4': 0.914, '-1.3': 0.898, '-1.2': 0.88, '-1.1': 0.86, '-1.0': 0.837, '-0.9': 0.812, '-0.8': 0.785, '-0.7': 0.755, '-0.6': 0.723, '-0.5': 0.69, '-0.4': 0.654, '-0.3': 0.617, '-0.2': 0.579, '-0.1': 0.539, '0.0': 0.5, '0.1': 0.461, '0.2': 0.421, '0.3': 0.383, '0.4': 0.346, '0.5': 0.31, '0.6': 0.277, '0.7': 0.245, '0.8': 0.215, '0.9': 0.188, '1.0': 0.163, '1.1': 0.14, '1.2': 0.12, '1.3': 0.102, '1.4': 0.086, '1.5': 0.072, '1.6': 0.06, '1.7': 0.05, '1.8': 0.041, '1.9': 0.034, '2.0': 0.027, '2.1': 0.022, '2.2': 0.018, '2.3': 0.014, '2.4': 0.012, '2.5': 0.009, '2.6': 0.007, '2.7': 0.006, '2.8': 0.004, '2.9': 0.004, '3.0': 0.003}, {'-3.0': 0.997, '-2.9': 0.997, '-2.8': 0.996, '-2.7': 0.994, '-2.6': 0.993, '-2.5': 0.991, '-2.4': 0.989, '-2.3': 0.986, '-2.2': 0.982, '-2.1': 0.978, '-2.0': 0.973, '-1.9': 0.966, '-1.8': 0.959, '-1.7': 0.95, '-1.6': 0.94, '-1.5': 0.928, '-1.4': 0.914, '-1.3': 0.898, '-1.2': 0.88, '-1.1': 0.86, '-1.0': 0.837, '-0.9': 0.812, '-0.8': 0.785, '-0.7': 0.755, '-0.6': 0.723, '-0.5': 0.69, '-0.4': 0.654, '-0.3': 0.617, '-0.2': 0.579, '-0.1': 0.539, '0.0': 0.5, '0.1': 0.461, '0.2': 0.421, '0.3': 0.383, '0.4': 0.346, '0.5': 0.31, '0.6': 0.277, '0.7': 0.245, '0.8': 0.215, '0.9': 0.188, '1.0': 0.163, '1.1': 0.14, '1.2': 0.12, '1.3': 0.102, '1.4': 0.086, '1.5': 0.072, '1.6': 0.06, '1.7': 0.05, '1.8': 0.041, '1.9': 0.034, '2.0': 0.027, '2.1': 0.022, '2.2': 0.018, '2.3': 0.014, '2.4': 0.011, '2.5': 0.009, '2.6': 0.007, '2.7': 0.006, '2.8': 0.004, '2.9': 0.003, '3.0': 0.003}, {'-3.0': 0.997, '-2.9': 0.997, '-2.8': 0.996, '-2.7': 0.994, '-2.6': 0.993, '-2.5': 0.991, '-2.4': 0.989, '-2.3': 0.986, '-2.2': 0.982, '-2.1': 0.978, '-2.0': 0.973, '-1.9': 0.967, '-1.8': 0.959, '-1.7': 0.95, '-1.6': 0.94, '-1.5': 0.928, '-1.4': 0.914, '-1.3': 0.898, '-1.2': 0.88, '-1.1': 0.86, '-1.0': 0.837, '-0.9': 0.812, '-0.8': 0.785, '-0.7': 0.755, '-0.6': 0.724, '-0.5': 0.69, '-0.4': 0.654, '-0.3': 0.617, '-0.2': 0.579, '-0.1': 0.54, '0.0': 0.5, '0.1': 0.46, '0.2': 0.421, '0.3': 0.383, '0.4': 0.346, '0.5': 0.31, '0.6': 0.276, '0.7': 0.245, '0.8': 0.215, '0.9': 0.188, '1.0': 0.163, '1.1': 0.14, '1.2': 0.12, '1.3': 0.102, '1.4': 0.086, '1.5': 0.072, '1.6': 0.06, '1.7': 0.05, '1.8': 0.041, '1.9': 0.033, '2.0': 0.027, '2.1': 0.022, '2.2': 0.018, '2.3': 0.014, '2.4': 0.011, '2.5': 0.009, '2.6': 0.007, '2.7': 0.006, '2.8': 0.004, '2.9': 0.003, '3.0': 0.003}, {'-3.0': 0.997, '-2.9': 0.997, '-2.8': 0.996, '-2.7': 0.995, '-2.6': 0.993, '-2.5': 0.991, '-2.4': 0.989, '-2.3': 0.986, '-2.2': 0.982, '-2.1': 0.978, '-2.0': 0.973, '-1.9': 0.967, '-1.8': 0.959, '-1.7': 0.951, '-1.6': 0.94, '-1.5': 0.928, '-1.4': 0.914, '-1.3': 0.899, '-1.2': 0.881, '-1.1': 0.86, '-1.0': 0.838, '-0.9': 0.813, '-0.8': 0.785, '-0.7': 0.756, '-0.6': 0.724, '-0.5': 0.69, '-0.4': 0.654, '-0.3': 0.617, '-0.2': 0.579, '-0.1': 0.54, '0.0': 0.5, '0.1': 0.46, '0.2': 0.421, '0.3': 0.383, '0.4': 0.346, '0.5': 0.31, '0.6': 0.276, '0.7': 0.244, '0.8': 0.215, '0.9': 0.187, '1.0': 0.162, '1.1': 0.14, '1.2': 0.119, '1.3': 0.101, '1.4': 0.086, '1.5': 0.072, '1.6': 0.06, '1.7': 0.049, '1.8': 0.041, '1.9': 0.033, '2.0': 0.027, '2.1': 0.022, '2.2': 0.018, '2.3': 0.014, '2.4': 0.011, '2.5': 0.009, '2.6': 0.007, '2.7': 0.005, '2.8': 0.004, '2.9': 0.003, '3.0': 0.003}, {'-3.0': 0.997, '-2.9': 0.997, '-2.8': 0.996, '-2.7': 0.995, '-2.6': 0.993, '-2.5': 0.991, '-2.4': 0.989, '-2.3': 0.986, '-2.2': 0.983, '-2.1': 0.978, '-2.0': 0.973, '-1.9': 0.967, '-1.8': 0.959, '-1.7': 0.951, '-1.6': 0.94, '-1.5': 0.928, '-1.4': 0.915, '-1.3': 0.899, '-1.2': 0.881, '-1.1': 0.86, '-1.0': 0.838, '-0.9': 0.813, '-0.8': 0.785, '-0.7': 0.756, '-0.6': 0.724, '-0.5': 0.69, '-0.4': 0.654, '-0.3': 0.617, '-0.2': 0.579, '-0.1': 0.54, '0.0': 0.5, '0.1': 0.46, '0.2': 0.421, '0.3': 0.383, '0.4': 0.346, '0.5': 0.31, '0.6': 0.276, '0.7': 0.244, '0.8': 0.215, '0.9': 0.187, '1.0': 0.162, '1.1': 0.14, '1.2': 0.119, '1.3': 0.101, '1.4': 0.085, '1.5': 0.072, '1.6': 0.06, '1.7': 0.049, '1.8': 0.041, '1.9': 0.033, '2.0': 0.027, '2.1': 0.022, '2.2': 0.017, '2.3': 0.014, '2.4': 0.011, '2.5': 0.009, '2.6': 0.007, '2.7': 0.005, '2.8': 0.004, '2.9': 0.003, '3.0': 0.003}, {'-3.0': 0.997, '-2.9': 0.997, '-2.8': 0.996, '-2.7': 0.995, '-2.6': 0.993, '-2.5': 0.991, '-2.4': 0.989, '-2.3': 0.986, '-2.2': 0.983, '-2.1': 0.978, '-2.0': 0.973, '-1.9': 0.967, '-1.8': 0.96, '-1.7': 0.951, '-1.6': 0.941, '-1.5': 0.929, '-1.4': 0.915, '-1.3': 0.899, '-1.2': 0.881, '-1.1': 0.86, '-1.0': 0.838, '-0.9': 0.813, '-0.8': 0.785, '-0.7': 0.756, '-0.6': 0.724, '-0.5': 0.69, '-0.4': 0.654, '-0.3': 0.617, '-0.2': 0.579, '-0.1': 0.54, '0.0': 0.5, '0.1': 0.46, '0.2': 0.421, '0.3': 0.383, '0.4': 0.346, '0.5': 0.31, '0.6': 0.276, '0.7': 0.244, '0.8': 0.215, '0.9': 0.187, '1.0': 0.162, '1.1': 0.14, '1.2': 0.119, '1.3': 0.101, '1.4': 0.085, '1.5': 0.071, '1.6': 0.059, '1.7': 0.049, '1.8': 0.04, '1.9': 0.033, '2.0': 0.027, '2.1': 0.022, '2.2': 0.017, '2.3': 0.014, '2.4': 0.011, '2.5': 0.009, '2.6': 0.007, '2.7': 0.005, '2.8': 0.004, '2.9': 0.003, '3.0': 0.003}, {'-3.0': 0.998, '-2.9': 0.997, '-2.8': 0.996, '-2.7': 0.995, '-2.6': 0.993, '-2.5': 0.991, '-2.4': 0.989, '-2.3': 0.986, '-2.2': 0.983, '-2.1': 0.978, '-2.0': 0.973, '-1.9': 0.967, '-1.8': 0.96, '-1.7': 0.951, '-1.6': 0.941, '-1.5': 0.929, '-1.4': 0.915, '-1.3': 0.899, '-1.2': 0.881, '-1.1': 0.861, '-1.0': 0.838, '-0.9': 0.813, '-0.8': 0.785, '-0.7': 0.756, '-0.6': 0.724, '-0.5': 0.69, '-0.4': 0.654, '-0.3': 0.617, '-0.2': 0.579, '-0.1': 0.54, '0.0': 0.5, '0.1': 0.46, '0.2': 0.421, '0.3': 0.383, '0.4': 0.346, '0.5': 0.31, '0.6': 0.276, '0.7': 0.244, '0.8': 0.215, '0.9': 0.187, '1.0': 0.162, '1.1': 0.139, '1.2': 0.119, '1.3': 0.101, '1.4': 0.085, '1.5': 0.071, '1.6': 0.059, '1.7': 0.049, '1.8': 0.04, '1.9': 0.033, '2.0': 0.027, '2.1': 0.022, '2.2': 0.017, '2.3': 0.014, '2.4': 0.011, '2.5': 0.009, '2.6': 0.007, '2.7': 0.005, '2.8': 0.004, '2.9': 0.003, '3.0': 0.002}, {'-3.0': 0.998, '-2.9': 0.997, '-2.8': 0.996, '-2.7': 0.995, '-2.6': 0.993, '-2.5': 0.991, '-2.4': 0.989, '-2.3': 0.986, '-2.2': 0.983, '-2.1': 0.979, '-2.0': 0.973, '-1.9': 0.967, '-1.8': 0.96, '-1.7': 0.951, '-1.6': 0.941, '-1.5': 0.929, '-1.4': 0.915, '-1.3': 0.899, '-1.2': 0.881, '-1.1': 0.861, '-1.0': 0.838, '-0.9': 0.813, '-0.8': 0.786, '-0.7': 0.756, '-0.6': 0.724, '-0.5': 0.69, '-0.4': 0.654, '-0.3': 0.617, '-0.2': 0.579, '-0.1': 0.54, '0.0': 0.5, '0.1': 0.46, '0.2': 0.421, '0.3': 0.383, '0.4': 0.346, '0.5': 0.31, '0.6': 0.276, '0.7': 0.244, '0.8': 0.214, '0.9': 0.187, '1.0': 0.162, '1.1': 0.139, '1.2': 0.119, '1.3': 0.101, '1.4': 0.085, '1.5': 0.071, '1.6': 0.059, '1.7': 0.049, '1.8': 0.04, '1.9': 0.033, '2.0': 0.027, '2.1': 0.021, '2.2': 0.017, '2.3': 0.014, '2.4': 0.011, '2.5': 0.009, '2.6': 0.007, '2.7': 0.005, '2.8': 0.004, '2.9': 0.003, '3.0': 0.002}, {'-3.0': 0.998, '-2.9': 0.997, '-2.8': 0.996, '-2.7': 0.995, '-2.6': 0.993, '-2.5': 0.992, '-2.4': 0.989, '-2.3': 0.986, '-2.2': 0.983, '-2.1': 0.979, '-2.0': 0.974, '-1.9': 0.967, '-1.8': 0.96, '-1.7': 0.951, '-1.6': 0.941, '-1.5': 0.929, '-1.4': 0.915, '-1.3': 0.899, '-1.2': 0.881, '-1.1': 0.861, '-1.0': 0.838, '-0.9': 0.813, '-0.8': 0.786, '-0.7': 0.756, '-0.6': 0.724, '-0.5': 0.69, '-0.4': 0.654, '-0.3': 0.617, '-0.2': 0.579, '-0.1': 0.54, '0.0': 0.5, '0.1': 0.46, '0.2': 0.421, '0.3': 0.383, '0.4': 0.346, '0.5': 0.31, '0.6': 0.276, '0.7': 0.244, '0.8': 0.214, '0.9': 0.187, '1.0': 0.162, '1.1': 0.139, '1.2': 0.119, '1.3': 0.101, '1.4': 0.085, '1.5': 0.071, '1.6': 0.059, '1.7': 0.049, '1.8': 0.04, '1.9': 0.033, '2.0': 0.026, '2.1': 0.021, '2.2': 0.017, '2.3': 0.014, '2.4': 0.011, '2.5': 0.008, '2.6': 0.007, '2.7': 0.005, '2.8': 0.004, '2.9': 0.003, '3.0': 0.002}, {'-3.0': 0.998, '-2.9': 0.997, '-2.8': 0.996, '-2.7': 0.995, '-2.6': 0.993, '-2.5': 0.992, '-2.4': 0.989, '-2.3': 0.986, '-2.2': 0.983, '-2.1': 0.979, '-2.0': 0.974, '-1.9': 0.967, '-1.8': 0.96, '-1.7': 0.951, '-1.6': 0.941, '-1.5': 0.929, '-1.4': 0.915, '-1.3': 0.899, '-1.2': 0.881, '-1.1': 0.861, '-1.0': 0.838, '-0.9': 0.813, '-0.8': 0.786, '-0.7': 0.756, '-0.6': 0.724, '-0.5': 0.69, '-0.4': 0.654, '-0.3': 0.617, '-0.2': 0.579, '-0.1': 0.54, '0.0': 0.5, '0.1': 0.46, '0.2': 0.421, '0.3': 0.383, '0.4': 0.346, '0.5': 0.31, '0.6': 0.276, '0.7': 0.244, '0.8': 0.214, '0.9': 0.187, '1.0': 0.162, '1.1': 0.139, '1.2': 0.119, '1.3': 0.101, '1.4': 0.085, '1.5': 0.071, '1.6': 0.059, '1.7': 0.049, '1.8': 0.04, '1.9': 0.033, '2.0': 0.026, '2.1': 0.021, '2.2': 0.017, '2.3': 0.014, '2.4': 0.011, '2.5': 0.008, '2.6': 0.007, '2.7': 0.005, '2.8': 0.004, '2.9': 0.003, '3.0': 0.002}, {'-3.0': 0.998, '-2.9': 0.997, '-2.8': 0.996, '-2.7': 0.995, '-2.6': 0.993, '-2.5': 0.992, '-2.4': 0.989, '-2.3': 0.987, '-2.2': 0.983, '-2.1': 0.979, '-2.0': 0.974, '-1.9': 0.968, '-1.8': 0.96, '-1.7': 0.951, '-1.6': 0.941, '-1.5': 0.929, '-1.4': 0.915, '-1.3': 0.899, '-1.2': 0.881, '-1.1': 0.861, '-1.0': 0.838, '-0.9': 0.813, '-0.8': 0.786, '-0.7': 0.756, '-0.6': 0.724, '-0.5': 0.69, '-0.4': 0.654, '-0.3': 0.617, '-0.2': 0.579, '-0.1': 0.54, '0.0': 0.5, '0.1': 0.46, '0.2': 0.421, '0.3': 0.383, '0.4': 0.346, '0.5': 0.31, '0.6': 0.276, '0.7': 0.244, '0.8': 0.214, '0.9': 0.187, '1.0': 0.162, '1.1': 0.139, '1.2': 0.119, '1.3': 0.101, '1.4': 0.085, '1.5': 0.071, '1.6': 0.059, '1.7': 0.049, '1.8': 0.04, '1.9': 0.032, '2.0': 0.026, '2.1': 0.021, '2.2': 0.017, '2.3': 0.013, '2.4': 0.011, '2.5': 0.008, '2.6': 0.007, '2.7': 0.005, '2.8': 0.004, '2.9': 0.003, '3.0': 0.002}, {'-3.0': 0.998, '-2.9': 0.997, '-2.8': 0.996, '-2.7': 0.995, '-2.6': 0.994, '-2.5': 0.992, '-2.4': 0.989, '-2.3': 0.987, '-2.2': 0.983, '-2.1': 0.979, '-2.0': 0.974, '-1.9': 0.968, '-1.8': 0.96, '-1.7': 0.952, '-1.6': 0.941, '-1.5': 0.929, '-1.4': 0.915, '-1.3': 0.899, '-1.2': 0.881, '-1.1': 0.861, '-1.0': 0.838, '-0.9': 0.813, '-0.8': 0.786, '-0.7': 0.756, '-0.6': 0.724, '-0.5': 0.69, '-0.4': 0.654, '-0.3': 0.617, '-0.2': 0.579, '-0.1': 0.54, '0.0': 0.5, '0.1': 0.46, '0.2': 0.421, '0.3': 0.383, '0.4': 0.346, '0.5': 0.31, '0.6': 0.276, '0.7': 0.244, '0.8': 0.214, '0.9': 0.187, '1.0': 0.162, '1.1': 0.139, '1.2': 0.119, '1.3': 0.101, '1.4': 0.085, '1.5': 0.071, '1.6': 0.059, '1.7': 0.048, '1.8': 0.04, '1.9': 0.032, '2.0': 0.026, '2.1': 0.021, '2.2': 0.017, '2.3': 0.013, '2.4': 0.011, '2.5': 0.008, '2.6': 0.006, '2.7': 0.005, '2.8': 0.004, '2.9': 0.003, '3.0': 0.002}, {'-3.0': 0.998, '-2.9': 0.997, '-2.8': 0.996, '-2.7': 0.995, '-2.6': 0.994, '-2.5': 0.992, '-2.4': 0.989, '-2.3': 0.987, '-2.2': 0.983, '-2.1': 0.979, '-2.0': 0.974, '-1.9': 0.968, '-1.8': 0.96, '-1.7': 0.952, '-1.6': 0.941, '-1.5': 0.929, '-1.4': 0.915, '-1.3': 0.9, '-1.2': 0.881, '-1.1': 0.861, '-1.0': 0.838, '-0.9': 0.813, '-0.8': 0.786, '-0.7': 0.756, '-0.6': 0.724, '-0.5': 0.69, '-0.4': 0.654, '-0.3': 0.617, '-0.2': 0.579, '-0.1': 0.54, '0.0': 0.5, '0.1': 0.46, '0.2': 0.421, '0.3': 0.383, '0.4': 0.346, '0.5': 0.31, '0.6': 0.276, '0.7': 0.244, '0.8': 0.214, '0.9': 0.187, '1.0': 0.162, '1.1': 0.139, '1.2': 0.119, '1.3': 0.1, '1.4': 0.085, '1.5': 0.071, '1.6': 0.059, '1.7': 0.048, '1.8': 0.04, '1.9': 0.032, '2.0': 0.026, '2.1': 0.021, '2.2': 0.017, '2.3': 0.013, '2.4': 0.011, '2.5': 0.008, '2.6': 0.006, '2.7': 0.005, '2.8': 0.004, '2.9': 0.003, '3.0': 0.002}, {'-3.0': 0.998, '-2.9': 0.997, '-2.8': 0.996, '-2.7': 0.995, '-2.6': 0.994, '-2.5': 0.992, '-2.4': 0.99, '-2.3': 0.987, '-2.2': 0.983, '-2.1': 0.979, '-2.0': 0.974, '-1.9': 0.968, '-1.8': 0.96, '-1.7': 0.952, '-1.6': 0.941, '-1.5': 0.929, '-1.4': 0.916, '-1.3': 0.9, '-1.2': 0.882, '-1.1': 0.861, '-1.0': 0.838, '-0.9': 0.813, '-0.8': 0.786, '-0.7': 0.756, '-0.6': 0.724, '-0.5': 0.69, '-0.4': 0.654, '-0.3': 0.617, '-0.2': 0.579, '-0.1': 0.54, '0.0': 0.5, '0.1': 0.46, '0.2': 0.421, '0.3': 0.383, '0.4': 0.346, '0.5': 0.31, '0.6': 0.276, '0.7': 0.244, '0.8': 0.214, '0.9': 0.187, '1.0': 0.162, '1.1': 0.139, '1.2': 0.118, '1.3': 0.1, '1.4': 0.084, '1.5': 0.071, '1.6': 0.059, '1.7': 0.048, '1.8': 0.04, '1.9': 0.032, '2.0': 0.026, '2.1': 0.021, '2.2': 0.017, '2.3': 0.013, '2.4': 0.01, '2.5': 0.008, '2.6': 0.006, '2.7': 0.005, '2.8': 0.004, '2.9': 0.003, '3.0': 0.002}, {'-3.0': 0.998, '-2.9': 0.997, '-2.8': 0.996, '-2.7': 0.995, '-2.6': 0.994, '-2.5': 0.992, '-2.4': 0.99, '-2.3': 0.987, '-2.2': 0.983, '-2.1': 0.979, '-2.0': 0.974, '-1.9': 0.968, '-1.8': 0.961, '-1.7': 0.952, '-1.6': 0.942, '-1.5': 0.93, '-1.4': 0.916, '-1.3': 0.9, '-1.2': 0.882, '-1.1': 0.861, '-1.0': 0.839, '-0.9': 0.813, '-0.8': 0.786, '-0.7': 0.756, '-0.6': 0.724, '-0.5': 0.69, '-0.4': 0.654, '-0.3': 0.617, '-0.2': 0.579, '-0.1': 0.54, '0.0': 0.5, '0.1': 0.46, '0.2': 0.421, '0.3': 0.383, '0.4': 0.346, '0.5': 0.31, '0.6': 0.276, '0.7': 0.244, '0.8': 0.214, '0.9': 0.187, '1.0': 0.161, '1.1': 0.139, '1.2': 0.118, '1.3': 0.1, '1.4': 0.084, '1.5': 0.07, '1.6': 0.058, '1.7': 0.048, '1.8': 0.039, '1.9': 0.032, '2.0': 0.026, '2.1': 0.021, '2.2': 0.017, '2.3': 0.013, '2.4': 0.01, '2.5': 0.008, '2.6': 0.006, '2.7': 0.005, '2.8': 0.004, '2.9': 0.003, '3.0': 0.002}, {'-3.0': 0.998, '-2.9': 0.997, '-2.8': 0.996, '-2.7': 0.995, '-2.6': 0.994, '-2.5': 0.992, '-2.4': 0.99, '-2.3': 0.987, '-2.2': 0.983, '-2.1': 0.979, '-2.0': 0.974, '-1.9': 0.968, '-1.8': 0.961, '-1.7': 0.952, '-1.6': 0.942, '-1.5': 0.93, '-1.4': 0.916, '-1.3': 0.9, '-1.2': 0.882, '-1.1': 0.861, '-1.0': 0.839, '-0.9': 0.813, '-0.8': 0.786, '-0.7': 0.756, '-0.6': 0.724, '-0.5': 0.69, '-0.4': 0.654, '-0.3': 0.617, '-0.2': 0.579, '-0.1': 0.54, '0.0': 0.5, '0.1': 0.46, '0.2': 0.421, '0.3': 0.383, '0.4': 0.346, '0.5': 0.31, '0.6': 0.276, '0.7': 0.244, '0.8': 0.214, '0.9': 0.187, '1.0': 0.161, '1.1': 0.139, '1.2': 0.118, '1.3': 0.1, '1.4': 0.084, '1.5': 0.07, '1.6': 0.058, '1.7': 0.048, '1.8': 0.039, '1.9': 0.032, '2.0': 0.026, '2.1': 0.021, '2.2': 0.017, '2.3': 0.013, '2.4': 0.01, '2.5': 0.008, '2.6': 0.006, '2.7': 0.005, '2.8': 0.004, '2.9': 0.003, '3.0': 0.002}, {'-3.0': 0.998, '-2.9': 0.997, '-2.8': 0.996, '-2.7': 0.995, '-2.6': 0.994, '-2.5': 0.992, '-2.4': 0.99, '-2.3': 0.987, '-2.2': 0.984, '-2.1': 0.979, '-2.0': 0.974, '-1.9': 0.968, '-1.8': 0.961, '-1.7': 0.952, '-1.6': 0.942, '-1.5': 0.93, '-1.4': 0.916, '-1.3': 0.9, '-1.2': 0.882, '-1.1': 0.861, '-1.0': 0.839, '-0.9': 0.814, '-0.8': 0.786, '-0.7': 0.756, '-0.6': 0.724, '-0.5': 0.69, '-0.4': 0.654, '-0.3': 0.617, '-0.2': 0.579, '-0.1': 0.54, '0.0': 0.5, '0.1': 0.46, '0.2': 0.421, '0.3': 0.383, '0.4': 0.346, '0.5': 0.31, '0.6': 0.276, '0.7': 0.244, '0.8': 0.214, '0.9': 0.186, '1.0': 0.161, '1.1': 0.139, '1.2': 0.118, '1.3': 0.1, '1.4': 0.084, '1.5': 0.07, '1.6': 0.058, '1.7': 0.048, '1.8': 0.039, '1.9': 0.032, '2.0': 0.026, '2.1': 0.021, '2.2': 0.016, '2.3': 0.013, '2.4': 0.01, '2.5': 0.008, '2.6': 0.006, '2.7': 0.005, '2.8': 0.004, '2.9': 0.003, '3.0': 0.002}, {'-3.0': 0.998, '-2.9': 0.997, '-2.8': 0.996, '-2.7': 0.995, '-2.6': 0.994, '-2.5': 0.992, '-2.4': 0.99, '-2.3': 0.987, '-2.2': 0.984, '-2.1': 0.979, '-2.0': 0.974, '-1.9': 0.968, '-1.8': 0.961, '-1.7': 0.952, '-1.6': 0.942, '-1.5': 0.93, '-1.4': 0.916, '-1.3': 0.9, '-1.2': 0.882, '-1.1': 0.861, '-1.0': 0.839, '-0.9': 0.814, '-0.8': 0.786, '-0.7': 0.756, '-0.6': 0.724, '-0.5': 0.69, '-0.4': 0.654, '-0.3': 0.617, '-0.2': 0.579, '-0.1': 0.54, '0.0': 0.5, '0.1': 0.46, '0.2': 0.421, '0.3': 0.383, '0.4': 0.346, '0.5': 0.31, '0.6': 0.276, '0.7': 0.244, '0.8': 0.214, '0.9': 0.186, '1.0': 0.161, '1.1': 0.139, '1.2': 0.118, '1.3': 0.1, '1.4': 0.084, '1.5': 0.07, '1.6': 0.058, '1.7': 0.048, '1.8': 0.039, '1.9': 0.032, '2.0': 0.026, '2.1': 0.021, '2.2': 0.016, '2.3': 0.013, '2.4': 0.01, '2.5': 0.008, '2.6': 0.006, '2.7': 0.005, '2.8': 0.004, '2.9': 0.003, '3.0': 0.002}, {'-3.0': 0.998, '-2.9': 0.997, '-2.8': 0.996, '-2.7': 0.995, '-2.6': 0.994, '-2.5': 0.992, '-2.4': 0.99, '-2.3': 0.987, '-2.2': 0.984, '-2.1': 0.979, '-2.0': 0.974, '-1.9': 0.968, '-1.8': 0.961, '-1.7': 0.952, '-1.6': 0.942, '-1.5': 0.93, '-1.4': 0.916, '-1.3': 0.9, '-1.2': 0.882, '-1.1': 0.862, '-1.0': 0.839, '-0.9': 0.814, '-0.8': 0.786, '-0.7': 0.756, '-0.6': 0.724, '-0.5': 0.69, '-0.4': 0.655, '-0.3': 0.617, '-0.2': 0.579, '-0.1': 0.54, '0.0': 0.5, '0.1': 0.46, '0.2': 0.421, '0.3': 0.383, '0.4': 0.345, '0.5': 0.31, '0.6': 0.276, '0.7': 0.244, '0.8': 0.214, '0.9': 0.186, '1.0': 0.161, '1.1': 0.138, '1.2': 0.118, '1.3': 0.1, '1.4': 0.084, '1.5': 0.07, '1.6': 0.058, '1.7': 0.048, '1.8': 0.039, '1.9': 0.032, '2.0': 0.026, '2.1': 0.021, '2.2': 0.016, '2.3': 0.013, '2.4': 0.01, '2.5': 0.008, '2.6': 0.006, '2.7': 0.005, '2.8': 0.004, '2.9': 0.003, '3.0': 0.002}, {'-3.0': 0.998, '-2.9': 0.997, '-2.8': 0.996, '-2.7': 0.995, '-2.6': 0.994, '-2.5': 0.992, '-2.4': 0.99, '-2.3': 0.987, '-2.2': 0.984, '-2.1': 0.979, '-2.0': 0.974, '-1.9': 0.968, '-1.8': 0.961, '-1.7': 0.952, '-1.6': 0.942, '-1.5': 0.93, '-1.4': 0.916, '-1.3': 0.9, '-1.2': 0.882, '-1.1': 0.862, '-1.0': 0.839, '-0.9': 0.814, '-0.8': 0.786, '-0.7': 0.756, '-0.6': 0.724, '-0.5': 0.69, '-0.4': 0.655, '-0.3': 0.617, '-0.2': 0.579, '-0.1': 0.54, '0.0': 0.5, '0.1': 0.46, '0.2': 0.421, '0.3': 0.383, '0.4': 0.345, '0.5': 0.31, '0.6': 0.276, '0.7': 0.244, '0.8': 0.214, '0.9': 0.186, '1.0': 0.161, '1.1': 0.138, '1.2': 0.118, '1.3': 0.1, '1.4': 0.084, '1.5': 0.07, '1.6': 0.058, '1.7': 0.048, '1.8': 0.039, '1.9': 0.032, '2.0': 0.026, '2.1': 0.021, '2.2': 0.016, '2.3': 0.013, '2.4': 0.01, '2.5': 0.008, '2.6': 0.006, '2.7': 0.005, '2.8': 0.004, '2.9': 0.003, '3.0': 0.002}, {'-3.0': 0.998, '-2.9': 0.997, '-2.8': 0.996, '-2.7': 0.995, '-2.6': 0.994, '-2.5': 0.992, '-2.4': 0.99, '-2.3': 0.987, '-2.2': 0.984, '-2.1': 0.98, '-2.0': 0.974, '-1.9': 0.968, '-1.8': 0.961, '-1.7': 0.952, '-1.6': 0.942, '-1.5': 0.93, '-1.4': 0.916, '-1.3': 0.9, '-1.2': 0.882, '-1.1': 0.862, '-1.0': 0.839, '-0.9': 0.814, '-0.8': 0.786, '-0.7': 0.756, '-0.6': 0.724, '-0.5': 0.69, '-0.4': 0.655, '-0.3': 0.617, '-0.2': 0.579, '-0.1': 0.54, '0.0': 0.5, '0.1': 0.46, '0.2': 0.421, '0.3': 0.383, '0.4': 0.345, '0.5': 0.31, '0.6': 0.276, '0.7': 0.244, '0.8': 0.214, '0.9': 0.186, '1.0': 0.161, '1.1': 0.138, '1.2': 0.118, '1.3': 0.1, '1.4': 0.084, '1.5': 0.07, '1.6': 0.058, '1.7': 0.048, '1.8': 0.039, '1.9': 0.032, '2.0': 0.026, '2.1': 0.02, '2.2': 0.016, '2.3': 0.013, '2.4': 0.01, '2.5': 0.008, '2.6': 0.006, '2.7': 0.005, '2.8': 0.004, '2.9': 0.003, '3.0': 0.002}, {'-3.0': 0.998, '-2.9': 0.997, '-2.8': 0.996, '-2.7': 0.995, '-2.6': 0.994, '-2.5': 0.992, '-2.4': 0.99, '-2.3': 0.987, '-2.2': 0.984, '-2.1': 0.98, '-2.0': 0.975, '-1.9': 0.968, '-1.8': 0.961, '-1.7': 0.952, '-1.6': 0.942, '-1.5': 0.93, '-1.4': 0.916, '-1.3': 0.9, '-1.2': 0.882, '-1.1': 0.862, '-1.0': 0.839, '-0.9': 0.814, '-0.8': 0.786, '-0.7': 0.756, '-0.6': 0.724, '-0.5': 0.69, '-0.4': 0.655, '-0.3': 0.617, '-0.2': 0.579, '-0.1': 0.54, '0.0': 0.5, '0.1': 0.46, '0.2': 0.421, '0.3': 0.383, '0.4': 0.345, '0.5': 0.31, '0.6': 0.276, '0.7': 0.244, '0.8': 0.214, '0.9': 0.186, '1.0': 0.161, '1.1': 0.138, '1.2': 0.118, '1.3': 0.1, '1.4': 0.084, '1.5': 0.07, '1.6': 0.058, '1.7': 0.048, '1.8': 0.039, '1.9': 0.032, '2.0': 0.025, '2.1': 0.02, '2.2': 0.016, '2.3': 0.013, '2.4': 0.01, '2.5': 0.008, '2.6': 0.006, '2.7': 0.005, '2.8': 0.004, '2.9': 0.003, '3.0': 0.002}, {'-3.0': 0.998, '-2.9': 0.997, '-2.8': 0.996, '-2.7': 0.995, '-2.6': 0.994, '-2.5': 0.992, '-2.4': 0.99, '-2.3': 0.987, '-2.2': 0.984, '-2.1': 0.98, '-2.0': 0.975, '-1.9': 0.968, '-1.8': 0.961, '-1.7': 0.952, '-1.6': 0.942, '-1.5': 0.93, '-1.4': 0.916, '-1.3': 0.9, '-1.2': 0.882, '-1.1': 0.862, '-1.0': 0.839, '-0.9': 0.814, '-0.8': 0.786, '-0.7': 0.756, '-0.6': 0.724, '-0.5': 0.69, '-0.4': 0.655, '-0.3': 0.617, '-0.2': 0.579, '-0.1': 0.54, '0.0': 0.5, '0.1': 0.46, '0.2': 0.421, '0.3': 0.383, '0.4': 0.345, '0.5': 0.31, '0.6': 0.276, '0.7': 0.244, '0.8': 0.214, '0.9': 0.186, '1.0': 0.161, '1.1': 0.138, '1.2': 0.118, '1.3': 0.1, '1.4': 0.084, '1.5': 0.07, '1.6': 0.058, '1.7': 0.048, '1.8': 0.039, '1.9': 0.032, '2.0': 0.025, '2.1': 0.02, '2.2': 0.016, '2.3': 0.013, '2.4': 0.01, '2.5': 0.008, '2.6': 0.006, '2.7': 0.005, '2.8': 0.004, '2.9': 0.003, '3.0': 0.002}, {'-3.0': 0.998, '-2.9': 0.997, '-2.8': 0.996, '-2.7': 0.995, '-2.6': 0.994, '-2.5': 0.992, '-2.4': 0.99, '-2.3': 0.987, '-2.2': 0.984, '-2.1': 0.98, '-2.0': 0.975, '-1.9': 0.969, '-1.8': 0.961, '-1.7': 0.952, '-1.6': 0.942, '-1.5': 0.93, '-1.4': 0.916, '-1.3': 0.9, '-1.2': 0.882, '-1.1': 0.862, '-1.0': 0.839, '-0.9': 0.814, '-0.8': 0.786, '-0.7': 0.756, '-0.6': 0.724, '-0.5': 0.69, '-0.4': 0.655, '-0.3': 0.617, '-0.2': 0.579, '-0.1': 0.54, '0.0': 0.5, '0.1': 0.46, '0.2': 0.421, '0.3': 0.383, '0.4': 0.345, '0.5': 0.31, '0.6': 0.276, '0.7': 0.244, '0.8': 0.214, '0.9': 0.186, '1.0': 0.161, '1.1': 0.138, '1.2': 0.118, '1.3': 0.1, '1.4': 0.084, '1.5': 0.07, '1.6': 0.058, '1.7': 0.048, '1.8': 0.039, '1.9': 0.031, '2.0': 0.025, '2.1': 0.02, '2.2': 0.016, '2.3': 0.013, '2.4': 0.01, '2.5': 0.008, '2.6': 0.006, '2.7': 0.005, '2.8': 0.004, '2.9': 0.003, '3.0': 0.002}, {'-3.0': 0.998, '-2.9': 0.997, '-2.8': 0.996, '-2.7': 0.995, '-2.6': 0.994, '-2.5': 0.992, '-2.4': 0.99, '-2.3': 0.987, '-2.2': 0.984, '-2.1': 0.98, '-2.0': 0.975, '-1.9': 0.969, '-1.8': 0.961, '-1.7': 0.953, '-1.6': 0.942, '-1.5': 0.93, '-1.4': 0.916, '-1.3': 0.9, '-1.2': 0.882, '-1.1': 0.862, '-1.0': 0.839, '-0.9': 0.814, '-0.8': 0.786, '-0.7': 0.757, '-0.6': 0.724, '-0.5': 0.69, '-0.4': 0.655, '-0.3': 0.617, '-0.2': 0.579, '-0.1': 0.54, '0.0': 0.5, '0.1': 0.46, '0.2': 0.421, '0.3': 0.383, '0.4': 0.345, '0.5': 0.31, '0.6': 0.276, '0.7': 0.243, '0.8': 0.214, '0.9': 0.186, '1.0': 0.161, '1.1': 0.138, '1.2': 0.118, '1.3': 0.1, '1.4': 0.084, '1.5': 0.07, '1.6': 0.058, '1.7': 0.047, '1.8': 0.039, '1.9': 0.031, '2.0': 0.025, '2.1': 0.02, '2.2': 0.016, '2.3': 0.013, '2.4': 0.01, '2.5': 0.008, '2.6': 0.006, '2.7': 0.005, '2.8': 0.004, '2.9': 0.003, '3.0': 0.002}, {'-3.0': 0.998, '-2.9': 0.997, '-2.8': 0.996, '-2.7': 0.995, '-2.6': 0.994, '-2.5': 0.992, '-2.4': 0.99, '-2.3': 0.987, '-2.2': 0.984, '-2.1': 0.98, '-2.0': 0.975, '-1.9': 0.969, '-1.8': 0.961, '-1.7': 0.953, '-1.6': 0.942, '-1.5': 0.93, '-1.4': 0.916, '-1.3': 0.9, '-1.2': 0.882, '-1.1': 0.862, '-1.0': 0.839, '-0.9': 0.814, '-0.8': 0.786, '-0.7': 0.757, '-0.6': 0.724, '-0.5': 0.69, '-0.4': 0.655, '-0.3': 0.617, '-0.2': 0.579, '-0.1': 0.54, '0.0': 0.5, '0.1': 0.46, '0.2': 0.421, '0.3': 0.383, '0.4': 0.345, '0.5': 0.31, '0.6': 0.276, '0.7': 0.243, '0.8': 0.214, '0.9': 0.186, '1.0': 0.161, '1.1': 0.138, '1.2': 0.118, '1.3': 0.1, '1.4': 0.084, '1.5': 0.07, '1.6': 0.058, '1.7': 0.047, '1.8': 0.039, '1.9': 0.031, '2.0': 0.025, '2.1': 0.02, '2.2': 0.016, '2.3': 0.013, '2.4': 0.01, '2.5': 0.008, '2.6': 0.006, '2.7': 0.005, '2.8': 0.004, '2.9': 0.003, '3.0': 0.002}, {'-3.0': 0.998, '-2.9': 0.997, '-2.8': 0.996, '-2.7': 0.995, '-2.6': 0.994, '-2.5': 0.992, '-2.4': 0.99, '-2.3': 0.987, '-2.2': 0.984, '-2.1': 0.98, '-2.0': 0.975, '-1.9': 0.969, '-1.8': 0.961, '-1.7': 0.953, '-1.6': 0.942, '-1.5': 0.93, '-1.4': 0.916, '-1.3': 0.9, '-1.2': 0.882, '-1.1': 0.862, '-1.0': 0.839, '-0.9': 0.814, '-0.8': 0.786, '-0.7': 0.757, '-0.6': 0.725, '-0.5': 0.69, '-0.4': 0.655, '-0.3': 0.617, '-0.2': 0.579, '-0.1': 0.54, '0.0': 0.5, '0.1': 0.46, '0.2': 0.421, '0.3': 0.383, '0.4': 0.345, '0.5': 0.31, '0.6': 0.275, '0.7': 0.243, '0.8': 0.214, '0.9': 0.186, '1.0': 0.161, '1.1': 0.138, '1.2': 0.118, '1.3': 0.1, '1.4': 0.084, '1.5': 0.07, '1.6': 0.058, '1.7': 0.047, '1.8': 0.039, '1.9': 0.031, '2.0': 0.025, '2.1': 0.02, '2.2': 0.016, '2.3': 0.013, '2.4': 0.01, '2.5': 0.008, '2.6': 0.006, '2.7': 0.005, '2.8': 0.004, '2.9': 0.003, '3.0': 0.002}, {'-3.0': 0.998, '-2.9': 0.997, '-2.8': 0.997, '-2.7': 0.995, '-2.6': 0.994, '-2.5': 0.992, '-2.4': 0.99, '-2.3': 0.987, '-2.2': 0.984, '-2.1': 0.98, '-2.0': 0.975, '-1.9': 0.969, '-1.8': 0.961, '-1.7': 0.953, '-1.6': 0.942, '-1.5': 0.93, '-1.4': 0.916, '-1.3': 0.901, '-1.2': 0.882, '-1.1': 0.862, '-1.0': 0.839, '-0.9': 0.814, '-0.8': 0.786, '-0.7': 0.757, '-0.6': 0.725, '-0.5': 0.69, '-0.4': 0.655, '-0.3': 0.617, '-0.2': 0.579, '-0.1': 0.54, '0.0': 0.5, '0.1': 0.46, '0.2': 0.421, '0.3': 0.383, '0.4': 0.345, '0.5': 0.31, '0.6': 0.275, '0.7': 0.243, '0.8': 0.214, '0.9': 0.186, '1.0': 0.161, '1.1': 0.138, '1.2': 0.118, '1.3': 0.099, '1.4': 0.084, '1.5': 0.07, '1.6': 0.058, '1.7': 0.047, '1.8': 0.039, '1.9': 0.031, '2.0': 0.025, '2.1': 0.02, '2.2': 0.016, '2.3': 0.013, '2.4': 0.01, '2.5': 0.008, '2.6': 0.006, '2.7': 0.005, '2.8': 0.003, '2.9': 0.003, '3.0': 0.002}, {'-3.0': 0.998, '-2.9': 0.997, '-2.8': 0.997, '-2.7': 0.995, '-2.6': 0.994, '-2.5': 0.992, '-2.4': 0.99, '-2.3': 0.987, '-2.2': 0.984, '-2.1': 0.98, '-2.0': 0.975, '-1.9': 0.969, '-1.8': 0.961, '-1.7': 0.953, '-1.6': 0.942, '-1.5': 0.93, '-1.4': 0.917, '-1.3': 0.901, '-1.2': 0.882, '-1.1': 0.862, '-1.0': 0.839, '-0.9': 0.814, '-0.8': 0.786, '-0.7': 0.757, '-0.6': 0.725, '-0.5': 0.691, '-0.4': 0.655, '-0.3': 0.617, '-0.2': 0.579, '-0.1': 0.54, '0.0': 0.5, '0.1': 0.46, '0.2': 0.421, '0.3': 0.383, '0.4': 0.345, '0.5': 0.309, '0.6': 0.275, '0.7': 0.243, '0.8': 0.214, '0.9': 0.186, '1.0': 0.161, '1.1': 0.138, '1.2': 0.118, '1.3': 0.099, '1.4': 0.083, '1.5': 0.07, '1.6': 0.058, '1.7': 0.047, '1.8': 0.039, '1.9': 0.031, '2.0': 0.025, '2.1': 0.02, '2.2': 0.016, '2.3': 0.013, '2.4': 0.01, '2.5': 0.008, '2.6': 0.006, '2.7': 0.005, '2.8': 0.003, '2.9': 0.003, '3.0': 0.002}, {'-3.0': 0.998, '-2.9': 0.997, '-2.8': 0.997, '-2.7': 0.995, '-2.6': 0.994, '-2.5': 0.992, '-2.4': 0.99, '-2.3': 0.987, '-2.2': 0.984, '-2.1': 0.98, '-2.0': 0.975, '-1.9': 0.969, '-1.8': 0.961, '-1.7': 0.953, '-1.6': 0.942, '-1.5': 0.93, '-1.4': 0.917, '-1.3': 0.901, '-1.2': 0.882, '-1.1': 0.862, '-1.0': 0.839, '-0.9': 0.814, '-0.8': 0.787, '-0.7': 0.757, '-0.6': 0.725, '-0.5': 0.691, '-0.4': 0.655, '-0.3': 0.617, '-0.2': 0.579, '-0.1': 0.54, '0.0': 0.5, '0.1': 0.46, '0.2': 0.421, '0.3': 0.383, '0.4': 0.345, '0.5': 0.309, '0.6': 0.275, '0.7': 0.243, '0.8': 0.213, '0.9': 0.186, '1.0': 0.161, '1.1': 0.138, '1.2': 0.118, '1.3': 0.099, '1.4': 0.083, '1.5': 0.07, '1.6': 0.058, '1.7': 0.047, '1.8': 0.039, '1.9': 0.031, '2.0': 0.025, '2.1': 0.02, '2.2': 0.016, '2.3': 0.013, '2.4': 0.01, '2.5': 0.008, '2.6': 0.006, '2.7': 0.005, '2.8': 0.003, '2.9': 0.003, '3.0': 0.002}, {'-3.0': 0.998, '-2.9': 0.997, '-2.8': 0.997, '-2.7': 0.995, '-2.6': 0.994, '-2.5': 0.992, '-2.4': 0.99, '-2.3': 0.987, '-2.2': 0.984, '-2.1': 0.98, '-2.0': 0.975, '-1.9': 0.969, '-1.8': 0.962, '-1.7': 0.953, '-1.6': 0.943, '-1.5': 0.931, '-1.4': 0.917, '-1.3': 0.901, '-1.2': 0.883, '-1.1': 0.862, '-1.0': 0.839, '-0.9': 0.814, '-0.8': 0.787, '-0.7': 0.757, '-0.6': 0.725, '-0.5': 0.691, '-0.4': 0.655, '-0.3': 0.617, '-0.2': 0.579, '-0.1': 0.54, '0.0': 0.5, '0.1': 0.46, '0.2': 0.421, '0.3': 0.383, '0.4': 0.345, '0.5': 0.309, '0.6': 0.275, '0.7': 0.243, '0.8': 0.213, '0.9': 0.186, '1.0': 0.161, '1.1': 0.138, '1.2': 0.117, '1.3': 0.099, '1.4': 0.083, '1.5': 0.069, '1.6': 0.057, '1.7': 0.047, '1.8': 0.038, '1.9': 0.031, '2.0': 0.025, '2.1': 0.02, '2.2': 0.016, '2.3': 0.013, '2.4': 0.01, '2.5': 0.008, '2.6': 0.006, '2.7': 0.005, '2.8': 0.003, '2.9': 0.003, '3.0': 0.002}, {'-3.0': 0.998, '-2.9': 0.997, '-2.8': 0.997, '-2.7': 0.996, '-2.6': 0.994, '-2.5': 0.992, '-2.4': 0.99, '-2.3': 0.988, '-2.2': 0.984, '-2.1': 0.98, '-2.0': 0.975, '-1.9': 0.969, '-1.8': 0.962, '-1.7': 0.953, '-1.6': 0.943, '-1.5': 0.931, '-1.4': 0.917, '-1.3': 0.901, '-1.2': 0.883, '-1.1': 0.862, '-1.0': 0.839, '-0.9': 0.814, '-0.8': 0.787, '-0.7': 0.757, '-0.6': 0.725, '-0.5': 0.691, '-0.4': 0.655, '-0.3': 0.617, '-0.2': 0.579, '-0.1': 0.54, '0.0': 0.5, '0.1': 0.46, '0.2': 0.421, '0.3': 0.383, '0.4': 0.345, '0.5': 0.309, '0.6': 0.275, '0.7': 0.243, '0.8': 0.213, '0.9': 0.186, '1.0': 0.161, '1.1': 0.138, '1.2': 0.117, '1.3': 0.099, '1.4': 0.083, '1.5': 0.069, '1.6': 0.057, '1.7': 0.047, '1.8': 0.038, '1.9': 0.031, '2.0': 0.025, '2.1': 0.02, '2.2': 0.016, '2.3': 0.012, '2.4': 0.01, '2.5': 0.008, '2.6': 0.006, '2.7': 0.004, '2.8': 0.003, '2.9': 0.003, '3.0': 0.002}, {'-3.0': 0.998, '-2.9': 0.997, '-2.8': 0.997, '-2.7': 0.996, '-2.6': 0.994, '-2.5': 0.992, '-2.4': 0.99, '-2.3': 0.988, '-2.2': 0.984, '-2.1': 0.98, '-2.0': 0.975, '-1.9': 0.969, '-1.8': 0.962, '-1.7': 0.953, '-1.6': 0.943, '-1.5': 0.931, '-1.4': 0.917, '-1.3': 0.901, '-1.2': 0.883, '-1.1': 0.862, '-1.0': 0.839, '-0.9': 0.814, '-0.8': 0.787, '-0.7': 0.757, '-0.6': 0.725, '-0.5': 0.691, '-0.4': 0.655, '-0.3': 0.617, '-0.2': 0.579, '-0.1': 0.54, '0.0': 0.5, '0.1': 0.46, '0.2': 0.421, '0.3': 0.383, '0.4': 0.345, '0.5': 0.309, '0.6': 0.275, '0.7': 0.243, '0.8': 0.213, '0.9': 0.186, '1.0': 0.161, '1.1': 0.138, '1.2': 0.117, '1.3': 0.099, '1.4': 0.083, '1.5': 0.069, '1.6': 0.057, '1.7': 0.047, '1.8': 0.038, '1.9': 0.031, '2.0': 0.025, '2.1': 0.02, '2.2': 0.016, '2.3': 0.012, '2.4': 0.01, '2.5': 0.008, '2.6': 0.006, '2.7': 0.004, '2.8': 0.003, '2.9': 0.003, '3.0': 0.002}, {'-3.0': 0.998, '-2.9': 0.997, '-2.8': 0.997, '-2.7': 0.996, '-2.6': 0.994, '-2.5': 0.992, '-2.4': 0.99, '-2.3': 0.988, '-2.2': 0.984, '-2.1': 0.98, '-2.0': 0.975, '-1.9': 0.969, '-1.8': 0.962, '-1.7': 0.953, '-1.6': 0.943, '-1.5': 0.931, '-1.4': 0.917, '-1.3': 0.901, '-1.2': 0.883, '-1.1': 0.862, '-1.0': 0.839, '-0.9': 0.814, '-0.8': 0.787, '-0.7': 0.757, '-0.6': 0.725, '-0.5': 0.691, '-0.4': 0.655, '-0.3': 0.617, '-0.2': 0.579, '-0.1': 0.54, '0.0': 0.5, '0.1': 0.46, '0.2': 0.421, '0.3': 0.383, '0.4': 0.345, '0.5': 0.309, '0.6': 0.275, '0.7': 0.243, '0.8': 0.213, '0.9': 0.186, '1.0': 0.161, '1.1': 0.138, '1.2': 0.117, '1.3': 0.099, '1.4': 0.083, '1.5': 0.069, '1.6': 0.057, '1.7': 0.047, '1.8': 0.038, '1.9': 0.031, '2.0': 0.025, '2.1': 0.02, '2.2': 0.016, '2.3': 0.012, '2.4': 0.01, '2.5': 0.008, '2.6': 0.006, '2.7': 0.004, '2.8': 0.003, '2.9': 0.003, '3.0': 0.002}, {'-3.0': 0.998, '-2.9': 0.997, '-2.8': 0.997, '-2.7': 0.996, '-2.6': 0.994, '-2.5': 0.992, '-2.4': 0.99, '-2.3': 0.988, '-2.2': 0.984, '-2.1': 0.98, '-2.0': 0.975, '-1.9': 0.969, '-1.8': 0.962, '-1.7': 0.953, '-1.6': 0.943, '-1.5': 0.931, '-1.4': 0.917, '-1.3': 0.901, '-1.2': 0.883, '-1.1': 0.862, '-1.0': 0.839, '-0.9': 0.814, '-0.8': 0.787, '-0.7': 0.757, '-0.6': 0.725, '-0.5': 0.691, '-0.4': 0.655, '-0.3': 0.617, '-0.2': 0.579, '-0.1': 0.54, '0.0': 0.5, '0.1': 0.46, '0.2': 0.421, '0.3': 0.383, '0.4': 0.345, '0.5': 0.309, '0.6': 0.275, '0.7': 0.243, '0.8': 0.213, '0.9': 0.186, '1.0': 0.161, '1.1': 0.138, '1.2': 0.117, '1.3': 0.099, '1.4': 0.083, '1.5': 0.069, '1.6': 0.057, '1.7': 0.047, '1.8': 0.038, '1.9': 0.031, '2.0': 0.025, '2.1': 0.02, '2.2': 0.016, '2.3': 0.012, '2.4': 0.01, '2.5': 0.008, '2.6': 0.006, '2.7': 0.004, '2.8': 0.003, '2.9': 0.003, '3.0': 0.002}, {'-3.0': 0.998, '-2.9': 0.997, '-2.8': 0.997, '-2.7': 0.996, '-2.6': 0.994, '-2.5': 0.993, '-2.4': 0.99, '-2.3': 0.988, '-2.2': 0.984, '-2.1': 0.98, '-2.0': 0.975, '-1.9': 0.969, '-1.8': 0.962, '-1.7': 0.953, '-1.6': 0.943, '-1.5': 0.931, '-1.4': 0.917, '-1.3': 0.901, '-1.2': 0.883, '-1.1': 0.862, '-1.0': 0.839, '-0.9': 0.814, '-0.8': 0.787, '-0.7': 0.757, '-0.6': 0.725, '-0.5': 0.691, '-0.4': 0.655, '-0.3': 0.617, '-0.2': 0.579, '-0.1': 0.54, '0.0': 0.5, '0.1': 0.46, '0.2': 0.421, '0.3': 0.383, '0.4': 0.345, '0.5': 0.309, '0.6': 0.275, '0.7': 0.243, '0.8': 0.213, '0.9': 0.186, '1.0': 0.161, '1.1': 0.138, '1.2': 0.117, '1.3': 0.099, '1.4': 0.083, '1.5': 0.069, '1.6': 0.057, '1.7': 0.047, '1.8': 0.038, '1.9': 0.031, '2.0': 0.025, '2.1': 0.02, '2.2': 0.016, '2.3': 0.012, '2.4': 0.01, '2.5': 0.007, '2.6': 0.006, '2.7': 0.004, '2.8': 0.003, '2.9': 0.003, '3.0': 0.002}, {'-3.0': 0.998, '-2.9': 0.997, '-2.8': 0.997, '-2.7': 0.996, '-2.6': 0.994, '-2.5': 0.993, '-2.4': 0.99, '-2.3': 0.988, '-2.2': 0.984, '-2.1': 0.98, '-2.0': 0.975, '-1.9': 0.969, '-1.8': 0.962, '-1.7': 0.953, '-1.6': 0.943, '-1.5': 0.931, '-1.4': 0.917, '-1.3': 0.901, '-1.2': 0.883, '-1.1': 0.862, '-1.0': 0.839, '-0.9': 0.814, '-0.8': 0.787, '-0.7': 0.757, '-0.6': 0.725, '-0.5': 0.691, '-0.4': 0.655, '-0.3': 0.617, '-0.2': 0.579, '-0.1': 0.54, '0.0': 0.5, '0.1': 0.46, '0.2': 0.421, '0.3': 0.383, '0.4': 0.345, '0.5': 0.309, '0.6': 0.275, '0.7': 0.243, '0.8': 0.213, '0.9': 0.186, '1.0': 0.161, '1.1': 0.138, '1.2': 0.117, '1.3': 0.099, '1.4': 0.083, '1.5': 0.069, '1.6': 0.057, '1.7': 0.047, '1.8': 0.038, '1.9': 0.031, '2.0': 0.025, '2.1': 0.02, '2.2': 0.016, '2.3': 0.012, '2.4': 0.01, '2.5': 0.007, '2.6': 0.006, '2.7': 0.004, '2.8': 0.003, '2.9': 0.003, '3.0': 0.002}, {'-3.0': 0.998, '-2.9': 0.997, '-2.8': 0.997, '-2.7': 0.996, '-2.6': 0.994, '-2.5': 0.993, '-2.4': 0.99, '-2.3': 0.988, '-2.2': 0.984, '-2.1': 0.98, '-2.0': 0.975, '-1.9': 0.969, '-1.8': 0.962, '-1.7': 0.953, '-1.6': 0.943, '-1.5': 0.931, '-1.4': 0.917, '-1.3': 0.901, '-1.2': 0.883, '-1.1': 0.862, '-1.0': 0.84, '-0.9': 0.814, '-0.8': 0.787, '-0.7': 0.757, '-0.6': 0.725, '-0.5': 0.691, '-0.4': 0.655, '-0.3': 0.617, '-0.2': 0.579, '-0.1': 0.54, '0.0': 0.5, '0.1': 0.46, '0.2': 0.421, '0.3': 0.383, '0.4': 0.345, '0.5': 0.309, '0.6': 0.275, '0.7': 0.243, '0.8': 0.213, '0.9': 0.186, '1.0': 0.16, '1.1': 0.138, '1.2': 0.117, '1.3': 0.099, '1.4': 0.083, '1.5': 0.069, '1.6': 0.057, '1.7': 0.047, '1.8': 0.038, '1.9': 0.031, '2.0': 0.025, '2.1': 0.02, '2.2': 0.016, '2.3': 0.012, '2.4': 0.01, '2.5': 0.007, '2.6': 0.006, '2.7': 0.004, '2.8': 0.003, '2.9': 0.003, '3.0': 0.002}, {'-3.0': 0.998, '-2.9': 0.997, '-2.8': 0.997, '-2.7': 0.996, '-2.6': 0.994, '-2.5': 0.993, '-2.4': 0.99, '-2.3': 0.988, '-2.2': 0.984, '-2.1': 0.98, '-2.0': 0.975, '-1.9': 0.969, '-1.8': 0.962, '-1.7': 0.953, '-1.6': 0.943, '-1.5': 0.931, '-1.4': 0.917, '-1.3': 0.901, '-1.2': 0.883, '-1.1': 0.862, '-1.0': 0.84, '-0.9': 0.814, '-0.8': 0.787, '-0.7': 0.757, '-0.6': 0.725, '-0.5': 0.691, '-0.4': 0.655, '-0.3': 0.617, '-0.2': 0.579, '-0.1': 0.54, '0.0': 0.5, '0.1': 0.46, '0.2': 0.421, '0.3': 0.383, '0.4': 0.345, '0.5': 0.309, '0.6': 0.275, '0.7': 0.243, '0.8': 0.213, '0.9': 0.186, '1.0': 0.16, '1.1': 0.138, '1.2': 0.117, '1.3': 0.099, '1.4': 0.083, '1.5': 0.069, '1.6': 0.057, '1.7': 0.047, '1.8': 0.038, '1.9': 0.031, '2.0': 0.025, '2.1': 0.02, '2.2': 0.016, '2.3': 0.012, '2.4': 0.01, '2.5': 0.007, '2.6': 0.006, '2.7': 0.004, '2.8': 0.003, '2.9': 0.003, '3.0': 0.002}, {'-3.0': 0.998, '-2.9': 0.997, '-2.8': 0.997, '-2.7': 0.996, '-2.6': 0.994, '-2.5': 0.993, '-2.4': 0.99, '-2.3': 0.988, '-2.2': 0.984, '-2.1': 0.98, '-2.0': 0.975, '-1.9': 0.969, '-1.8': 0.962, '-1.7': 0.953, '-1.6': 0.943, '-1.5': 0.931, '-1.4': 0.917, '-1.3': 0.901, '-1.2': 0.883, '-1.1': 0.862, '-1.0': 0.84, '-0.9': 0.814, '-0.8': 0.787, '-0.7': 0.757, '-0.6': 0.725, '-0.5': 0.691, '-0.4': 0.655, '-0.3': 0.617, '-0.2': 0.579, '-0.1': 0.54, '0.0': 0.5, '0.1': 0.46, '0.2': 0.421, '0.3': 0.383, '0.4': 0.345, '0.5': 0.309, '0.6': 0.275, '0.7': 0.243, '0.8': 0.213, '0.9': 0.186, '1.0': 0.16, '1.1': 0.138, '1.2': 0.117, '1.3': 0.099, '1.4': 0.083, '1.5': 0.069, '1.6': 0.057, '1.7': 0.047, '1.8': 0.038, '1.9': 0.031, '2.0': 0.025, '2.1': 0.02, '2.2': 0.016, '2.3': 0.012, '2.4': 0.01, '2.5': 0.007, '2.6': 0.006, '2.7': 0.004, '2.8': 0.003, '2.9': 0.003, '3.0': 0.002}, {'-3.0': 0.998, '-2.9': 0.997, '-2.8': 0.997, '-2.7': 0.996, '-2.6': 0.994, '-2.5': 0.993, '-2.4': 0.99, '-2.3': 0.988, '-2.2': 0.984, '-2.1': 0.98, '-2.0': 0.975, '-1.9': 0.969, '-1.8': 0.962, '-1.7': 0.953, '-1.6': 0.943, '-1.5': 0.931, '-1.4': 0.917, '-1.3': 0.901, '-1.2': 0.883, '-1.1': 0.862, '-1.0': 0.84, '-0.9': 0.814, '-0.8': 0.787, '-0.7': 0.757, '-0.6': 0.725, '-0.5': 0.691, '-0.4': 0.655, '-0.3': 0.617, '-0.2': 0.579, '-0.1': 0.54, '0.0': 0.5, '0.1': 0.46, '0.2': 0.421, '0.3': 0.383, '0.4': 0.345, '0.5': 0.309, '0.6': 0.275, '0.7': 0.243, '0.8': 0.213, '0.9': 0.186, '1.0': 0.16, '1.1': 0.138, '1.2': 0.117, '1.3': 0.099, '1.4': 0.083, '1.5': 0.069, '1.6': 0.057, '1.7': 0.047, '1.8': 0.038, '1.9': 0.031, '2.0': 0.025, '2.1': 0.02, '2.2': 0.016, '2.3': 0.012, '2.4': 0.01, '2.5': 0.007, '2.6': 0.006, '2.7': 0.004, '2.8': 0.003, '2.9': 0.003, '3.0': 0.002}, {'-3.0': 0.998, '-2.9': 0.998, '-2.8': 0.997, '-2.7': 0.996, '-2.6': 0.994, '-2.5': 0.993, '-2.4': 0.99, '-2.3': 0.988, '-2.2': 0.984, '-2.1': 0.98, '-2.0': 0.975, '-1.9': 0.969, '-1.8': 0.962, '-1.7': 0.953, '-1.6': 0.943, '-1.5': 0.931, '-1.4': 0.917, '-1.3': 0.901, '-1.2': 0.883, '-1.1': 0.862, '-1.0': 0.84, '-0.9': 0.814, '-0.8': 0.787, '-0.7': 0.757, '-0.6': 0.725, '-0.5': 0.691, '-0.4': 0.655, '-0.3': 0.617, '-0.2': 0.579, '-0.1': 0.54, '0.0': 0.5, '0.1': 0.46, '0.2': 0.421, '0.3': 0.383, '0.4': 0.345, '0.5': 0.309, '0.6': 0.275, '0.7': 0.243, '0.8': 0.213, '0.9': 0.186, '1.0': 0.16, '1.1': 0.138, '1.2': 0.117, '1.3': 0.099, '1.4': 0.083, '1.5': 0.069, '1.6': 0.057, '1.7': 0.047, '1.8': 0.038, '1.9': 0.031, '2.0': 0.025, '2.1': 0.02, '2.2': 0.016, '2.3': 0.012, '2.4': 0.01, '2.5': 0.007, '2.6': 0.006, '2.7': 0.004, '2.8': 0.003, '2.9': 0.002, '3.0': 0.002}, {'-3.0': 0.998, '-2.9': 0.998, '-2.8': 0.997, '-2.7': 0.996, '-2.6': 0.994, '-2.5': 0.993, '-2.4': 0.99, '-2.3': 0.988, '-2.2': 0.984, '-2.1': 0.98, '-2.0': 0.975, '-1.9': 0.969, '-1.8': 0.962, '-1.7': 0.953, '-1.6': 0.943, '-1.5': 0.931, '-1.4': 0.917, '-1.3': 0.901, '-1.2': 0.883, '-1.1': 0.862, '-1.0': 0.84, '-0.9': 0.814, '-0.8': 0.787, '-0.7': 0.757, '-0.6': 0.725, '-0.5': 0.691, '-0.4': 0.655, '-0.3': 0.617, '-0.2': 0.579, '-0.1': 0.54, '0.0': 0.5, '0.1': 0.46, '0.2': 0.421, '0.3': 0.383, '0.4': 0.345, '0.5': 0.309, '0.6': 0.275, '0.7': 0.243, '0.8': 0.213, '0.9': 0.186, '1.0': 0.16, '1.1': 0.138, '1.2': 0.117, '1.3': 0.099, '1.4': 0.083, '1.5': 0.069, '1.6': 0.057, '1.7': 0.047, '1.8': 0.038, '1.9': 0.031, '2.0': 0.025, '2.1': 0.02, '2.2': 0.016, '2.3': 0.012, '2.4': 0.01, '2.5': 0.007, '2.6': 0.006, '2.7': 0.004, '2.8': 0.003, '2.9': 0.002, '3.0': 0.002}, {'-3.0': 0.998, '-2.9': 0.998, '-2.8': 0.997, '-2.7': 0.996, '-2.6': 0.994, '-2.5': 0.993, '-2.4': 0.991, '-2.3': 0.988, '-2.2': 0.984, '-2.1': 0.98, '-2.0': 0.975, '-1.9': 0.969, '-1.8': 0.962, '-1.7': 0.953, '-1.6': 0.943, '-1.5': 0.931, '-1.4': 0.917, '-1.3': 0.901, '-1.2': 0.883, '-1.1': 0.863, '-1.0': 0.84, '-0.9': 0.814, '-0.8': 0.787, '-0.7': 0.757, '-0.6': 0.725, '-0.5': 0.691, '-0.4': 0.655, '-0.3': 0.617, '-0.2': 0.579, '-0.1': 0.54, '0.0': 0.5, '0.1': 0.46, '0.2': 0.421, '0.3': 0.383, '0.4': 0.345, '0.5': 0.309, '0.6': 0.275, '0.7': 0.243, '0.8': 0.213, '0.9': 0.186, '1.0': 0.16, '1.1': 0.137, '1.2': 0.117, '1.3': 0.099, '1.4': 0.083, '1.5': 0.069, '1.6': 0.057, '1.7': 0.047, '1.8': 0.038, '1.9': 0.031, '2.0': 0.025, '2.1': 0.02, '2.2': 0.016, '2.3': 0.012, '2.4': 0.009, '2.5': 0.007, '2.6': 0.006, '2.7': 0.004, '2.8': 0.003, '2.9': 0.002, '3.0': 0.002}, {'-3.0': 0.998, '-2.9': 0.998, '-2.8': 0.997, '-2.7': 0.996, '-2.6': 0.994, '-2.5': 0.993, '-2.4': 0.991, '-2.3': 0.988, '-2.2': 0.985, '-2.1': 0.98, '-2.0': 0.975, '-1.9': 0.969, '-1.8': 0.962, '-1.7': 0.953, '-1.6': 0.943, '-1.5': 0.931, '-1.4': 0.917, '-1.3': 0.901, '-1.2': 0.883, '-1.1': 0.863, '-1.0': 0.84, '-0.9': 0.814, '-0.8': 0.787, '-0.7': 0.757, '-0.6': 0.725, '-0.5': 0.691, '-0.4': 0.655, '-0.3': 0.617, '-0.2': 0.579, '-0.1': 0.54, '0.0': 0.5, '0.1': 0.46, '0.2': 0.421, '0.3': 0.383, '0.4': 0.345, '0.5': 0.309, '0.6': 0.275, '0.7': 0.243, '0.8': 0.213, '0.9': 0.186, '1.0': 0.16, '1.1': 0.137, '1.2': 0.117, '1.3': 0.099, '1.4': 0.083, '1.5': 0.069, '1.6': 0.057, '1.7': 0.047, '1.8': 0.038, '1.9': 0.031, '2.0': 0.025, '2.1': 0.02, '2.2': 0.015, '2.3': 0.012, '2.4': 0.009, '2.5': 0.007, '2.6': 0.006, '2.7': 0.004, '2.8': 0.003, '2.9': 0.002, '3.0': 0.002}, {'-3.0': 0.998, '-2.9': 0.998, '-2.8': 0.997, '-2.7': 0.996, '-2.6': 0.994, '-2.5': 0.993, '-2.4': 0.991, '-2.3': 0.988, '-2.2': 0.985, '-2.1': 0.98, '-2.0': 0.975, '-1.9': 0.969, '-1.8': 0.962, '-1.7': 0.953, '-1.6': 0.943, '-1.5': 0.931, '-1.4': 0.917, '-1.3': 0.901, '-1.2': 0.883, '-1.1': 0.863, '-1.0': 0.84, '-0.9': 0.814, '-0.8': 0.787, '-0.7': 0.757, '-0.6': 0.725, '-0.5': 0.691, '-0.4': 0.655, '-0.3': 0.617, '-0.2': 0.579, '-0.1': 0.54, '0.0': 0.5, '0.1': 0.46, '0.2': 0.421, '0.3': 0.383, '0.4': 0.345, '0.5': 0.309, '0.6': 0.275, '0.7': 0.243, '0.8': 0.213, '0.9': 0.186, '1.0': 0.16, '1.1': 0.137, '1.2': 0.117, '1.3': 0.099, '1.4': 0.083, '1.5': 0.069, '1.6': 0.057, '1.7': 0.047, '1.8': 0.038, '1.9': 0.031, '2.0': 0.025, '2.1': 0.02, '2.2': 0.015, '2.3': 0.012, '2.4': 0.009, '2.5': 0.007, '2.6': 0.006, '2.7': 0.004, '2.8': 0.003, '2.9': 0.002, '3.0': 0.002}, {'-3.0': 0.998, '-2.9': 0.998, '-2.8': 0.997, '-2.7': 0.996, '-2.6': 0.994, '-2.5': 0.993, '-2.4': 0.991, '-2.3': 0.988, '-2.2': 0.985, '-2.1': 0.98, '-2.0': 0.975, '-1.9': 0.969, '-1.8': 0.962, '-1.7': 0.953, '-1.6': 0.943, '-1.5': 0.931, '-1.4': 0.917, '-1.3': 0.901, '-1.2': 0.883, '-1.1': 0.863, '-1.0': 0.84, '-0.9': 0.814, '-0.8': 0.787, '-0.7': 0.757, '-0.6': 0.725, '-0.5': 0.691, '-0.4': 0.655, '-0.3': 0.617, '-0.2': 0.579, '-0.1': 0.54, '0.0': 0.5, '0.1': 0.46, '0.2': 0.421, '0.3': 0.383, '0.4': 0.345, '0.5': 0.309, '0.6': 0.275, '0.7': 0.243, '0.8': 0.213, '0.9': 0.186, '1.0': 0.16, '1.1': 0.137, '1.2': 0.117, '1.3': 0.099, '1.4': 0.083, '1.5': 0.069, '1.6': 0.057, '1.7': 0.047, '1.8': 0.038, '1.9': 0.031, '2.0': 0.025, '2.1': 0.02, '2.2': 0.015, '2.3': 0.012, '2.4': 0.009, '2.5': 0.007, '2.6': 0.006, '2.7': 0.004, '2.8': 0.003, '2.9': 0.002, '3.0': 0.002}, {'-3.0': 0.998, '-2.9': 0.998, '-2.8': 0.997, '-2.7': 0.996, '-2.6': 0.994, '-2.5': 0.993, '-2.4': 0.991, '-2.3': 0.988, '-2.2': 0.985, '-2.1': 0.98, '-2.0': 0.975, '-1.9': 0.969, '-1.8': 0.962, '-1.7': 0.953, '-1.6': 0.943, '-1.5': 0.931, '-1.4': 0.917, '-1.3': 0.901, '-1.2': 0.883, '-1.1': 0.863, '-1.0': 0.84, '-0.9': 0.815, '-0.8': 0.787, '-0.7': 0.757, '-0.6': 0.725, '-0.5': 0.691, '-0.4': 0.655, '-0.3': 0.618, '-0.2': 0.579, '-0.1': 0.54, '0.0': 0.5, '0.1': 0.46, '0.2': 0.421, '0.3': 0.382, '0.4': 0.345, '0.5': 0.309, '0.6': 0.275, '0.7': 0.243, '0.8': 0.213, '0.9': 0.185, '1.0': 0.16, '1.1': 0.137, '1.2': 0.117, '1.3': 0.099, '1.4': 0.083, '1.5': 0.069, '1.6': 0.057, '1.7': 0.047, '1.8': 0.038, '1.9': 0.031, '2.0': 0.025, '2.1': 0.02, '2.2': 0.015, '2.3': 0.012, '2.4': 0.009, '2.5': 0.007, '2.6': 0.006, '2.7': 0.004, '2.8': 0.003, '2.9': 0.002, '3.0': 0.002}, {'-3.0': 0.998, '-2.9': 0.998, '-2.8': 0.997, '-2.7': 0.996, '-2.6': 0.994, '-2.5': 0.993, '-2.4': 0.991, '-2.3': 0.988, '-2.2': 0.985, '-2.1': 0.98, '-2.0': 0.975, '-1.9': 0.969, '-1.8': 0.962, '-1.7': 0.953, '-1.6': 0.943, '-1.5': 0.931, '-1.4': 0.917, '-1.3': 0.901, '-1.2': 0.883, '-1.1': 0.863, '-1.0': 0.84, '-0.9': 0.815, '-0.8': 0.787, '-0.7': 0.757, '-0.6': 0.725, '-0.5': 0.691, '-0.4': 0.655, '-0.3': 0.618, '-0.2': 0.579, '-0.1': 0.54, '0.0': 0.5, '0.1': 0.46, '0.2': 0.421, '0.3': 0.382, '0.4': 0.345, '0.5': 0.309, '0.6': 0.275, '0.7': 0.243, '0.8': 0.213, '0.9': 0.185, '1.0': 0.16, '1.1': 0.137, '1.2': 0.117, '1.3': 0.099, '1.4': 0.083, '1.5': 0.069, '1.6': 0.057, '1.7': 0.047, '1.8': 0.038, '1.9': 0.031, '2.0': 0.025, '2.1': 0.02, '2.2': 0.015, '2.3': 0.012, '2.4': 0.009, '2.5': 0.007, '2.6': 0.006, '2.7': 0.004, '2.8': 0.003, '2.9': 0.002, '3.0': 0.002}, {'-3.0': 0.998, '-2.9': 0.998, '-2.8': 0.997, '-2.7': 0.996, '-2.6': 0.994, '-2.5': 0.993, '-2.4': 0.991, '-2.3': 0.988, '-2.2': 0.985, '-2.1': 0.981, '-2.0': 0.976, '-1.9': 0.969, '-1.8': 0.962, '-1.7': 0.953, '-1.6': 0.943, '-1.5': 0.931, '-1.4': 0.917, '-1.3': 0.901, '-1.2': 0.883, '-1.1': 0.863, '-1.0': 0.84, '-0.9': 0.815, '-0.8': 0.787, '-0.7': 0.757, '-0.6': 0.725, '-0.5': 0.691, '-0.4': 0.655, '-0.3': 0.618, '-0.2': 0.579, '-0.1': 0.54, '0.0': 0.5, '0.1': 0.46, '0.2': 0.421, '0.3': 0.382, '0.4': 0.345, '0.5': 0.309, '0.6': 0.275, '0.7': 0.243, '0.8': 0.213, '0.9': 0.185, '1.0': 0.16, '1.1': 0.137, '1.2': 0.117, '1.3': 0.099, '1.4': 0.083, '1.5': 0.069, '1.6': 0.057, '1.7': 0.047, '1.8': 0.038, '1.9': 0.031, '2.0': 0.024, '2.1': 0.019, '2.2': 0.015, '2.3': 0.012, '2.4': 0.009, '2.5': 0.007, '2.6': 0.006, '2.7': 0.004, '2.8': 0.003, '2.9': 0.002, '3.0': 0.002}, {'-3.0': 0.998, '-2.9': 0.998, '-2.8': 0.997, '-2.7': 0.996, '-2.6': 0.994, '-2.5': 0.993, '-2.4': 0.991, '-2.3': 0.988, '-2.2': 0.985, '-2.1': 0.981, '-2.0': 0.976, '-1.9': 0.969, '-1.8': 0.962, '-1.7': 0.953, '-1.6': 0.943, '-1.5': 0.931, '-1.4': 0.917, '-1.3': 0.901, '-1.2': 0.883, '-1.1': 0.863, '-1.0': 0.84, '-0.9': 0.815, '-0.8': 0.787, '-0.7': 0.757, '-0.6': 0.725, '-0.5': 0.691, '-0.4': 0.655, '-0.3': 0.618, '-0.2': 0.579, '-0.1': 0.54, '0.0': 0.5, '0.1': 0.46, '0.2': 0.421, '0.3': 0.382, '0.4': 0.345, '0.5': 0.309, '0.6': 0.275, '0.7': 0.243, '0.8': 0.213, '0.9': 0.185, '1.0': 0.16, '1.1': 0.137, '1.2': 0.117, '1.3': 0.099, '1.4': 0.083, '1.5': 0.069, '1.6': 0.057, '1.7': 0.047, '1.8': 0.038, '1.9': 0.031, '2.0': 0.024, '2.1': 0.019, '2.2': 0.015, '2.3': 0.012, '2.4': 0.009, '2.5': 0.007, '2.6': 0.006, '2.7': 0.004, '2.8': 0.003, '2.9': 0.002, '3.0': 0.002}, {'-3.0': 0.998, '-2.9': 0.998, '-2.8': 0.997, '-2.7': 0.996, '-2.6': 0.994, '-2.5': 0.993, '-2.4': 0.991, '-2.3': 0.988, '-2.2': 0.985, '-2.1': 0.981, '-2.0': 0.976, '-1.9': 0.969, '-1.8': 0.962, '-1.7': 0.953, '-1.6': 0.943, '-1.5': 0.931, '-1.4': 0.917, '-1.3': 0.901, '-1.2': 0.883, '-1.1': 0.863, '-1.0': 0.84, '-0.9': 0.815, '-0.8': 0.787, '-0.7': 0.757, '-0.6': 0.725, '-0.5': 0.691, '-0.4': 0.655, '-0.3': 0.618, '-0.2': 0.579, '-0.1': 0.54, '0.0': 0.5, '0.1': 0.46, '0.2': 0.421, '0.3': 0.382, '0.4': 0.345, '0.5': 0.309, '0.6': 0.275, '0.7': 0.243, '0.8': 0.213, '0.9': 0.185, '1.0': 0.16, '1.1': 0.137, '1.2': 0.117, '1.3': 0.099, '1.4': 0.083, '1.5': 0.069, '1.6': 0.057, '1.7': 0.047, '1.8': 0.038, '1.9': 0.031, '2.0': 0.024, '2.1': 0.019, '2.2': 0.015, '2.3': 0.012, '2.4': 0.009, '2.5': 0.007, '2.6': 0.006, '2.7': 0.004, '2.8': 0.003, '2.9': 0.002, '3.0': 0.002}, {'-3.0': 0.998, '-2.9': 0.998, '-2.8': 0.997, '-2.7': 0.996, '-2.6': 0.994, '-2.5': 0.993, '-2.4': 0.991, '-2.3': 0.988, '-2.2': 0.985, '-2.1': 0.981, '-2.0': 0.976, '-1.9': 0.97, '-1.8': 0.962, '-1.7': 0.954, '-1.6': 0.943, '-1.5': 0.931, '-1.4': 0.917, '-1.3': 0.901, '-1.2': 0.883, '-1.1': 0.863, '-1.0': 0.84, '-0.9': 0.815, '-0.8': 0.787, '-0.7': 0.757, '-0.6': 0.725, '-0.5': 0.691, '-0.4': 0.655, '-0.3': 0.618, '-0.2': 0.579, '-0.1': 0.54, '0.0': 0.5, '0.1': 0.46, '0.2': 0.421, '0.3': 0.382, '0.4': 0.345, '0.5': 0.309, '0.6': 0.275, '0.7': 0.243, '0.8': 0.213, '0.9': 0.185, '1.0': 0.16, '1.1': 0.137, '1.2': 0.117, '1.3': 0.099, '1.4': 0.083, '1.5': 0.069, '1.6': 0.057, '1.7': 0.046, '1.8': 0.038, '1.9': 0.03, '2.0': 0.024, '2.1': 0.019, '2.2': 0.015, '2.3': 0.012, '2.4': 0.009, '2.5': 0.007, '2.6': 0.006, '2.7': 0.004, '2.8': 0.003, '2.9': 0.002, '3.0': 0.002}, {'-3.0': 0.998, '-2.9': 0.998, '-2.8': 0.997, '-2.7': 0.996, '-2.6': 0.994, '-2.5': 0.993, '-2.4': 0.991, '-2.3': 0.988, '-2.2': 0.985, '-2.1': 0.981, '-2.0': 0.976, '-1.9': 0.97, '-1.8': 0.962, '-1.7': 0.954, '-1.6': 0.943, '-1.5': 0.931, '-1.4': 0.917, '-1.3': 0.901, '-1.2': 0.883, '-1.1': 0.863, '-1.0': 0.84, '-0.9': 0.815, '-0.8': 0.787, '-0.7': 0.757, '-0.6': 0.725, '-0.5': 0.691, '-0.4': 0.655, '-0.3': 0.618, '-0.2': 0.579, '-0.1': 0.54, '0.0': 0.5, '0.1': 0.46, '0.2': 0.421, '0.3': 0.382, '0.4': 0.345, '0.5': 0.309, '0.6': 0.275, '0.7': 0.243, '0.8': 0.213, '0.9': 0.185, '1.0': 0.16, '1.1': 0.137, '1.2': 0.117, '1.3': 0.099, '1.4': 0.083, '1.5': 0.069, '1.6': 0.057, '1.7': 0.046, '1.8': 0.038, '1.9': 0.03, '2.0': 0.024, '2.1': 0.019, '2.2': 0.015, '2.3': 0.012, '2.4': 0.009, '2.5': 0.007, '2.6': 0.006, '2.7': 0.004, '2.8': 0.003, '2.9': 0.002, '3.0': 0.002}, {'-3.0': 0.998, '-2.9': 0.998, '-2.8': 0.997, '-2.7': 0.996, '-2.6': 0.994, '-2.5': 0.993, '-2.4': 0.991, '-2.3': 0.988, '-2.2': 0.985, '-2.1': 0.981, '-2.0': 0.976, '-1.9': 0.97, '-1.8': 0.962, '-1.7': 0.954, '-1.6': 0.943, '-1.5': 0.931, '-1.4': 0.917, '-1.3': 0.901, '-1.2': 0.883, '-1.1': 0.863, '-1.0': 0.84, '-0.9': 0.815, '-0.8': 0.787, '-0.7': 0.757, '-0.6': 0.725, '-0.5': 0.691, '-0.4': 0.655, '-0.3': 0.618, '-0.2': 0.579, '-0.1': 0.54, '0.0': 0.5, '0.1': 0.46, '0.2': 0.421, '0.3': 0.382, '0.4': 0.345, '0.5': 0.309, '0.6': 0.275, '0.7': 0.243, '0.8': 0.213, '0.9': 0.185, '1.0': 0.16, '1.1': 0.137, '1.2': 0.117, '1.3': 0.099, '1.4': 0.083, '1.5': 0.069, '1.6': 0.057, '1.7': 0.046, '1.8': 0.038, '1.9': 0.03, '2.0': 0.024, '2.1': 0.019, '2.2': 0.015, '2.3': 0.012, '2.4': 0.009, '2.5': 0.007, '2.6': 0.006, '2.7': 0.004, '2.8': 0.003, '2.9': 0.002, '3.0': 0.002}, {'-3.0': 0.998, '-2.9': 0.998, '-2.8': 0.997, '-2.7': 0.996, '-2.6': 0.994, '-2.5': 0.993, '-2.4': 0.991, '-2.3': 0.988, '-2.2': 0.985, '-2.1': 0.981, '-2.0': 0.976, '-1.9': 0.97, '-1.8': 0.962, '-1.7': 0.954, '-1.6': 0.943, '-1.5': 0.931, '-1.4': 0.917, '-1.3': 0.901, '-1.2': 0.883, '-1.1': 0.863, '-1.0': 0.84, '-0.9': 0.815, '-0.8': 0.787, '-0.7': 0.757, '-0.6': 0.725, '-0.5': 0.691, '-0.4': 0.655, '-0.3': 0.618, '-0.2': 0.579, '-0.1': 0.54, '0.0': 0.5, '0.1': 0.46, '0.2': 0.421, '0.3': 0.382, '0.4': 0.345, '0.5': 0.309, '0.6': 0.275, '0.7': 0.243, '0.8': 0.213, '0.9': 0.185, '1.0': 0.16, '1.1': 0.137, '1.2': 0.117, '1.3': 0.099, '1.4': 0.083, '1.5': 0.069, '1.6': 0.057, '1.7': 0.046, '1.8': 0.038, '1.9': 0.03, '2.0': 0.024, '2.1': 0.019, '2.2': 0.015, '2.3': 0.012, '2.4': 0.009, '2.5': 0.007, '2.6': 0.006, '2.7': 0.004, '2.8': 0.003, '2.9': 0.002, '3.0': 0.002}, {'-3.0': 0.998, '-2.9': 0.998, '-2.8': 0.997, '-2.7': 0.996, '-2.6': 0.995, '-2.5': 0.993, '-2.4': 0.991, '-2.3': 0.988, '-2.2': 0.985, '-2.1': 0.981, '-2.0': 0.976, '-1.9': 0.97, '-1.8': 0.962, '-1.7': 0.954, '-1.6': 0.943, '-1.5': 0.931, '-1.4': 0.917, '-1.3': 0.901, '-1.2': 0.883, '-1.1': 0.863, '-1.0': 0.84, '-0.9': 0.815, '-0.8': 0.787, '-0.7': 0.757, '-0.6': 0.725, '-0.5': 0.691, '-0.4': 0.655, '-0.3': 0.618, '-0.2': 0.579, '-0.1': 0.54, '0.0': 0.5, '0.1': 0.46, '0.2': 0.421, '0.3': 0.382, '0.4': 0.345, '0.5': 0.309, '0.6': 0.275, '0.7': 0.243, '0.8': 0.213, '0.9': 0.185, '1.0': 0.16, '1.1': 0.137, '1.2': 0.117, '1.3': 0.099, '1.4': 0.083, '1.5': 0.069, '1.6': 0.057, '1.7': 0.046, '1.8': 0.038, '1.9': 0.03, '2.0': 0.024, '2.1': 0.019, '2.2': 0.015, '2.3': 0.012, '2.4': 0.009, '2.5': 0.007, '2.6': 0.005, '2.7': 0.004, '2.8': 0.003, '2.9': 0.002, '3.0': 0.002}, {'-3.0': 0.998, '-2.9': 0.998, '-2.8': 0.997, '-2.7': 0.996, '-2.6': 0.995, '-2.5': 0.993, '-2.4': 0.991, '-2.3': 0.988, '-2.2': 0.985, '-2.1': 0.981, '-2.0': 0.976, '-1.9': 0.97, '-1.8': 0.962, '-1.7': 0.954, '-1.6': 0.943, '-1.5': 0.931, '-1.4': 0.917, '-1.3': 0.901, '-1.2': 0.883, '-1.1': 0.863, '-1.0': 0.84, '-0.9': 0.815, '-0.8': 0.787, '-0.7': 0.757, '-0.6': 0.725, '-0.5': 0.691, '-0.4': 0.655, '-0.3': 0.618, '-0.2': 0.579, '-0.1': 0.54, '0.0': 0.5, '0.1': 0.46, '0.2': 0.421, '0.3': 0.382, '0.4': 0.345, '0.5': 0.309, '0.6': 0.275, '0.7': 0.243, '0.8': 0.213, '0.9': 0.185, '1.0': 0.16, '1.1': 0.137, '1.2': 0.117, '1.3': 0.099, '1.4': 0.083, '1.5': 0.069, '1.6': 0.057, '1.7': 0.046, '1.8': 0.038, '1.9': 0.03, '2.0': 0.024, '2.1': 0.019, '2.2': 0.015, '2.3': 0.012, '2.4': 0.009, '2.5': 0.007, '2.6': 0.005, '2.7': 0.004, '2.8': 0.003, '2.9': 0.002, '3.0': 0.002}, {'-3.0': 0.998, '-2.9': 0.998, '-2.8': 0.997, '-2.7': 0.996, '-2.6': 0.995, '-2.5': 0.993, '-2.4': 0.991, '-2.3': 0.988, '-2.2': 0.985, '-2.1': 0.981, '-2.0': 0.976, '-1.9': 0.97, '-1.8': 0.962, '-1.7': 0.954, '-1.6': 0.943, '-1.5': 0.931, '-1.4': 0.917, '-1.3': 0.901, '-1.2': 0.883, '-1.1': 0.863, '-1.0': 0.84, '-0.9': 0.815, '-0.8': 0.787, '-0.7': 0.757, '-0.6': 0.725, '-0.5': 0.691, '-0.4': 0.655, '-0.3': 0.618, '-0.2': 0.579, '-0.1': 0.54, '0.0': 0.5, '0.1': 0.46, '0.2': 0.421, '0.3': 0.382, '0.4': 0.345, '0.5': 0.309, '0.6': 0.275, '0.7': 0.243, '0.8': 0.213, '0.9': 0.185, '1.0': 0.16, '1.1': 0.137, '1.2': 0.117, '1.3': 0.099, '1.4': 0.083, '1.5': 0.069, '1.6': 0.057, '1.7': 0.046, '1.8': 0.038, '1.9': 0.03, '2.0': 0.024, '2.1': 0.019, '2.2': 0.015, '2.3': 0.012, '2.4': 0.009, '2.5': 0.007, '2.6': 0.005, '2.7': 0.004, '2.8': 0.003, '2.9': 0.002, '3.0': 0.002}, {'-3.0': 0.998, '-2.9': 0.998, '-2.8': 0.997, '-2.7': 0.996, '-2.6': 0.995, '-2.5': 0.993, '-2.4': 0.991, '-2.3': 0.988, '-2.2': 0.985, '-2.1': 0.981, '-2.0': 0.976, '-1.9': 0.97, '-1.8': 0.962, '-1.7': 0.954, '-1.6': 0.943, '-1.5': 0.931, '-1.4': 0.917, '-1.3': 0.902, '-1.2': 0.883, '-1.1': 0.863, '-1.0': 0.84, '-0.9': 0.815, '-0.8': 0.787, '-0.7': 0.757, '-0.6': 0.725, '-0.5': 0.691, '-0.4': 0.655, '-0.3': 0.618, '-0.2': 0.579, '-0.1': 0.54, '0.0': 0.5, '0.1': 0.46, '0.2': 0.421, '0.3': 0.382, '0.4': 0.345, '0.5': 0.309, '0.6': 0.275, '0.7': 0.243, '0.8': 0.213, '0.9': 0.185, '1.0': 0.16, '1.1': 0.137, '1.2': 0.117, '1.3': 0.098, '1.4': 0.083, '1.5': 0.069, '1.6': 0.057, '1.7': 0.046, '1.8': 0.038, '1.9': 0.03, '2.0': 0.024, '2.1': 0.019, '2.2': 0.015, '2.3': 0.012, '2.4': 0.009, '2.5': 0.007, '2.6': 0.005, '2.7': 0.004, '2.8': 0.003, '2.9': 0.002, '3.0': 0.002}, {'-3.0': 0.998, '-2.9': 0.998, '-2.8': 0.997, '-2.7': 0.996, '-2.6': 0.995, '-2.5': 0.993, '-2.4': 0.991, '-2.3': 0.988, '-2.2': 0.985, '-2.1': 0.981, '-2.0': 0.976, '-1.9': 0.97, '-1.8': 0.962, '-1.7': 0.954, '-1.6': 0.943, '-1.5': 0.931, '-1.4': 0.918, '-1.3': 0.902, '-1.2': 0.883, '-1.1': 0.863, '-1.0': 0.84, '-0.9': 0.815, '-0.8': 0.787, '-0.7': 0.757, '-0.6': 0.725, '-0.5': 0.691, '-0.4': 0.655, '-0.3': 0.618, '-0.2': 0.579, '-0.1': 0.54, '0.0': 0.5, '0.1': 0.46, '0.2': 0.421, '0.3': 0.382, '0.4': 0.345, '0.5': 0.309, '0.6': 0.275, '0.7': 0.243, '0.8': 0.213, '0.9': 0.185, '1.0': 0.16, '1.1': 0.137, '1.2': 0.117, '1.3': 0.098, '1.4': 0.082, '1.5': 0.069, '1.6': 0.057, '1.7': 0.046, '1.8': 0.038, '1.9': 0.03, '2.0': 0.024, '2.1': 0.019, '2.2': 0.015, '2.3': 0.012, '2.4': 0.009, '2.5': 0.007, '2.6': 0.005, '2.7': 0.004, '2.8': 0.003, '2.9': 0.002, '3.0': 0.002}, {'-3.0': 0.998, '-2.9': 0.998, '-2.8': 0.997, '-2.7': 0.996, '-2.6': 0.995, '-2.5': 0.993, '-2.4': 0.991, '-2.3': 0.988, '-2.2': 0.985, '-2.1': 0.981, '-2.0': 0.976, '-1.9': 0.97, '-1.8': 0.962, '-1.7': 0.954, '-1.6': 0.943, '-1.5': 0.931, '-1.4': 0.918, '-1.3': 0.902, '-1.2': 0.883, '-1.1': 0.863, '-1.0': 0.84, '-0.9': 0.815, '-0.8': 0.787, '-0.7': 0.757, '-0.6': 0.725, '-0.5': 0.691, '-0.4': 0.655, '-0.3': 0.618, '-0.2': 0.579, '-0.1': 0.54, '0.0': 0.5, '0.1': 0.46, '0.2': 0.421, '0.3': 0.382, '0.4': 0.345, '0.5': 0.309, '0.6': 0.275, '0.7': 0.243, '0.8': 0.213, '0.9': 0.185, '1.0': 0.16, '1.1': 0.137, '1.2': 0.117, '1.3': 0.098, '1.4': 0.082, '1.5': 0.069, '1.6': 0.057, '1.7': 0.046, '1.8': 0.038, '1.9': 0.03, '2.0': 0.024, '2.1': 0.019, '2.2': 0.015, '2.3': 0.012, '2.4': 0.009, '2.5': 0.007, '2.6': 0.005, '2.7': 0.004, '2.8': 0.003, '2.9': 0.002, '3.0': 0.002}, {'-3.0': 0.998, '-2.9': 0.998, '-2.8': 0.997, '-2.7': 0.996, '-2.6': 0.995, '-2.5': 0.993, '-2.4': 0.991, '-2.3': 0.988, '-2.2': 0.985, '-2.1': 0.981, '-2.0': 0.976, '-1.9': 0.97, '-1.8': 0.962, '-1.7': 0.954, '-1.6': 0.943, '-1.5': 0.931, '-1.4': 0.918, '-1.3': 0.902, '-1.2': 0.883, '-1.1': 0.863, '-1.0': 0.84, '-0.9': 0.815, '-0.8': 0.787, '-0.7': 0.757, '-0.6': 0.725, '-0.5': 0.691, '-0.4': 0.655, '-0.3': 0.618, '-0.2': 0.579, '-0.1': 0.54, '0.0': 0.5, '0.1': 0.46, '0.2': 0.421, '0.3': 0.382, '0.4': 0.345, '0.5': 0.309, '0.6': 0.275, '0.7': 0.243, '0.8': 0.213, '0.9': 0.185, '1.0': 0.16, '1.1': 0.137, '1.2': 0.117, '1.3': 0.098, '1.4': 0.082, '1.5': 0.069, '1.6': 0.057, '1.7': 0.046, '1.8': 0.038, '1.9': 0.03, '2.0': 0.024, '2.1': 0.019, '2.2': 0.015, '2.3': 0.012, '2.4': 0.009, '2.5': 0.007, '2.6': 0.005, '2.7': 0.004, '2.8': 0.003, '2.9': 0.002, '3.0': 0.002}, {'-3.0': 0.998, '-2.9': 0.998, '-2.8': 0.997, '-2.7': 0.996, '-2.6': 0.995, '-2.5': 0.993, '-2.4': 0.991, '-2.3': 0.988, '-2.2': 0.985, '-2.1': 0.981, '-2.0': 0.976, '-1.9': 0.97, '-1.8': 0.962, '-1.7': 0.954, '-1.6': 0.943, '-1.5': 0.931, '-1.4': 0.918, '-1.3': 0.902, '-1.2': 0.883, '-1.1': 0.863, '-1.0': 0.84, '-0.9': 0.815, '-0.8': 0.787, '-0.7': 0.757, '-0.6': 0.725, '-0.5': 0.691, '-0.4': 0.655, '-0.3': 0.618, '-0.2': 0.579, '-0.1': 0.54, '0.0': 0.5, '0.1': 0.46, '0.2': 0.421, '0.3': 0.382, '0.4': 0.345, '0.5': 0.309, '0.6': 0.275, '0.7': 0.243, '0.8': 0.213, '0.9': 0.185, '1.0': 0.16, '1.1': 0.137, '1.2': 0.117, '1.3': 0.098, '1.4': 0.082, '1.5': 0.069, '1.6': 0.057, '1.7': 0.046, '1.8': 0.038, '1.9': 0.03, '2.0': 0.024, '2.1': 0.019, '2.2': 0.015, '2.3': 0.012, '2.4': 0.009, '2.5': 0.007, '2.6': 0.005, '2.7': 0.004, '2.8': 0.003, '2.9': 0.002, '3.0': 0.002}, {'-3.0': 0.998, '-2.9': 0.998, '-2.8': 0.997, '-2.7': 0.996, '-2.6': 0.995, '-2.5': 0.993, '-2.4': 0.991, '-2.3': 0.988, '-2.2': 0.985, '-2.1': 0.981, '-2.0': 0.976, '-1.9': 0.97, '-1.8': 0.962, '-1.7': 0.954, '-1.6': 0.944, '-1.5': 0.931, '-1.4': 0.918, '-1.3': 0.902, '-1.2': 0.883, '-1.1': 0.863, '-1.0': 0.84, '-0.9': 0.815, '-0.8': 0.787, '-0.7': 0.757, '-0.6': 0.725, '-0.5': 0.691, '-0.4': 0.655, '-0.3': 0.618, '-0.2': 0.579, '-0.1': 0.54, '0.0': 0.5, '0.1': 0.46, '0.2': 0.421, '0.3': 0.382, '0.4': 0.345, '0.5': 0.309, '0.6': 0.275, '0.7': 0.243, '0.8': 0.213, '0.9': 0.185, '1.0': 0.16, '1.1': 0.137, '1.2': 0.117, '1.3': 0.098, '1.4': 0.082, '1.5': 0.069, '1.6': 0.056, '1.7': 0.046, '1.8': 0.038, '1.9': 0.03, '2.0': 0.024, '2.1': 0.019, '2.2': 0.015, '2.3': 0.012, '2.4': 0.009, '2.5': 0.007, '2.6': 0.005, '2.7': 0.004, '2.8': 0.003, '2.9': 0.002, '3.0': 0.002}, {'-3.0': 0.998, '-2.9': 0.998, '-2.8': 0.997, '-2.7': 0.996, '-2.6': 0.995, '-2.5': 0.993, '-2.4': 0.991, '-2.3': 0.988, '-2.2': 0.985, '-2.1': 0.981, '-2.0': 0.976, '-1.9': 0.97, '-1.8': 0.962, '-1.7': 0.954, '-1.6': 0.944, '-1.5': 0.932, '-1.4': 0.918, '-1.3': 0.902, '-1.2': 0.883, '-1.1': 0.863, '-1.0': 0.84, '-0.9': 0.815, '-0.8': 0.787, '-0.7': 0.757, '-0.6': 0.725, '-0.5': 0.691, '-0.4': 0.655, '-0.3': 0.618, '-0.2': 0.579, '-0.1': 0.54, '0.0': 0.5, '0.1': 0.46, '0.2': 0.421, '0.3': 0.382, '0.4': 0.345, '0.5': 0.309, '0.6': 0.275, '0.7': 0.243, '0.8': 0.213, '0.9': 0.185, '1.0': 0.16, '1.1': 0.137, '1.2': 0.117, '1.3': 0.098, '1.4': 0.082, '1.5': 0.068, '1.6': 0.056, '1.7': 0.046, '1.8': 0.038, '1.9': 0.03, '2.0': 0.024, '2.1': 0.019, '2.2': 0.015, '2.3': 0.012, '2.4': 0.009, '2.5': 0.007, '2.6': 0.005, '2.7': 0.004, '2.8': 0.003, '2.9': 0.002, '3.0': 0.002}, {'-3.0': 0.998, '-2.9': 0.998, '-2.8': 0.997, '-2.7': 0.996, '-2.6': 0.995, '-2.5': 0.993, '-2.4': 0.991, '-2.3': 0.988, '-2.2': 0.985, '-2.1': 0.981, '-2.0': 0.976, '-1.9': 0.97, '-1.8': 0.962, '-1.7': 0.954, '-1.6': 0.944, '-1.5': 0.932, '-1.4': 0.918, '-1.3': 0.902, '-1.2': 0.883, '-1.1': 0.863, '-1.0': 0.84, '-0.9': 0.815, '-0.8': 0.787, '-0.7': 0.757, '-0.6': 0.725, '-0.5': 0.691, '-0.4': 0.655, '-0.3': 0.618, '-0.2': 0.579, '-0.1': 0.54, '0.0': 0.5, '0.1': 0.46, '0.2': 0.421, '0.3': 0.382, '0.4': 0.345, '0.5': 0.309, '0.6': 0.275, '0.7': 0.243, '0.8': 0.213, '0.9': 0.185, '1.0': 0.16, '1.1': 0.137, '1.2': 0.117, '1.3': 0.098, '1.4': 0.082, '1.5': 0.068, '1.6': 0.056, '1.7': 0.046, '1.8': 0.038, '1.9': 0.03, '2.0': 0.024, '2.1': 0.019, '2.2': 0.015, '2.3': 0.012, '2.4': 0.009, '2.5': 0.007, '2.6': 0.005, '2.7': 0.004, '2.8': 0.003, '2.9': 0.002, '3.0': 0.002}, {'-3.0': 0.998, '-2.9': 0.998, '-2.8': 0.997, '-2.7': 0.996, '-2.6': 0.995, '-2.5': 0.993, '-2.4': 0.991, '-2.3': 0.988, '-2.2': 0.985, '-2.1': 0.981, '-2.0': 0.976, '-1.9': 0.97, '-1.8': 0.962, '-1.7': 0.954, '-1.6': 0.944, '-1.5': 0.932, '-1.4': 0.918, '-1.3': 0.902, '-1.2': 0.883, '-1.1': 0.863, '-1.0': 0.84, '-0.9': 0.815, '-0.8': 0.787, '-0.7': 0.757, '-0.6': 0.725, '-0.5': 0.691, '-0.4': 0.655, '-0.3': 0.618, '-0.2': 0.579, '-0.1': 0.54, '0.0': 0.5, '0.1': 0.46, '0.2': 0.421, '0.3': 0.382, '0.4': 0.345, '0.5': 0.309, '0.6': 0.275, '0.7': 0.243, '0.8': 0.213, '0.9': 0.185, '1.0': 0.16, '1.1': 0.137, '1.2': 0.117, '1.3': 0.098, '1.4': 0.082, '1.5': 0.068, '1.6': 0.056, '1.7': 0.046, '1.8': 0.038, '1.9': 0.03, '2.0': 0.024, '2.1': 0.019, '2.2': 0.015, '2.3': 0.012, '2.4': 0.009, '2.5': 0.007, '2.6': 0.005, '2.7': 0.004, '2.8': 0.003, '2.9': 0.002, '3.0': 0.002}, {'-3.0': 0.998, '-2.9': 0.998, '-2.8': 0.997, '-2.7': 0.996, '-2.6': 0.995, '-2.5': 0.993, '-2.4': 0.991, '-2.3': 0.988, '-2.2': 0.985, '-2.1': 0.981, '-2.0': 0.976, '-1.9': 0.97, '-1.8': 0.963, '-1.7': 0.954, '-1.6': 0.944, '-1.5': 0.932, '-1.4': 0.918, '-1.3': 0.902, '-1.2': 0.883, '-1.1': 0.863, '-1.0': 0.84, '-0.9': 0.815, '-0.8': 0.787, '-0.7': 0.757, '-0.6': 0.725, '-0.5': 0.691, '-0.4': 0.655, '-0.3': 0.618, '-0.2': 0.579, '-0.1': 0.54, '0.0': 0.5, '0.1': 0.46, '0.2': 0.421, '0.3': 0.382, '0.4': 0.345, '0.5': 0.309, '0.6': 0.275, '0.7': 0.243, '0.8': 0.213, '0.9': 0.185, '1.0': 0.16, '1.1': 0.137, '1.2': 0.117, '1.3': 0.098, '1.4': 0.082, '1.5': 0.068, '1.6': 0.056, '1.7': 0.046, '1.8': 0.037, '1.9': 0.03, '2.0': 0.024, '2.1': 0.019, '2.2': 0.015, '2.3': 0.012, '2.4': 0.009, '2.5': 0.007, '2.6': 0.005, '2.7': 0.004, '2.8': 0.003, '2.9': 0.002, '3.0': 0.002}, {'-3.0': 0.998, '-2.9': 0.998, '-2.8': 0.997, '-2.7': 0.996, '-2.6': 0.995, '-2.5': 0.993, '-2.4': 0.991, '-2.3': 0.988, '-2.2': 0.985, '-2.1': 0.981, '-2.0': 0.976, '-1.9': 0.97, '-1.8': 0.963, '-1.7': 0.954, '-1.6': 0.944, '-1.5': 0.932, '-1.4': 0.918, '-1.3': 0.902, '-1.2': 0.883, '-1.1': 0.863, '-1.0': 0.84, '-0.9': 0.815, '-0.8': 0.787, '-0.7': 0.757, '-0.6': 0.725, '-0.5': 0.691, '-0.4': 0.655, '-0.3': 0.618, '-0.2': 0.579, '-0.1': 0.54, '0.0': 0.5, '0.1': 0.46, '0.2': 0.421, '0.3': 0.382, '0.4': 0.345, '0.5': 0.309, '0.6': 0.275, '0.7': 0.243, '0.8': 0.213, '0.9': 0.185, '1.0': 0.16, '1.1': 0.137, '1.2': 0.117, '1.3': 0.098, '1.4': 0.082, '1.5': 0.068, '1.6': 0.056, '1.7': 0.046, '1.8': 0.037, '1.9': 0.03, '2.0': 0.024, '2.1': 0.019, '2.2': 0.015, '2.3': 0.012, '2.4': 0.009, '2.5': 0.007, '2.6': 0.005, '2.7': 0.004, '2.8': 0.003, '2.9': 0.002, '3.0': 0.002}, {'-3.0': 0.998, '-2.9': 0.998, '-2.8': 0.997, '-2.7': 0.996, '-2.6': 0.995, '-2.5': 0.993, '-2.4': 0.991, '-2.3': 0.988, '-2.2': 0.985, '-2.1': 0.981, '-2.0': 0.976, '-1.9': 0.97, '-1.8': 0.963, '-1.7': 0.954, '-1.6': 0.944, '-1.5': 0.932, '-1.4': 0.918, '-1.3': 0.902, '-1.2': 0.883, '-1.1': 0.863, '-1.0': 0.84, '-0.9': 0.815, '-0.8': 0.787, '-0.7': 0.757, '-0.6': 0.725, '-0.5': 0.691, '-0.4': 0.655, '-0.3': 0.618, '-0.2': 0.579, '-0.1': 0.54, '0.0': 0.5, '0.1': 0.46, '0.2': 0.421, '0.3': 0.382, '0.4': 0.345, '0.5': 0.309, '0.6': 0.275, '0.7': 0.243, '0.8': 0.213, '0.9': 0.185, '1.0': 0.16, '1.1': 0.137, '1.2': 0.117, '1.3': 0.098, '1.4': 0.082, '1.5': 0.068, '1.6': 0.056, '1.7': 0.046, '1.8': 0.037, '1.9': 0.03, '2.0': 0.024, '2.1': 0.019, '2.2': 0.015, '2.3': 0.012, '2.4': 0.009, '2.5': 0.007, '2.6': 0.005, '2.7': 0.004, '2.8': 0.003, '2.9': 0.002, '3.0': 0.002}, {'-3.0': 0.998, '-2.9': 0.998, '-2.8': 0.997, '-2.7': 0.996, '-2.6': 0.995, '-2.5': 0.993, '-2.4': 0.991, '-2.3': 0.988, '-2.2': 0.985, '-2.1': 0.981, '-2.0': 0.976, '-1.9': 0.97, '-1.8': 0.963, '-1.7': 0.954, '-1.6': 0.944, '-1.5': 0.932, '-1.4': 0.918, '-1.3': 0.902, '-1.2': 0.884, '-1.1': 0.863, '-1.0': 0.84, '-0.9': 0.815, '-0.8': 0.787, '-0.7': 0.757, '-0.6': 0.725, '-0.5': 0.691, '-0.4': 0.655, '-0.3': 0.618, '-0.2': 0.579, '-0.1': 0.54, '0.0': 0.5, '0.1': 0.46, '0.2': 0.421, '0.3': 0.382, '0.4': 0.345, '0.5': 0.309, '0.6': 0.275, '0.7': 0.243, '0.8': 0.213, '0.9': 0.185, '1.0': 0.16, '1.1': 0.137, '1.2': 0.116, '1.3': 0.098, '1.4': 0.082, '1.5': 0.068, '1.6': 0.056, '1.7': 0.046, '1.8': 0.037, '1.9': 0.03, '2.0': 0.024, '2.1': 0.019, '2.2': 0.015, '2.3': 0.012, '2.4': 0.009, '2.5': 0.007, '2.6': 0.005, '2.7': 0.004, '2.8': 0.003, '2.9': 0.002, '3.0': 0.002}, {'-3.0': 0.998, '-2.9': 0.998, '-2.8': 0.997, '-2.7': 0.996, '-2.6': 0.995, '-2.5': 0.993, '-2.4': 0.991, '-2.3': 0.988, '-2.2': 0.985, '-2.1': 0.981, '-2.0': 0.976, '-1.9': 0.97, '-1.8': 0.963, '-1.7': 0.954, '-1.6': 0.944, '-1.5': 0.932, '-1.4': 0.918, '-1.3': 0.902, '-1.2': 0.884, '-1.1': 0.863, '-1.0': 0.84, '-0.9': 0.815, '-0.8': 0.787, '-0.7': 0.757, '-0.6': 0.725, '-0.5': 0.691, '-0.4': 0.655, '-0.3': 0.618, '-0.2': 0.579, '-0.1': 0.54, '0.0': 0.5, '0.1': 0.46, '0.2': 0.421, '0.3': 0.382, '0.4': 0.345, '0.5': 0.309, '0.6': 0.275, '0.7': 0.243, '0.8': 0.213, '0.9': 0.185, '1.0': 0.16, '1.1': 0.137, '1.2': 0.116, '1.3': 0.098, '1.4': 0.082, '1.5': 0.068, '1.6': 0.056, '1.7': 0.046, '1.8': 0.037, '1.9': 0.03, '2.0': 0.024, '2.1': 0.019, '2.2': 0.015, '2.3': 0.012, '2.4': 0.009, '2.5': 0.007, '2.6': 0.005, '2.7': 0.004, '2.8': 0.003, '2.9': 0.002, '3.0': 0.002}, {'-3.0': 0.998, '-2.9': 0.998, '-2.8': 0.997, '-2.7': 0.996, '-2.6': 0.995, '-2.5': 0.993, '-2.4': 0.991, '-2.3': 0.988, '-2.2': 0.985, '-2.1': 0.981, '-2.0': 0.976, '-1.9': 0.97, '-1.8': 0.963, '-1.7': 0.954, '-1.6': 0.944, '-1.5': 0.932, '-1.4': 0.918, '-1.3': 0.902, '-1.2': 0.884, '-1.1': 0.863, '-1.0': 0.84, '-0.9': 0.815, '-0.8': 0.787, '-0.7': 0.757, '-0.6': 0.725, '-0.5': 0.691, '-0.4': 0.655, '-0.3': 0.618, '-0.2': 0.579, '-0.1': 0.54, '0.0': 0.5, '0.1': 0.46, '0.2': 0.421, '0.3': 0.382, '0.4': 0.345, '0.5': 0.309, '0.6': 0.275, '0.7': 0.243, '0.8': 0.213, '0.9': 0.185, '1.0': 0.16, '1.1': 0.137, '1.2': 0.116, '1.3': 0.098, '1.4': 0.082, '1.5': 0.068, '1.6': 0.056, '1.7': 0.046, '1.8': 0.037, '1.9': 0.03, '2.0': 0.024, '2.1': 0.019, '2.2': 0.015, '2.3': 0.012, '2.4': 0.009, '2.5': 0.007, '2.6': 0.005, '2.7': 0.004, '2.8': 0.003, '2.9': 0.002, '3.0': 0.002}, {'-3.0': 0.998, '-2.9': 0.998, '-2.8': 0.997, '-2.7': 0.996, '-2.6': 0.995, '-2.5': 0.993, '-2.4': 0.991, '-2.3': 0.988, '-2.2': 0.985, '-2.1': 0.981, '-2.0': 0.976, '-1.9': 0.97, '-1.8': 0.963, '-1.7': 0.954, '-1.6': 0.944, '-1.5': 0.932, '-1.4': 0.918, '-1.3': 0.902, '-1.2': 0.884, '-1.1': 0.863, '-1.0': 0.84, '-0.9': 0.815, '-0.8': 0.787, '-0.7': 0.757, '-0.6': 0.725, '-0.5': 0.691, '-0.4': 0.655, '-0.3': 0.618, '-0.2': 0.579, '-0.1': 0.54, '0.0': 0.5, '0.1': 0.46, '0.2': 0.421, '0.3': 0.382, '0.4': 0.345, '0.5': 0.309, '0.6': 0.275, '0.7': 0.243, '0.8': 0.213, '0.9': 0.185, '1.0': 0.16, '1.1': 0.137, '1.2': 0.116, '1.3': 0.098, '1.4': 0.082, '1.5': 0.068, '1.6': 0.056, '1.7': 0.046, '1.8': 0.037, '1.9': 0.03, '2.0': 0.024, '2.1': 0.019, '2.2': 0.015, '2.3': 0.012, '2.4': 0.009, '2.5': 0.007, '2.6': 0.005, '2.7': 0.004, '2.8': 0.003, '2.9': 0.002, '3.0': 0.002}, {'-3.0': 0.998, '-2.9': 0.998, '-2.8': 0.997, '-2.7': 0.996, '-2.6': 0.995, '-2.5': 0.993, '-2.4': 0.991, '-2.3': 0.988, '-2.2': 0.985, '-2.1': 0.981, '-2.0': 0.976, '-1.9': 0.97, '-1.8': 0.963, '-1.7': 0.954, '-1.6': 0.944, '-1.5': 0.932, '-1.4': 0.918, '-1.3': 0.902, '-1.2': 0.884, '-1.1': 0.863, '-1.0': 0.84, '-0.9': 0.815, '-0.8': 0.787, '-0.7': 0.757, '-0.6': 0.725, '-0.5': 0.691, '-0.4': 0.655, '-0.3': 0.618, '-0.2': 0.579, '-0.1': 0.54, '0.0': 0.5, '0.1': 0.46, '0.2': 0.421, '0.3': 0.382, '0.4': 0.345, '0.5': 0.309, '0.6': 0.275, '0.7': 0.243, '0.8': 0.213, '0.9': 0.185, '1.0': 0.16, '1.1': 0.137, '1.2': 0.116, '1.3': 0.098, '1.4': 0.082, '1.5': 0.068, '1.6': 0.056, '1.7': 0.046, '1.8': 0.037, '1.9': 0.03, '2.0': 0.024, '2.1': 0.019, '2.2': 0.015, '2.3': 0.012, '2.4': 0.009, '2.5': 0.007, '2.6': 0.005, '2.7': 0.004, '2.8': 0.003, '2.9': 0.002, '3.0': 0.002}, {'-3.0': 0.998, '-2.9': 0.998, '-2.8': 0.997, '-2.7': 0.996, '-2.6': 0.995, '-2.5': 0.993, '-2.4': 0.991, '-2.3': 0.988, '-2.2': 0.985, '-2.1': 0.981, '-2.0': 0.976, '-1.9': 0.97, '-1.8': 0.963, '-1.7': 0.954, '-1.6': 0.944, '-1.5': 0.932, '-1.4': 0.918, '-1.3': 0.902, '-1.2': 0.884, '-1.1': 0.863, '-1.0': 0.84, '-0.9': 0.815, '-0.8': 0.787, '-0.7': 0.757, '-0.6': 0.725, '-0.5': 0.691, '-0.4': 0.655, '-0.3': 0.618, '-0.2': 0.579, '-0.1': 0.54, '0.0': 0.5, '0.1': 0.46, '0.2': 0.421, '0.3': 0.382, '0.4': 0.345, '0.5': 0.309, '0.6': 0.275, '0.7': 0.243, '0.8': 0.213, '0.9': 0.185, '1.0': 0.16, '1.1': 0.137, '1.2': 0.116, '1.3': 0.098, '1.4': 0.082, '1.5': 0.068, '1.6': 0.056, '1.7': 0.046, '1.8': 0.037, '1.9': 0.03, '2.0': 0.024, '2.1': 0.019, '2.2': 0.015, '2.3': 0.012, '2.4': 0.009, '2.5': 0.007, '2.6': 0.005, '2.7': 0.004, '2.8': 0.003, '2.9': 0.002, '3.0': 0.002}, {'-3.0': 0.998, '-2.9': 0.998, '-2.8': 0.997, '-2.7': 0.996, '-2.6': 0.995, '-2.5': 0.993, '-2.4': 0.991, '-2.3': 0.988, '-2.2': 0.985, '-2.1': 0.981, '-2.0': 0.976, '-1.9': 0.97, '-1.8': 0.963, '-1.7': 0.954, '-1.6': 0.944, '-1.5': 0.932, '-1.4': 0.918, '-1.3': 0.902, '-1.2': 0.884, '-1.1': 0.863, '-1.0': 0.84, '-0.9': 0.815, '-0.8': 0.787, '-0.7': 0.757, '-0.6': 0.725, '-0.5': 0.691, '-0.4': 0.655, '-0.3': 0.618, '-0.2': 0.579, '-0.1': 0.54, '0.0': 0.5, '0.1': 0.46, '0.2': 0.421, '0.3': 0.382, '0.4': 0.345, '0.5': 0.309, '0.6': 0.275, '0.7': 0.243, '0.8': 0.213, '0.9': 0.185, '1.0': 0.16, '1.1': 0.137, '1.2': 0.116, '1.3': 0.098, '1.4': 0.082, '1.5': 0.068, '1.6': 0.056, '1.7': 0.046, '1.8': 0.037, '1.9': 0.03, '2.0': 0.024, '2.1': 0.019, '2.2': 0.015, '2.3': 0.012, '2.4': 0.009, '2.5': 0.007, '2.6': 0.005, '2.7': 0.004, '2.8': 0.003, '2.9': 0.002, '3.0': 0.002}, {'-3.0': 0.998, '-2.9': 0.998, '-2.8': 0.997, '-2.7': 0.996, '-2.6': 0.995, '-2.5': 0.993, '-2.4': 0.991, '-2.3': 0.988, '-2.2': 0.985, '-2.1': 0.981, '-2.0': 0.976, '-1.9': 0.97, '-1.8': 0.963, '-1.7': 0.954, '-1.6': 0.944, '-1.5': 0.932, '-1.4': 0.918, '-1.3': 0.902, '-1.2': 0.884, '-1.1': 0.863, '-1.0': 0.84, '-0.9': 0.815, '-0.8': 0.787, '-0.7': 0.757, '-0.6': 0.725, '-0.5': 0.691, '-0.4': 0.655, '-0.3': 0.618, '-0.2': 0.579, '-0.1': 0.54, '0.0': 0.5, '0.1': 0.46, '0.2': 0.421, '0.3': 0.382, '0.4': 0.345, '0.5': 0.309, '0.6': 0.275, '0.7': 0.243, '0.8': 0.213, '0.9': 0.185, '1.0': 0.16, '1.1': 0.137, '1.2': 0.116, '1.3': 0.098, '1.4': 0.082, '1.5': 0.068, '1.6': 0.056, '1.7': 0.046, '1.8': 0.037, '1.9': 0.03, '2.0': 0.024, '2.1': 0.019, '2.2': 0.015, '2.3': 0.012, '2.4': 0.009, '2.5': 0.007, '2.6': 0.005, '2.7': 0.004, '2.8': 0.003, '2.9': 0.002, '3.0': 0.002}, {'-3.0': 0.998, '-2.9': 0.998, '-2.8': 0.997, '-2.7': 0.996, '-2.6': 0.995, '-2.5': 0.993, '-2.4': 0.991, '-2.3': 0.988, '-2.2': 0.985, '-2.1': 0.981, '-2.0': 0.976, '-1.9': 0.97, '-1.8': 0.963, '-1.7': 0.954, '-1.6': 0.944, '-1.5': 0.932, '-1.4': 0.918, '-1.3': 0.902, '-1.2': 0.884, '-1.1': 0.863, '-1.0': 0.84, '-0.9': 0.815, '-0.8': 0.787, '-0.7': 0.757, '-0.6': 0.725, '-0.5': 0.691, '-0.4': 0.655, '-0.3': 0.618, '-0.2': 0.579, '-0.1': 0.54, '0.0': 0.5, '0.1': 0.46, '0.2': 0.421, '0.3': 0.382, '0.4': 0.345, '0.5': 0.309, '0.6': 0.275, '0.7': 0.243, '0.8': 0.213, '0.9': 0.185, '1.0': 0.16, '1.1': 0.137, '1.2': 0.116, '1.3': 0.098, '1.4': 0.082, '1.5': 0.068, '1.6': 0.056, '1.7': 0.046, '1.8': 0.037, '1.9': 0.03, '2.0': 0.024, '2.1': 0.019, '2.2': 0.015, '2.3': 0.012, '2.4': 0.009, '2.5': 0.007, '2.6': 0.005, '2.7': 0.004, '2.8': 0.003, '2.9': 0.002, '3.0': 0.002}, {'-3.0': 0.998, '-2.9': 0.998, '-2.8': 0.997, '-2.7': 0.996, '-2.6': 0.995, '-2.5': 0.993, '-2.4': 0.991, '-2.3': 0.988, '-2.2': 0.985, '-2.1': 0.981, '-2.0': 0.976, '-1.9': 0.97, '-1.8': 0.963, '-1.7': 0.954, '-1.6': 0.944, '-1.5': 0.932, '-1.4': 0.918, '-1.3': 0.902, '-1.2': 0.884, '-1.1': 0.863, '-1.0': 0.84, '-0.9': 0.815, '-0.8': 0.787, '-0.7': 0.757, '-0.6': 0.725, '-0.5': 0.691, '-0.4': 0.655, '-0.3': 0.618, '-0.2': 0.579, '-0.1': 0.54, '0.0': 0.5, '0.1': 0.46, '0.2': 0.421, '0.3': 0.382, '0.4': 0.345, '0.5': 0.309, '0.6': 0.275, '0.7': 0.243, '0.8': 0.213, '0.9': 0.185, '1.0': 0.16, '1.1': 0.137, '1.2': 0.116, '1.3': 0.098, '1.4': 0.082, '1.5': 0.068, '1.6': 0.056, '1.7': 0.046, '1.8': 0.037, '1.9': 0.03, '2.0': 0.024, '2.1': 0.019, '2.2': 0.015, '2.3': 0.012, '2.4': 0.009, '2.5': 0.007, '2.6': 0.005, '2.7': 0.004, '2.8': 0.003, '2.9': 0.002, '3.0': 0.002}, {'-3.0': 0.998, '-2.9': 0.998, '-2.8': 0.997, '-2.7': 0.996, '-2.6': 0.995, '-2.5': 0.993, '-2.4': 0.991, '-2.3': 0.988, '-2.2': 0.985, '-2.1': 0.981, '-2.0': 0.976, '-1.9': 0.97, '-1.8': 0.963, '-1.7': 0.954, '-1.6': 0.944, '-1.5': 0.932, '-1.4': 0.918, '-1.3': 0.902, '-1.2': 0.884, '-1.1': 0.863, '-1.0': 0.84, '-0.9': 0.815, '-0.8': 0.787, '-0.7': 0.757, '-0.6': 0.725, '-0.5': 0.691, '-0.4': 0.655, '-0.3': 0.618, '-0.2': 0.579, '-0.1': 0.54, '0.0': 0.5, '0.1': 0.46, '0.2': 0.421, '0.3': 0.382, '0.4': 0.345, '0.5': 0.309, '0.6': 0.275, '0.7': 0.243, '0.8': 0.213, '0.9': 0.185, '1.0': 0.16, '1.1': 0.137, '1.2': 0.116, '1.3': 0.098, '1.4': 0.082, '1.5': 0.068, '1.6': 0.056, '1.7': 0.046, '1.8': 0.037, '1.9': 0.03, '2.0': 0.024, '2.1': 0.019, '2.2': 0.015, '2.3': 0.012, '2.4': 0.009, '2.5': 0.007, '2.6': 0.005, '2.7': 0.004, '2.8': 0.003, '2.9': 0.002, '3.0': 0.002}, {'-3.0': 0.998, '-2.9': 0.998, '-2.8': 0.997, '-2.7': 0.996, '-2.6': 0.995, '-2.5': 0.993, '-2.4': 0.991, '-2.3': 0.988, '-2.2': 0.985, '-2.1': 0.981, '-2.0': 0.976, '-1.9': 0.97, '-1.8': 0.963, '-1.7': 0.954, '-1.6': 0.944, '-1.5': 0.932, '-1.4': 0.918, '-1.3': 0.902, '-1.2': 0.884, '-1.1': 0.863, '-1.0': 0.84, '-0.9': 0.815, '-0.8': 0.787, '-0.7': 0.757, '-0.6': 0.725, '-0.5': 0.691, '-0.4': 0.655, '-0.3': 0.618, '-0.2': 0.579, '-0.1': 0.54, '0.0': 0.5, '0.1': 0.46, '0.2': 0.421, '0.3': 0.382, '0.4': 0.345, '0.5': 0.309, '0.6': 0.275, '0.7': 0.243, '0.8': 0.213, '0.9': 0.185, '1.0': 0.16, '1.1': 0.137, '1.2': 0.116, '1.3': 0.098, '1.4': 0.082, '1.5': 0.068, '1.6': 0.056, '1.7': 0.046, '1.8': 0.037, '1.9': 0.03, '2.0': 0.024, '2.1': 0.019, '2.2': 0.015, '2.3': 0.012, '2.4': 0.009, '2.5': 0.007, '2.6': 0.005, '2.7': 0.004, '2.8': 0.003, '2.9': 0.002, '3.0': 0.002}, {'-3.0': 0.998, '-2.9': 0.998, '-2.8': 0.997, '-2.7': 0.996, '-2.6': 0.995, '-2.5': 0.993, '-2.4': 0.991, '-2.3': 0.988, '-2.2': 0.985, '-2.1': 0.981, '-2.0': 0.976, '-1.9': 0.97, '-1.8': 0.963, '-1.7': 0.954, '-1.6': 0.944, '-1.5': 0.932, '-1.4': 0.918, '-1.3': 0.902, '-1.2': 0.884, '-1.1': 0.863, '-1.0': 0.84, '-0.9': 0.815, '-0.8': 0.787, '-0.7': 0.757, '-0.6': 0.725, '-0.5': 0.691, '-0.4': 0.655, '-0.3': 0.618, '-0.2': 0.579, '-0.1': 0.54, '0.0': 0.5, '0.1': 0.46, '0.2': 0.421, '0.3': 0.382, '0.4': 0.345, '0.5': 0.309, '0.6': 0.275, '0.7': 0.243, '0.8': 0.213, '0.9': 0.185, '1.0': 0.16, '1.1': 0.137, '1.2': 0.116, '1.3': 0.098, '1.4': 0.082, '1.5': 0.068, '1.6': 0.056, '1.7': 0.046, '1.8': 0.037, '1.9': 0.03, '2.0': 0.024, '2.1': 0.019, '2.2': 0.015, '2.3': 0.012, '2.4': 0.009, '2.5': 0.007, '2.6': 0.005, '2.7': 0.004, '2.8': 0.003, '2.9': 0.002, '3.0': 0.002}, {'-3.0': 0.998, '-2.9': 0.998, '-2.8': 0.997, '-2.7': 0.996, '-2.6': 0.995, '-2.5': 0.993, '-2.4': 0.991, '-2.3': 0.988, '-2.2': 0.985, '-2.1': 0.981, '-2.0': 0.976, '-1.9': 0.97, '-1.8': 0.963, '-1.7': 0.954, '-1.6': 0.944, '-1.5': 0.932, '-1.4': 0.918, '-1.3': 0.902, '-1.2': 0.884, '-1.1': 0.863, '-1.0': 0.84, '-0.9': 0.815, '-0.8': 0.787, '-0.7': 0.757, '-0.6': 0.725, '-0.5': 0.691, '-0.4': 0.655, '-0.3': 0.618, '-0.2': 0.579, '-0.1': 0.54, '0.0': 0.5, '0.1': 0.46, '0.2': 0.421, '0.3': 0.382, '0.4': 0.345, '0.5': 0.309, '0.6': 0.275, '0.7': 0.243, '0.8': 0.213, '0.9': 0.185, '1.0': 0.16, '1.1': 0.137, '1.2': 0.116, '1.3': 0.098, '1.4': 0.082, '1.5': 0.068, '1.6': 0.056, '1.7': 0.046, '1.8': 0.037, '1.9': 0.03, '2.0': 0.024, '2.1': 0.019, '2.2': 0.015, '2.3': 0.012, '2.4': 0.009, '2.5': 0.007, '2.6': 0.005, '2.7': 0.004, '2.8': 0.003, '2.9': 0.002, '3.0': 0.002}, {'-3.0': 0.998, '-2.9': 0.998, '-2.8': 0.997, '-2.7': 0.996, '-2.6': 0.995, '-2.5': 0.993, '-2.4': 0.991, '-2.3': 0.988, '-2.2': 0.985, '-2.1': 0.981, '-2.0': 0.976, '-1.9': 0.97, '-1.8': 0.963, '-1.7': 0.954, '-1.6': 0.944, '-1.5': 0.932, '-1.4': 0.918, '-1.3': 0.902, '-1.2': 0.884, '-1.1': 0.863, '-1.0': 0.84, '-0.9': 0.815, '-0.8': 0.787, '-0.7': 0.757, '-0.6': 0.725, '-0.5': 0.691, '-0.4': 0.655, '-0.3': 0.618, '-0.2': 0.579, '-0.1': 0.54, '0.0': 0.5, '0.1': 0.46, '0.2': 0.421, '0.3': 0.382, '0.4': 0.345, '0.5': 0.309, '0.6': 0.275, '0.7': 0.243, '0.8': 0.213, '0.9': 0.185, '1.0': 0.16, '1.1': 0.137, '1.2': 0.116, '1.3': 0.098, '1.4': 0.082, '1.5': 0.068, '1.6': 0.056, '1.7': 0.046, '1.8': 0.037, '1.9': 0.03, '2.0': 0.024, '2.1': 0.019, '2.2': 0.015, '2.3': 0.012, '2.4': 0.009, '2.5': 0.007, '2.6': 0.005, '2.7': 0.004, '2.8': 0.003, '2.9': 0.002, '3.0': 0.002}, {'-3.0': 0.998, '-2.9': 0.998, '-2.8': 0.997, '-2.7': 0.996, '-2.6': 0.995, '-2.5': 0.993, '-2.4': 0.991, '-2.3': 0.988, '-2.2': 0.985, '-2.1': 0.981, '-2.0': 0.976, '-1.9': 0.97, '-1.8': 0.963, '-1.7': 0.954, '-1.6': 0.944, '-1.5': 0.932, '-1.4': 0.918, '-1.3': 0.902, '-1.2': 0.884, '-1.1': 0.863, '-1.0': 0.84, '-0.9': 0.815, '-0.8': 0.787, '-0.7': 0.757, '-0.6': 0.725, '-0.5': 0.691, '-0.4': 0.655, '-0.3': 0.618, '-0.2': 0.579, '-0.1': 0.54, '0.0': 0.5, '0.1': 0.46, '0.2': 0.421, '0.3': 0.382, '0.4': 0.345, '0.5': 0.309, '0.6': 0.275, '0.7': 0.243, '0.8': 0.213, '0.9': 0.185, '1.0': 0.16, '1.1': 0.137, '1.2': 0.116, '1.3': 0.098, '1.4': 0.082, '1.5': 0.068, '1.6': 0.056, '1.7': 0.046, '1.8': 0.037, '1.9': 0.03, '2.0': 0.024, '2.1': 0.019, '2.2': 0.015, '2.3': 0.012, '2.4': 0.009, '2.5': 0.007, '2.6': 0.005, '2.7': 0.004, '2.8': 0.003, '2.9': 0.002, '3.0': 0.002}, {'-3.0': 0.998, '-2.9': 0.998, '-2.8': 0.997, '-2.7': 0.996, '-2.6': 0.995, '-2.5': 0.993, '-2.4': 0.991, '-2.3': 0.988, '-2.2': 0.985, '-2.1': 0.981, '-2.0': 0.976, '-1.9': 0.97, '-1.8': 0.963, '-1.7': 0.954, '-1.6': 0.944, '-1.5': 0.932, '-1.4': 0.918, '-1.3': 0.902, '-1.2': 0.884, '-1.1': 0.863, '-1.0': 0.84, '-0.9': 0.815, '-0.8': 0.787, '-0.7': 0.757, '-0.6': 0.725, '-0.5': 0.691, '-0.4': 0.655, '-0.3': 0.618, '-0.2': 0.579, '-0.1': 0.54, '0.0': 0.5, '0.1': 0.46, '0.2': 0.421, '0.3': 0.382, '0.4': 0.345, '0.5': 0.309, '0.6': 0.275, '0.7': 0.243, '0.8': 0.213, '0.9': 0.185, '1.0': 0.16, '1.1': 0.137, '1.2': 0.116, '1.3': 0.098, '1.4': 0.082, '1.5': 0.068, '1.6': 0.056, '1.7': 0.046, '1.8': 0.037, '1.9': 0.03, '2.0': 0.024, '2.1': 0.019, '2.2': 0.015, '2.3': 0.012, '2.4': 0.009, '2.5': 0.007, '2.6': 0.005, '2.7': 0.004, '2.8': 0.003, '2.9': 0.002, '3.0': 0.002}, {'-3.0': 0.998, '-2.9': 0.998, '-2.8': 0.997, '-2.7': 0.996, '-2.6': 0.995, '-2.5': 0.993, '-2.4': 0.991, '-2.3': 0.988, '-2.2': 0.985, '-2.1': 0.981, '-2.0': 0.976, '-1.9': 0.97, '-1.8': 0.963, '-1.7': 0.954, '-1.6': 0.944, '-1.5': 0.932, '-1.4': 0.918, '-1.3': 0.902, '-1.2': 0.884, '-1.1': 0.863, '-1.0': 0.84, '-0.9': 0.815, '-0.8': 0.787, '-0.7': 0.757, '-0.6': 0.725, '-0.5': 0.691, '-0.4': 0.655, '-0.3': 0.618, '-0.2': 0.579, '-0.1': 0.54, '0.0': 0.5, '0.1': 0.46, '0.2': 0.421, '0.3': 0.382, '0.4': 0.345, '0.5': 0.309, '0.6': 0.275, '0.7': 0.243, '0.8': 0.213, '0.9': 0.185, '1.0': 0.16, '1.1': 0.137, '1.2': 0.116, '1.3': 0.098, '1.4': 0.082, '1.5': 0.068, '1.6': 0.056, '1.7': 0.046, '1.8': 0.037, '1.9': 0.03, '2.0': 0.024, '2.1': 0.019, '2.2': 0.015, '2.3': 0.012, '2.4': 0.009, '2.5': 0.007, '2.6': 0.005, '2.7': 0.004, '2.8': 0.003, '2.9': 0.002, '3.0': 0.002}, {'-3.0': 0.998, '-2.9': 0.998, '-2.8': 0.997, '-2.7': 0.996, '-2.6': 0.995, '-2.5': 0.993, '-2.4': 0.991, '-2.3': 0.988, '-2.2': 0.985, '-2.1': 0.981, '-2.0': 0.976, '-1.9': 0.97, '-1.8': 0.963, '-1.7': 0.954, '-1.6': 0.944, '-1.5': 0.932, '-1.4': 0.918, '-1.3': 0.902, '-1.2': 0.884, '-1.1': 0.863, '-1.0': 0.84, '-0.9': 0.815, '-0.8': 0.787, '-0.7': 0.757, '-0.6': 0.725, '-0.5': 0.691, '-0.4': 0.655, '-0.3': 0.618, '-0.2': 0.579, '-0.1': 0.54, '0.0': 0.5, '0.1': 0.46, '0.2': 0.421, '0.3': 0.382, '0.4': 0.345, '0.5': 0.309, '0.6': 0.275, '0.7': 0.243, '0.8': 0.213, '0.9': 0.185, '1.0': 0.16, '1.1': 0.137, '1.2': 0.116, '1.3': 0.098, '1.4': 0.082, '1.5': 0.068, '1.6': 0.056, '1.7': 0.046, '1.8': 0.037, '1.9': 0.03, '2.0': 0.024, '2.1': 0.019, '2.2': 0.015, '2.3': 0.012, '2.4': 0.009, '2.5': 0.007, '2.6': 0.005, '2.7': 0.004, '2.8': 0.003, '2.9': 0.002, '3.0': 0.002}, {'-3.0': 0.998, '-2.9': 0.998, '-2.8': 0.997, '-2.7': 0.996, '-2.6': 0.995, '-2.5': 0.993, '-2.4': 0.991, '-2.3': 0.988, '-2.2': 0.985, '-2.1': 0.981, '-2.0': 0.976, '-1.9': 0.97, '-1.8': 0.963, '-1.7': 0.954, '-1.6': 0.944, '-1.5': 0.932, '-1.4': 0.918, '-1.3': 0.902, '-1.2': 0.884, '-1.1': 0.863, '-1.0': 0.84, '-0.9': 0.815, '-0.8': 0.787, '-0.7': 0.757, '-0.6': 0.725, '-0.5': 0.691, '-0.4': 0.655, '-0.3': 0.618, '-0.2': 0.579, '-0.1': 0.54, '0.0': 0.5, '0.1': 0.46, '0.2': 0.421, '0.3': 0.382, '0.4': 0.345, '0.5': 0.309, '0.6': 0.275, '0.7': 0.243, '0.8': 0.213, '0.9': 0.185, '1.0': 0.16, '1.1': 0.137, '1.2': 0.116, '1.3': 0.098, '1.4': 0.082, '1.5': 0.068, '1.6': 0.056, '1.7': 0.046, '1.8': 0.037, '1.9': 0.03, '2.0': 0.024, '2.1': 0.019, '2.2': 0.015, '2.3': 0.012, '2.4': 0.009, '2.5': 0.007, '2.6': 0.005, '2.7': 0.004, '2.8': 0.003, '2.9': 0.002, '3.0': 0.002}, {'-3.0': 0.998, '-2.9': 0.998, '-2.8': 0.997, '-2.7': 0.996, '-2.6': 0.995, '-2.5': 0.993, '-2.4': 0.991, '-2.3': 0.988, '-2.2': 0.985, '-2.1': 0.981, '-2.0': 0.976, '-1.9': 0.97, '-1.8': 0.963, '-1.7': 0.954, '-1.6': 0.944, '-1.5': 0.932, '-1.4': 0.918, '-1.3': 0.902, '-1.2': 0.884, '-1.1': 0.863, '-1.0': 0.84, '-0.9': 0.815, '-0.8': 0.787, '-0.7': 0.757, '-0.6': 0.725, '-0.5': 0.691, '-0.4': 0.655, '-0.3': 0.618, '-0.2': 0.579, '-0.1': 0.54, '0.0': 0.5, '0.1': 0.46, '0.2': 0.421, '0.3': 0.382, '0.4': 0.345, '0.5': 0.309, '0.6': 0.275, '0.7': 0.243, '0.8': 0.213, '0.9': 0.185, '1.0': 0.16, '1.1': 0.137, '1.2': 0.116, '1.3': 0.098, '1.4': 0.082, '1.5': 0.068, '1.6': 0.056, '1.7': 0.046, '1.8': 0.037, '1.9': 0.03, '2.0': 0.024, '2.1': 0.019, '2.2': 0.015, '2.3': 0.012, '2.4': 0.009, '2.5': 0.007, '2.6': 0.005, '2.7': 0.004, '2.8': 0.003, '2.9': 0.002, '3.0': 0.002}, {'-3.0': 0.999, '-2.9': 0.998, '-2.8': 0.997, '-2.7': 0.997, '-2.6': 0.995, '-2.5': 0.994, '-2.4': 0.992, '-2.3': 0.989, '-2.2': 0.986, '-2.1': 0.982, '-2.0': 0.977, '-1.9': 0.971, '-1.8': 0.964, '-1.7': 0.955, '-1.6': 0.945, '-1.5': 0.933, '-1.4': 0.919, '-1.3': 0.903, '-1.2': 0.885, '-1.1': 0.864, '-1.0': 0.841, '-0.9': 0.816, '-0.8': 0.788, '-0.7': 0.758, '-0.6': 0.726, '-0.5': 0.691, '-0.4': 0.655, '-0.3': 0.618, '-0.2': 0.579, '-0.1': 0.54, '0.0': 0.5, '0.1': 0.46, '0.2': 0.421, '0.3': 0.382, '0.4': 0.345, '0.5': 0.309, '0.6': 0.274, '0.7': 0.242, '0.8': 0.212, '0.9': 0.184, '1.0': 0.159, '1.1': 0.136, '1.2': 0.115, '1.3': 0.097, '1.4': 0.081, '1.5': 0.067, '1.6': 0.055, '1.7': 0.045, '1.8': 0.036, '1.9': 0.029, '2.0': 0.023, '2.1': 0.018, '2.2': 0.014, '2.3': 0.011, '2.4': 0.008, '2.5': 0.006, '2.6': 0.005, '2.7': 0.003, '2.8': 0.003, '2.9': 0.002, '3.0': 0.001}];\nexport default TToPval;\n","import React, { useEffect, useState } from \"react\";\nimport { floor, random, mean, round, std, sqrt, abs } from \"mathjs\";\nimport TToPval from \"./TToPval.js\";\nimport DotPlot from \"../DotPlot.js\";\nimport { Alert, Button, Container, Col, Input, Row, InputGroupText, InputGroupAddon, InputGroup } from \"reactstrap\";\nimport { populationMean, dataFromDistribution } from \"../../lib/stats-utils.js\";\nimport PropTypes from \"prop-types\";\n\nexport default function TTest({ shape, hypothesis, mue0 }) {\n  const [popArr, setPopArr] = useState([]);\n  const [sampleMean, setSampleMean] = useState(0);\n  const [sampleSd, setSampleSd] = useState(0);\n  const [sampleSize, setSampleSize] = useState(0);\n  const [alpha, setAlpha] = useState(0);\n  const [tScore, setTScore] = useState(0);\n  const [sim, setSim] = useState(0);\n  const [pVal, setPVal] = useState(0);\n\n  useEffect(() => {\n    setPopArr(dataFromDistribution(shape, 2000, { mean: 69, low: 59, hi: 79 }))\n  }, [shape]);\n\n  // Helper functions\n  // Take a sample given a sample size and a population, update sampleMean and sampleSd\n  const handleSample = (size, pop) => {\n    // Sampling randomly from the population by index\n    var index = {};\n    for (let i = 0; i < popArr.length; i++) {\n      index[i]=false;\n    } // Can be used to check if the index has been generated before\n    var sampleArr = [];\n    var j = 0;\n\n    while (j < size) {\n      const ranNum = floor(random()*popArr.length);\n      if (!index[ranNum]) {\n        index[ranNum] = true;\n        sampleArr.push(pop[ranNum][0]);\n        j += 1;\n      }\n    }\n\n    const x_bar = round(mean(sampleArr) * 1000)/1000;\n    const sd = round(std(sampleArr)*1000)/1000;\n    const tScore = getT(x_bar, mue0, sd, size);\n    const pVal = getPVal(hypothesis, tScore, sampleSize - 1);\n\n    setSampleMean(x_bar);\n    setSampleSd(sd);\n    setTScore(tScore);\n    setPVal(pVal);\n    setSim(1);\n  }\n\n  const getT = (x_bar, mue0, sd, sampleSize) => {\n    return round(((x_bar - mue0)/(sd/sqrt(sampleSize)))*1000)/1000;\n  }\n\n  const getPVal = (hypothesis, t, degreeOF)=>{\n    var dof;\n    if (degreeOF>121) {\n      dof = 121;\n    } else {\n      dof = degreeOF;\n    }\n\n    if ((t > 3)||(t < -3)) {\n      switch(hypothesis) {\n        case 0:\n          return 0;\n        case 1:\n          return 1;\n        case 2:\n          return 0;\n        default:\n          throw new Error();\n      }\n    } else {\n      const p1 = TToPval[dof - 1][t.toFixed(1)];\n      switch(hypothesis) {\n        case 0:\n          return p1;\n        case 1:\n          return 1 - p1;\n        case 2:\n          return 2*TToPval[dof - 1][abs(t.toFixed(1))/2];\n        default:\n          throw new Error();\n      }\n    }\n  }\n\n  return (\n    <Container fluid>\n      <p>Let’s test your assertion by taking a sample and setting our tolerance for making a type-one error α!</p>\n      <Row>\n        <Col xs=\"6\">\n          <InputGroup>\n            <InputGroupAddon addonType=\"prepend\">\n              <InputGroupText>Sample Size</InputGroupText>\n            </InputGroupAddon>\n            <Input\n              type=\"number\"\n              step={1}\n              value={sampleSize}\n              min={1}\n              max={popArr.length}\n              onChange={(event) => setSampleSize(event.target.value)}\n            />\n          </InputGroup>\n        </Col>\n        <Col xs=\"6\">\n          <InputGroup>\n            <InputGroupAddon addonType=\"prepend\">\n              <InputGroupText>Alpha</InputGroupText>\n            </InputGroupAddon>\n            <Input\n              type=\"number\"\n              step={0.01}\n              value={alpha}\n              min={0}\n              max={1}\n              onChange={(event) => setAlpha(event.target.value)}\n            />\n          </InputGroup>\n        </Col>\n      </Row>\n      <br/>\n      <Button\n        color=\"primary\"\n        disabled={(sampleSize <= 0) || (sampleSize > popArr.length)}\n        onClick={() => handleSample(sampleSize, popArr)}\n      >\n        Sample\n      </Button>\n      <br/>\n      <br/>\n      {(sim >= 1) &&\n      <Container>\n        <Alert color=\"secondary\" className=\"Center\" >\n          <p>This sample yields the following data:</p>\n          <p>Sample Mean: &nbsp;{sampleMean}</p>\n          <p>Sample Standard Deviation:&nbsp;{sampleSd} </p>\n          <p>The test statistic is &nbsp;{tScore}</p>\n          <p>This test statistic yields a p-value of P(Z&gt;teststat) = &nbsp;{pVal}. </p>\n          <p>Therefore we {pVal<alpha? \"reject\":\"fail to reject\"} the null hypothesis. </p>\n        </Alert>\n        <br/>\n        <Row className=\"Center\">\n          <p>\n            Press here to reveal the true population distribution and mean.&nbsp;\n            <Button color=\"primary\" onClick={() => setSim(2)}>Reveal</Button>\n          </p>\n        </Row>\n      </Container>\n      }\n      <br/>\n      {(sim === 2) &&\n      <Container>\n        <Row className=\"Center\">\n          <Container fluid >\n            <Row>\n              <Alert color=\"secondary\" className=\"Center\">\n                <p>\n                  We queried the monthly Milk Production of {popArr.length} cows and plotted the results on the following chart.\n                </p>\n                <p>\n                  The population mean is {(popArr.length > 0) && populationMean(popArr).toFixed(2)}.\n                </p>\n              </Alert>\n            </Row>\n            <Row>\n              <DotPlot\n                series={[{name: 'Population', data: popArr}]}\n                title=\"Milk Production\"\n                xMin={55}\n                xMax={81}\n                yMax={40}\n                xLabel=\"Gallons\"\n              />\n            </Row>\n          </Container>\n        </Row>\n        <Row className=\"Center\">\n          <p>Our hypothesis test conclusion was therefore {(pVal < alpha) ? \"correct\" : \"incorrect\"}.</p>\n        </Row>\n      </Container>}\n    </Container>\n  )\n}\n\nTTest.propTypes = {\n  shape: PropTypes.string.isRequired,\n  hypothesis: PropTypes.number.isRequired,\n  mue0: PropTypes.number.isRequired,\n}\n","import React from \"react\";\nimport SelectorButtonGroup from \"../SelectorButtonGroup\";\nimport { Row } from \"reactstrap\";\nimport PropTypes from \"prop-types\";\n\nexport default function TestInputs({ testType, setTestType, popShape, setPopType }) {\n\n  return (\n    <div style={{ padding: 20 }}>\n      <Row>\n        <div>\n          Choose a kind of hypothesis test: {\" \"}\n          <SelectorButtonGroup options={[\"oneSample\", \"twoSample\"]} select={setTestType} selected={testType}/>\n        </div>\n      </Row>\n      <Row style={{ padding: 10 }}>\n        <div>\n          <div style={{ padding: 10 }}>Choose a population distribution shape:</div>\n          <SelectorButtonGroup options={[\"Normal\", \"Uniform\", \"Mystery\", \"??Unknown??\"]} select={setPopType} selected={popShape}/>\n        </div>\n      </Row>\n    </div>\n  )\n}\n\nTestInputs.propTypes = {\n  testType: PropTypes.string.isRequired,\n  setTestType: PropTypes.func.isRequired,\n  popShape: PropTypes.string.isRequired,\n  setPopType: PropTypes.func.isRequired\n}\n","import React, { useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Dropdown, DropdownItem, DropdownToggle, DropdownMenu } from \"reactstrap\";\nimport { HYPOTHESIS_OPTIONS } from \"../../lib/constants\";\n\nexport default function HypothesisDropdown({ testType, setHypothesis }) {\n  const [open, setOpen] = useState(false);\n  const [selected, setSelected] = useState();\n\n  useEffect(() => {\n    setSelected(HYPOTHESIS_OPTIONS[testType][0].hypoText)\n    setHypothesis(HYPOTHESIS_OPTIONS[testType][0])\n  }, [testType, setHypothesis])\n\n  const selectOption = (option) => {\n    setHypothesis(option);\n    setSelected(option.hypoText)\n  }\n\n  const menuOptions = HYPOTHESIS_OPTIONS[testType].map((obj) =>\n    <DropdownItem onClick={() => selectOption(obj)} key={obj.hypoText}>{obj.hypoText}</DropdownItem>\n  );\n\n  return (\n    <Dropdown isOpen={open} toggle={() => setOpen(!open)}>\n      <DropdownToggle caret>\n        {selected}\n      </DropdownToggle>\n      <DropdownMenu>\n        {menuOptions}\n      </DropdownMenu>\n    </Dropdown>\n  )\n}\n\nHypothesisDropdown.propTypes = {\n  testType: PropTypes.string.isRequired,\n  setHypothesis: PropTypes.func.isRequired\n}\n","import React, { useEffect, useState }  from \"react\";\nimport TTest from \"./TTest.js\";\nimport { Alert, Container, Row, Col, Button, Input, InputGroup, InputGroupAddon, InputGroupText } from \"reactstrap\";\nimport TestInputs from \"./TestInputs.js\";\nimport HypothesisDropdown from \"./HypothesisDropdown.js\";\nimport _ from \"lodash\";\n\nexport default function HTSimulation() {\n  const [pplShape, setPplShape] = useState(\"\");\n  const [testType, setTestType] = useState(\"\");\n  const [hypothesis, setHypothesis] = useState();\n  const [mue0, setMue0] = useState(0);\n  const [stage, setStage] = useState(1);\n\n  useEffect(() => {\n    if ((pplShape !== \"\") && (testType !== \"\")) {\n      setStage(2)\n    }\n  }, [pplShape, testType]);\n\n  return (\n    <div className=\"MainContainer\">\n      <TestInputs testType={testType} setTestType={setTestType} popShape={pplShape} setPopType={setPplShape}/>\n      {(stage >= 2) &&\n      <Container fluid>\n        <Row>\n          <Alert color=\"secondary\" className=\"Center\">\n            <p>The true population distribution will be revealed at the end.</p>\n            {(testType === \"oneSample\") ? (\n              <p>\n                Suppose that our farmer has changed the variety of feed the cows eat. It might be reasonable to think that the cows now produce more or less milk than they had before. As a researcher, what assertion would you like to make about these cows’ milk production now? Choose an Option and specify a hypothesized amount. To help make an informed guess, note that the distribution of millk production before we changed the feed had a mean of about 64 gallons\n              </p>\n              ) : (\n              <p>\n                Suppose that our farmer has changed the variety of feed the cows eat. It might be reasonable to think that the cows now produce more or less milk than they had before. As a researcher, what assertion would you like to make about these cows’ milk production now? Let Population 1 denote the cows before the feed change and Population 2 denote the cows after the change. Choose an Option below.\n              </p>\n              )\n            }\n          </Alert>\n        </Row>\n        <br/>\n        <Row>\n          <Col xs=\"6\">\n            <HypothesisDropdown testType={testType} setHypothesis={setHypothesis}/>\n          </Col>\n          <Col xs=\"4\">\n            {(testType === \"oneSample\")  &&\n            <InputGroup>\n              <Input\n                className=\"Center\"\n                type=\"number\"\n                value={mue0}\n                step={1}\n                min={1}\n                max={1000}\n                onChange={(event) => setMue0(event.target.value)}\n              />\n              <InputGroupAddon addonType=\"append\">\n                <InputGroupText>gallons of milk per day.</InputGroupText>\n              </InputGroupAddon>\n            </InputGroup>\n            }\n          </Col>\n        </Row>\n        <br/>\n        <Button color=\"primary\" onClick={() => setStage(3)}> Continue </Button>\n        <br/>\n        <br/>\n        {(stage >= 3) &&\n        <Container>\n          <Row>\n            <Alert color=\"secondary\" className=\"Center\" >\n              <p>This means our null and alternative hypotheses are given by:</p>\n              <p>{hypothesis.nullH} {(testType === \"oneSample\") && mue0}</p>\n              <p>{hypothesis.alterH} {(testType === \"oneSample\") && mue0}</p>\n            </Alert>\n          </Row>\n          <br/>\n          <Row className=\"Center\">\n            <TTest\n              shape={(pplShape === \"??Unknown??\") ? _.sample([\"Normal\", \"Uniform\", \"Mystery\"]) : pplShape}\n              hypothesis={hypothesis.id}\n              mue0={mue0}\n            />\n          </Row>\n        </Container>\n        }\n      </Container>\n      }\n    </div>\n  )\n}\n","import React from \"react\";\nimport { Alert } from \"reactstrap\";\nimport HTSimulation from \"./HTSimulation.js\";\n\nexport default function HypothesisTesting() {\n\n  return (\n    <div className=\"MainContainer\">\n      <Alert style={{ width: \"90%\", margin: 'auto' }} color=\"primary\">\n        Hypothesis Testing\n      </Alert>\n      <Alert style={{ width: \"90%\", margin: 'auto' }} color=\"primary\">\n        When we conduct a test of hypotheses, we use the information provided by a sample to make a conclusion about population parameters that we cannot directly observe. We are able to make a connection between the sample and the population by using the rules that govern probability distributions. Due to the central limit theorem, we can make a variety of assertions about the probable location of points in a distribution, which allows us to make assertions about where population parameters might be located relative to the data we have collected from a sample. This allows us to test hypotheses.\n      </Alert>\n      <br/>\n      <HTSimulation/>\n    </div>\n  )\n}\n","/*\n\n  Displays a slider for the user to choose a number of random points and a button to generate them\n\n*/\nimport React, {  useState } from \"react\";\nimport { Button, Input, InputGroup, InputGroupAddon, InputGroupText } from \"reactstrap\";\nimport PropTypes from 'prop-types';\n\nexport default function NewPointsInput({ generatePoints }) {\n  const [numPoints, setNumPoints] = useState(5);\n\n  return (\n    <InputGroup style={{height: \"30px\", width: \"400px\", margin: \"auto\"}}>\n      <Input\n        type='range'\n        className=\"custom-range\"\n        style={{width: \"50%\"}}\n        min={4}\n        max={10}\n        value={numPoints}\n        onChange={(event) => setNumPoints(event.target.value)}\n      />\n      <InputGroupAddon addonType=\"append\">\n        <InputGroupText>{numPoints}</InputGroupText>\n      </InputGroupAddon>\n      <Button\n          outline\n          color=\"primary\"\n          onClick={() => generatePoints(numPoints)}\n        >\n          New Points\n        </Button>\n    </InputGroup>\n  );\n}\n\nNewPointsInput.propTypes = {\n  generatePoints: PropTypes.func.isRequired,\n}\n","/*\n\n  Displays a HighCharts scatterplot for the Least Squares data points\n\n*/\nimport React, { useEffect, useState } from 'react';\nimport '../../styles/dark-unica.css';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official'\nimport 'highcharts/modules/annotations';\nimport { abs } from \"mathjs\";\nimport PropTypes from 'prop-types';\nimport { dataObjectArrayType } from \"../../lib/types.js\"\n\nexport default function LeastSquaresChart({ points, linePoints, setSquareAreas }) {\n  const [myChart, setMyChart] = useState({\n    title: {\n      text: \"\"\n    },\n    legend: {\n      enabled: false\n    },\n    chart: {\n      type: 'line',\n      plotBorderColor: '#000000',\n      plotBorderWidth: 1,\n      margin : [100,100,100,100],\n      width  : 600,\n      height : 600\n    },\n    tooltip: {\n      headerFormat: \"\",\n      pointFormat: \"x: {point.x:.2f}<br/>y: {point.y:.2f}\",\n      hideDelay: 100\n    },\n    xAxis: {\n      title : {\n        enabled: false\n      },\n      min: 0,\n      max: 20,\n      tickInterval: 2\n    },\n    yAxis: {\n      title : {\n        enabled: false\n      },\n      min: 0,\n      max: 20,\n      tickInterval: 2\n    }\n  });\n\n  // returns an array of points to create a square shape in highcharts\n  const buildSquare = (p1, p2) => {\n    const dist = abs(p1.y - p2.y);\n    const lowestPt = p1.y < p2.y ? p1 : p2;\n    return [{\n        x: lowestPt.x,\n        y: lowestPt.y,\n        xAxis: 0,\n        yAxis: 0\n      }, {\n        x: lowestPt.x + dist,\n        y: lowestPt.y,\n        xAxis: 0,\n        yAxis: 0\n      }, {\n        x: lowestPt.x + dist,\n        y: lowestPt.y + dist,\n        xAxis: 0,\n        yAxis: 0\n      }, {\n        x: lowestPt.x,\n        y: lowestPt.y + dist,\n        xAxis: 0,\n        yAxis: 0\n      }, {\n        x: lowestPt.x,\n        y: lowestPt.y,\n        xAxis: 0,\n        yAxis: 0\n      }\n    ];\n  }\n\n  useEffect(() => {\n    // generate pairs for the corresponding points to create squares\n    const pairs = [];\n    linePoints.forEach((p1) => {\n      points.forEach((p2) => {\n        if (p1.x === p2.x) {\n          pairs.push({p1: p1, p2: p2})\n        }\n      });\n    });\n\n    const areas = pairs.map(({p1, p2}) => abs(p1.y - p2.y) ** 2);\n    setSquareAreas(areas);\n\n    // create the actual square objects for highcharts\n    const squares = pairs.map(({p1, p2}) => (\n      {\n        dashStyle: \"solid\",\n        fill: \"rgba(255, 255, 255, 0)\",\n        points: buildSquare(p1, p2),\n        type: 'path'\n      })\n    );\n\n    const newChart = {\n      series: [\n        {\n          type: \"scatter\",\n          marker: {\n            radius: 5,\n          },\n          data: points,\n        },\n        {\n          type: 'line',\n          data: linePoints,\n          marker: {\n            enabled: true,\n            fillColor: 'orange'\n          },\n          label: {\n            enabled: false\n          }\n        }\n      ],\n      annotations: [{\n        draggable: '',\n        shapes: squares\n      }]\n    }\n\n    setMyChart(newChart);\n  }, [points, linePoints, setSquareAreas]);\n\n  return (\n    <HighchartsReact highcharts={Highcharts} options={myChart}/>\n  );\n}\n\nLeastSquaresChart.propTypes = {\n  points: dataObjectArrayType.isRequired,\n  linePoints: dataObjectArrayType.isRequired,\n  setSquareAreas: PropTypes.func.isRequired\n}\n","/*\n\n  Displays a button for the user to plot their guess or a button to generate the correct best fit line\n\n*/\nimport React from \"react\";\nimport { Button } from \"reactstrap\";\nimport PropTypes from 'prop-types';\n\nexport default function PlotLine({ stage, setStage, squareAreas, generateBestLine }) {\n\n  return (\n    (stage === 2) ? (\n      <Button outline color='primary' onClick={() => setStage(3)}>Plot Your Guess</Button>\n    ) : (\n      <div>\n        <p>Sum Squares: {squareAreas.reduce((a, b) => a + b, 0).toFixed(2)}</p>\n        <Button outline color=\"info\" onClick={() => generateBestLine()}>Reveal the Least Squares Line</Button>\n      </div>\n    )\n  );\n}\n\nPlotLine.propTypes = {\n  stage: PropTypes.number.isRequired,\n  setStage: PropTypes.func.isRequired,\n  squareAreas: PropTypes.arrayOf(PropTypes.number).isRequired,\n  generateBestLine: PropTypes.func.isRequired,\n}\n","/*\n\n  Displays the Least Squares simulation\n\n*/\nimport React, { useEffect, useState } from \"react\";\nimport { Row, Col } from \"reactstrap\";\nimport NewPointsInput from \"./NewPointsInput\";\nimport LeastSquaresChart from \"./LeastSquaresChart.js\";\nimport PlotLine from \"./PlotLine.js\";\nimport regression from \"regression\";\nimport InputSlider from \"../InputSlider.js\";\nimport { random } from \"mathjs\";\n\nexport default function LeastSquaresSimulation() {\n  const [points, setPoints] = useState([]);\n  const [linePoints, setLinePoints] = useState([]);\n  const [stage, setStage] = useState(1);\n  const [squareAreas, setSquareAreas] = useState([]);\n  const [slope, setSlope] = useState(1);\n  const [intercept, setIntercept] = useState(1);\n\n  useEffect(() => {\n    if (stage === 2) {\n      setLinePoints([]);\n      setSquareAreas([]);\n      setSlope(1);\n      setIntercept(1);\n    }\n  }, [stage]);\n\n  useEffect(() => {\n    if (stage === 3) {\n      setSquareAreas([]);\n      const linearPts = [{x: 0, y: 0}, ...points].map((point) => ({x: point.x, y: (point.x * +slope) + +intercept}));\n      linearPts.sort((a, b) => a.x - b.x);\n      setLinePoints(linearPts);\n    }\n  }, [stage, slope, intercept, points]);\n\n  const generatePoints = (num) => {\n    const newPoints = [];\n    for (let i = 0; i < num; i++) {\n      const x = random() * 15 + 2;\n      const y = random() * 15 + 2;\n      newPoints.push({x: x, y: y});\n    }\n    setPoints(newPoints);\n    setStage(2);\n  }\n\n  const generateBestLine = () => {\n    const { equation } = regression.linear(points.map(({x, y}) => [x, y]), { precision: 1 });\n    setSlope(equation[0]);\n    setIntercept(equation[1]);\n  }\n\n  return (\n    <div>\n      <Row style={{marginLeft: -100, marginRight: 0}}>\n        <Col xs=\"auto\">\n          <LeastSquaresChart points={points} linePoints={linePoints} setSquareAreas={setSquareAreas}/>\n        </Col>\n        <Col xs={{size: 3, offset: 3}} md={{size: 3, offset: 0}} style={{paddingTop: \"100px\"}}>\n          <NewPointsInput generatePoints={generatePoints}/>\n          <br/>\n          {(stage === 2) && <p>Guess a Slope and Y-Intercept to fit the points</p>}\n          {(stage === 3) && <p>Want to try again? Guess a different slope and y-intercept to reduce the Sum of Squares!</p>}\n          {(stage >= 2) &&\n            <div>\n              <h4>Intercept</h4>\n              <InputSlider value={intercept} min={-20} max={20} step={0.1} onChange={(value) => setIntercept(value)}/>\n              <br/>\n              <h4>Slope</h4>\n              <InputSlider value={slope} min={-10} max={10} step={0.1} onChange={(value) => setSlope(value)}/>\n              <br/>\n              <PlotLine stage={stage} setStage={setStage} squareAreas={squareAreas} generateBestLine={generateBestLine}/>\n            </div>\n          }\n        </Col>\n      </Row>\n    </div>\n  )\n}\n","/*\n\n  A container component that holds the description and simulation for Least Squares\n\n*/\nimport React from \"react\";\nimport LeastSquaresSimulation from \"./LeastSquaresSimulation\";\nimport { Alert } from \"reactstrap\";\n\nexport default function LeastSquares() {\n  return (\n    <div className=\"MainContainer\">\n      <Alert style={{ width: \"50%\", margin: 'auto' }} color=\"primary\">\n        Least Squares\n      </Alert>\n      <br/>\n      <LeastSquaresSimulation/>\n    </div>\n  );\n}\n","/*\n\n  A container component for the various simulations\n\n*/\nimport React from 'react';\nimport LawOfLargeNumbers from './LawOfLargeNumbers/LawOfLargeNumbers.js';\nimport CentralLimitTheorem from './CentralLimitTheorem/CentralLimitTheorem.js';\nimport JointDistributions from './JointDistributions/JointDistributions.js';\nimport OmittedVariableBias from \"./OmittedVariableBias/OmittedVariableBias.js\";\nimport ConfidenceIntervals from './ConfidenceIntervals/ConfidenceIntervals.js';\nimport HypothesisTesting from './HypothesisTesting/HypothesisTesting.js';\nimport { Button } from 'reactstrap';\nimport LeastSquares from './LeastSquares/LeastSquares.js';\nimport PropTypes from 'prop-types';\n\nexport default function SimulationContainer({ mode, setMode }) {\n  return (\n    <div className=\"App\">\n      <Button outline color='danger' id=\"Menu\" onClick={() => setMode(\"Home\")}>MENU</Button>\n      <div className=\"MiniLogo\"/>\n      {mode === 'Law of Large Numbers' && <LawOfLargeNumbers/>}\n      {mode === 'Central Limit Theorem' && <CentralLimitTheorem/>}\n      {mode === 'Joint Distributions' && <JointDistributions/>}\n      {mode === 'Least Squares' && <LeastSquares/>}\n      {mode === 'Omitted Variable Bias' && <OmittedVariableBias/>}\n      {mode === 'Confidence Intervals' && <ConfidenceIntervals/>}\n      {mode === 'Hypothesis Testing' && <HypothesisTesting/>}\n    </div>\n  )\n}\n\nSimulationContainer.propTypes = {\n  setMode: PropTypes.func.isRequired,\n  mode: PropTypes.oneOf([\n    'Home',\n    'Law of Large Numbers',\n    'Central Limit Theorem',\n    'Joint Distributions',\n    'Least Squares',\n    'Omitted Variable Bias',\n    'Confidence Intervals',\n    'Hypothesis Testing'\n  ]).isRequired,\n}\n","/*\n\n  Displays the StartHere button and then the menu once the button is clicked\n\n*/\nimport React, { useEffect, useState } from 'react';\nimport SimBar from './SimBar.js';\nimport StartHere from './StartHere';\nimport { Fade } from 'reactstrap';\nimport SimulationContainer from './SimulationContainer.js';\n\nexport default function SimulationMenu() {\n  const [mode, setMode] = useState(\"Home\");\n  const [start, setStart] = useState(true);\n  const [logo, setLogo] = useState(true);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setLogo(false);\n    }, 3500);\n  }, []);\n\n  return (\n    start ? (\n      <div>\n        <div className=\"App-bg\"/>\n        {!logo && <StartHere start={start} showApp={() => setStart(false)}/>}\n      </div>\n    ) : (\n      <div>\n        {(mode === \"Home\") ? (\n          <Fade in={(mode === \"Home\")} style={{ display: (mode === \"Home\") ? 'block' : 'none' }}>\n            <div className=\"Nav\" key={'unkey'}>\n              <SimBar setSection={setMode}/>\n            </div>\n          </Fade>\n        ) : (\n          <SimulationContainer mode={mode} setMode={setMode}/>\n        )}\n      </div>\n    )\n  );\n}\n","import React from 'react';\nimport styles from './styles/App.css';  // eslint-disable-line\nimport SimulationMenu from './components/SimulationMenu.js';\n\nexport default function App() {\n\n  return (\n    <div className=\"Wrapper\">\n      <SimulationMenu/>\n    </div>\n  );\n}\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    || window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404\n        || response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\n// import registerServiceWorker from './registerServiceWorker';\nimport { unregister } from './registerServiceWorker';\nunregister();\n\nReactDOM.render(<App />, document.getElementById('root'));\n// registerServiceWorker();\n"],"sourceRoot":""}