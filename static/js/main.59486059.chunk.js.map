{"version":3,"sources":["components/SimBarOption.js","lib/constants.js","components/SimBar.js","components/StartHere.js","components/SelectorButtonGroup.js","components/PopBar.js","components/Collapsable.js","lib/types.js","components/DotPlot.js","components/PopTable.js","components/ChartContainer.js","components/SampleSizeInput.js","lib/stats-utils.js","components/LawOfLargeNumbers/SimulateSamples.js","components/LawOfLargeNumbers/LLNSimulation.js","components/LawOfLargeNumbers/LawOfLargeNumbers.js","components/CentralLimitTheorem/SampleMeanChart.js","components/CentralLimitTheorem/SampleMeansSimulator.js","components/CentralLimitTheorem/SampleMeansTable.js","components/CentralLimitTheorem/CLTSimulation.js","components/CentralLimitTheorem/CentralLimitTheorem.js","components/JointDistributions/MeanSDInput.js","components/JointDistributions/JointChart.js","components/JointDistributions/JDCharts.js","components/InputSlider.js","components/JointDistributions/JDSimulation.js","components/JointDistributions/JointDistributions.js","components/OmittedVariableBias/CoefficientInput.js","components/OmittedVariableBias/OmittedVariableChart.js","components/OmittedVariableBias/OVBSimulation.js","components/OmittedVariableBias/OmittedVariableBias.js","components/ConfidenceIntervals/ConfidenceInputs.js","components/ConfidenceIntervals/ConfidenceIntervalsChart.js","components/ConfidenceIntervals/ManySamplesInput.js","components/ConfidenceIntervals/SamplesTable.js","components/ConfidenceIntervals/PopulationChart.js","components/ConfidenceIntervals/CISimulation.js","components/ConfidenceIntervals/ConfidenceIntervals.js","components/HypothesisTesting/PopulationChartReveal.js","components/HypothesisTesting/DataDisplay.js","components/HypothesisTesting/SampleSizeAlphaInput.js","components/HypothesisTesting/PerformTest.js","components/HypothesisTesting/TestInputs.js","components/HypothesisTesting/HypothesisSelector.js","components/HypothesisTesting/HTSimulation.js","components/HypothesisTesting/HypothesisTesting.js","components/LeastSquares/NewPointsInput.js","components/LeastSquares/LeastSquaresChart.js","components/LeastSquares/PlotLine.js","components/LeastSquares/LeastSquaresSimulation.js","components/LeastSquares/LeastSquares.js","components/SimulationContainer.js","components/SimulationMenu.js","App.js","registerServiceWorker.js","index.js"],"names":["SimBarOption","section","setSection","Card","body","outline","color","className","CardText","style","overflowY","boxSizing","description","Button","onClick","name","VALUES","Normal","xmaxval","xminval","ymaxval","title","xLabel","Uniform","Exponential","Mystery","VALUES_ALT","TEXTS","TEXTS_ALT","HYPOTHESIS_OPTIONS","oneSample","type","hypoText","nullH","alterH","tails","twoSample","MODULES","SimBar","sections","map","StartHere","start","showApp","Fade","in","SelectorButtonGroup","options","select","selected","buttons","option","backgroundColor","ButtonGroup","PopBar","sim","setPop","useState","setSelected","modes","mode","Collapsable","children","margin","width","textAlign","marginBottom","isOpened","springConfig","presets","height","padding","distributionType","PropTypes","oneOf","dataObjectArrayType","arrayOf","shape","x","number","isRequired","y","id","string","data","enableMouseTracking","bool","showInLegend","visible","label","object","size","mean","lowerConf","upperConf","confidenceLevel","distribution","oneOfType","DotPlot","series","xMin","xMax","yMax","chart","setChart","useEffect","newChart","plotOptions","animation","duration","easing","legend","symbolHeight","symbolWidth","symbolRadius","xAxis","min","max","enabled","text","startOnTick","endOnTick","yAxis","seriesObject","length","turboThreshold","tooltip","pointFormat","highcharts","Highcharts","Label","PopTable","popArray","sampleIDs","popShape","rows","includes","undefined","Table","striped","yLabel","ChartContainer","popMean","sampled","sampleMean","format","Container","fluid","Row","Alert","Col","lg","md","obj","_","round","SampleSizeInput","maxSize","handleClick","sampleSize","setSampleSize","InputGroup","Input","align","placeholder","value","onChange","event","target","InputGroupAddon","addonType","disabled","generateNormal","standardDev","population","PD","rnorm","num","counts","countBy","entries","forEach","amt","count","i","push","shuffle","index","generateUniform","low","hi","runif","generateExponential","lambda","rexp","generateChiSquared","degreesOfFreedom","rchisq","generateMystery","firstrange","sqrt","firstpopMin","secondrange","secondpopMin","clearedArray","popDict","newCleared","stateCopy","sum","j","random","pop","finalPopArray","Array","fill","val","dataFromDistribution","distType","getDistributionFunction","populationMean","p","populationStandardDev","std","SimulateSamples","setSampled","meanLine","setMeanLine","states","hover","normal","inactive","n","timer","setInterval","clearInterval","sample","avg","Collapse","isOpen","CardBody","LLNSimulation","stage","setStage","setSampleMean","setPopArray","setPopMean","newPop","newMean","marginTop","LawOfLargeNumbers","setPopType","SampleMeanChart","props","state","sampleMeans","popMeans","values","sd","curve","this","show","sampleMeanSeries","xAxisMeasurement","yAxisMeasurement","normalized","Math","apply","sampleMax","sampleMin","sampleMaxX","update","setState","showLastLabel","Component","SampleMeansSimulator","addSamples","numberResamples","setNumberResamples","resampleSize","setResampleSize","resample","samplePop","newSamples","runSim","SampleMeansTable","tableBody","CLTSimulation","mainSampleSize","setSampleMeans","standardNormal","setStandardNormal","xvalue","s","newMeans","active","means","newSampleMeans","CentralLimitTheorem","MeanSDInput","setMean","setSD","InputGroupText","step","JointChart","jointData","sharedOptions","nodeId","marginLeft","marginRight","position","float","colors","node","yScale","yFormat","e","formattedX","formattedY","axisBottom","tickSize","legendPosition","legendOffset","axisLeft","JDCharts","parentData","childData","setNodeId","handleMouseMove","useCallback","handleMouseLeave","animate","top","right","bottom","left","xScale","blendMode","xFormat","nodeSize","useMemo","enableGridX","enableGridY","onMouseMove","onMouseLeave","InputSlider","JDSimulation","parentMean","setParentMean","childMean","setChildMean","parentSD","setParentSD","childSD","setChildSD","correlation","setCorrelation","parent","child","joint","allData","setAllData","xl","xs","toFixed","covariance","abs","covMatrix","MultivariateNormal","jointSeries","parentHeight","childHeight","parentCounts","parentSeries","childCounts","childSeries","generate","JointWrapper","CoefficientInput","beta","setBeta","delta","setDelta","OmittedVariableChart","dataPoints","naiveLine","correctedLine","myChart","setMyChart","zoomtype","OVBSimulation","setCovariance","setSeries","showCorrect","setShowCorrect","points","generateData","OBS","generatePoints","slope","int","epsilon","ones","colOne","colTwo","scores","scorePoint","studyScores","naiveReg","regression","linear","naiveSlope","equation","naiveInt","X","transpose","matrix","Y","inverse","inv","multiply","bHat","parseFloat","get","sm","adjustCorrelation","covarianceMatrix","stdX","stdY","seriesArr","a","b","generateSeries","offset","OmittedVariableBias","ConfidenceInputs","setDistType","confLevel","setConfLevel","pct","slice","ConfidenceIntervalsChart","samples","containsMean","doesntContainMean","sampleObject","high","tooltipFormat","headerFormat","outside","borderColor","inverted","zoomType","events","selection","point","click","cursor","reversed","tickPixelInterval","tickInterval","centerInCategory","allowPointSelect","marker","symbol","radius","zIndex","toString","ManySamplesInput","populationSize","SamplesTable","samplesTable","toUpperCase","reverse","overflow","PopulationChart","More","CISimulation","setSamples","unselect","charts","generateSamples","replications","sampleObjects","ciFunction","jStat","normalci","tci","indexedSamples","filter","ConfidenceIntervals","PopulationChartReveal","popArr","pVal","alpha","DataDisplay","testStatistic","pValue","SampleSizeAlphaInputs","setAlpha","popSize","PerformTest","mue0","setPopArr","setSample","setSim","sampleSD","zscore","ztest","getPValue","TestInputs","testType","setTestType","HypothesisSelector","setHypothesis","setMue0","open","setOpen","menuOptions","DropdownItem","InputGroupButtonDropdown","toggle","DropdownToggle","caret","DropdownMenu","HTSimulation","pplShape","setPplShape","hypothesis","HypothesisTesting","NewPointsInput","numPoints","setNumPoints","LeastSquaresChart","linePoints","setSquareAreas","plotBorderColor","plotBorderWidth","hideDelay","buildSquare","p1","p2","dist","lowestPt","pairs","areas","squares","dashStyle","fillColor","annotations","draggable","shapes","PlotLine","squareAreas","generateBestLine","reduce","LeastSquaresSimulation","setPoints","setLinePoints","setSlope","intercept","setIntercept","linearPts","sort","paddingTop","newPoints","precision","LeastSquares","SimulationContainer","setMode","SimulationMenu","setStart","logo","setLogo","setTimeout","display","App","Boolean","window","location","hostname","match","navigator","serviceWorker","ready","then","registration","unregister","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.59486059.chunk.js","sourcesContent":["import React from 'react';\nimport { Button, Card, CardText } from 'reactstrap';\nimport PropTypes from 'prop-types';\n\nexport default function SimBarOption({ section, setSection }) {\n  return (\n    <Card body outline color=\"primary\" className=\"simOption\">\n      <CardText style={{overflowY: 'auto', boxSizing: 'content-box' }}>{section.description}</CardText>\n      <Button outline color='primary' onClick={() => setSection(section.name)}>\n        {section.name}\n      </Button>\n    </Card>\n  );\n}\n\nSimBarOption.propTypes = {\n  setSection: PropTypes.func.isRequired,\n  section: PropTypes.shape({\n    name: PropTypes.string,\n    description: PropTypes.string\n  }).isRequired,\n}\n","export const SAMPLE_SIZE = 2000;\n\nexport const VALUES = {\n  Normal: { xmaxval: 74, xminval: 56, ymaxval: 40, title: \"Milk Production\", xLabel: \"Gallons\" },\n  Uniform: { xmaxval: 10, xminval: -10, ymaxval: 25, title: \"Lottery Outcome\", xLabel: \"Dollars\"},\n  Exponential: { xmaxval: 400, xminval: 0, ymaxval: 10, title: \"Duration of Telemarketer Call\", xLabel: \"Duration (seconds)\"},\n  \"Chi-Squared\": {xmaxval: 25, xminval: 0, ymaxval: 40, title: \"Money Spent on Lunch\", xLabel: \"Dollars\"},\n  Mystery: { xmaxval: 80, xminval: 50, ymaxval: 40, title:\"Alien Female Height\", xLabel: \"Height (in)\"}\n}\n\nexport const VALUES_ALT = {\n  Normal: { xmaxval: 74, xminval: 56, title: \"Milk Production\", xLabel: \"Gallons\" },\n  Uniform: { xmaxval: 74, xminval: 56, title: \"Alien Female Height\", xLabel: \"Height (in)\"},\n  Exponential: { xmaxval: 400, xminval: 0, title: \"Duration of Telemarketer Call\", xLabel: \"Duration (seconds)\"},\n  \"Chi-Squared\": {xmaxval: 25, xminval: 0, title: \"Money Spent on Lunch\", xLabel: \"Dollars\"}\n}\n\nexport const TEXTS = {\n  Normal: [\"monthly Milk Production\", \"cows\",\"produced\", \" gallons a month.\"],\n  //Uniform: ['the wait time', 'people at the DMV in VT', \"reported a total time of\", \" minutes.\"],\n  Exponential: [\"duration\", \"Telemarketer Calls\",\"reported a duration of\", \" seconds on a call.\"],\n  \"Chi-Squared\": [\"expenditure\", \"workers on lunch\",\"reported an expenditure of\",\" dollars on lunch.\"],\n  Mystery: ['the height', 'Alien Females from planet Stata', \"reported a height of\", \" inches.\"],\n}\n\nexport const TEXTS_ALT = {\n  Normal: [\"monthly Milk Production\", \"cows\"],\n  Uniform: ['the height', 'Alien Females from planet Stata'],\n  Exponential: [\"duration\", \"Telemarketer Calls\"],\n  \"Chi-Squared\": [\"expenditure\", \"workers on lunch\"]\n}\n\nexport const HYPOTHESIS_OPTIONS = {\n  oneSample: [\n    {\n      type: \"≤\",\n      hypoText: \"Option 1: These cows produce more than \",\n      nullH: \"H_0: μ ≤  \",\n      alterH: \"H_a: μ >  \",\n      tails: 1\n    },\n    {\n      type: \"≥\",\n      hypoText: \"Option 2: These cows produce less than \" ,\n      nullH: \"H_0: μ ≥  \",\n      alterH: \"H_a: μ <  \",\n      tails: 1\n    },\n    {\n      type: \"=\",\n      hypoText: \"Option 3: These cows produce an amount not equal to \",\n      nullH: \"H_0: μ =  \",\n      alterH: \"H_a: μ ≠  \",\n      tails: 2\n    }\n  ],\n  twoSample: [\n    {\n      hypoText: \"Option 1: These cows produce more than they did before.\",\n      nullH: \"H_0: μ_1 - μ_2 ≥ 0\",\n      alterH: \"H_a: μ_1 - μ_2 < 0\",\n      tails: 1\n    },\n    {\n      hypoText: \"Option 2: These cows produce less than they did before\",\n      nullH: \"H_0: μ_1 - μ_2 ≤ 0\",\n      alterH: \"H_a: μ_1 - μ_2 > 0\",\n      tails: 1\n    },\n    {\n      hypoText: \"Option 3: These cows produce a different amount now compared to before.\",\n      nullH: \"H_0: μ_1 - μ_2 = 0\",\n      alterH: \"H_a: μ_1 - μ_2 ≠ 0\",\n      tails: 2\n    }\n  ]\n}\n\nexport const MODULES = [\n  {\n    name: 'Law of Large Numbers',\n    description: 'The Law of Large Numbers tells us that that the sample mean approaches the mean of the population as we increase the sample size. This simulation investigates the behavior of the sample mean as we change the sample size.',\n  },\n  {\n    name: \"Central Limit Theorem\",\n    description: \"The Central Limit Theorem states that, for sufficiently large samples, the sample mean is approximately normally distributed, even if the underlying population is not normally distributed (or if we have no idea what the underlying population looks like). This simulation investigates how the distribution of the sample mean is affected by the sample size and the shape of the population distribution.\",\n  },\n  {\n    name: \"Joint Distributions\",\n    description: \"A joint probability distribution describes the simultaneous behavior of two random variables.\",\n  },\n  {\n    name: \"Least Squares\",\n    description: \"Ordinary least squares regression estimates the slope(s) and intercept of a line to best fit data for two (or more) variables by minimizing the sum of the squared distances from the data points to the line.\",\n  },\n  {\n    name: \"Omitted Variable Bias\",\n    description: \"Omitted variable bias (OVB) arises when a variable that is i) correlated with the outcome and ii) correlated with one on the included regressors is omitted from the regression model.\",\n  },\n  {\n    name: \"Confidence Intervals\",\n    description: \"A confidence interval provides a range of values for the likely location of the true population mean, based on information gathered from a sample.\",\n  },\n  // {\n  //   name: \"Hypothesis Testing\",\n  //   description: \"Hypothesis testing is a procedure that allows us to form conclusions based on information derived from a sample.\",\n  // }\n];\n","/*\n\n  Displays a menu with all the simulations and allows the user to click to start them\n\n*/\nimport React from 'react';\nimport SimBarOption from './SimBarOption';\nimport PropTypes from 'prop-types'\nimport { MODULES } from '../lib/constants';\n\nexport default function SimBar({ setSection }) {\n\n  const sections = MODULES.map((section) =>\n    <li key={section.name}>\n      <SimBarOption section={section} setSection={setSection}/>\n    </li>\n  );\n\n  return (\n    <div key={'key23'}>\n      <div className=\"MiniLogo\"></div>\n      <ul className=\"simBarOptionList\">{sections}</ul>\n    </div>\n  );\n}\n\nSimBar.propTypes = {\n  setSection: PropTypes.func.isRequired,\n}\n","/*\n\n  Displays the introduction to the website and the start button\n\n*/\nimport React from 'react';\nimport { Button, Fade } from 'reactstrap';\nimport PropTypes from 'prop-types';\n\nexport default function StartHere({ start, showApp }) {\n  return (\n    <Fade in={start}>\n      <div className=\"Jumbotron\">\n        <p className=\"lead\">This website is an interactive educational application developed to simulate and visualize\n        various statistical concepts.</p>\n        <hr className=\"my2\" />\n        <p>Project of Professor Tanya Byker and Professor Amanda Gregg at Middlebury College, with research assistants Kevin Serrao, Class of 2018, Dylan Mortimer, Class of 2019, Ammar Almahdy, Class of 2020, Jacqueline Palacios, Class of 2020, Siyuan Niu, Class of 2021, David Gikoshvili, Class of 2021, and Ethan Saxenian, Class of 2022</p>\n        <Button outline color='danger' onClick={() => showApp()}>Start!</Button>\n      </div>\n    </Fade>\n  );\n}\n\nStartHere.propTypes = {\n  start: PropTypes.bool.isRequired,\n  showApp: PropTypes.func.isRequired,\n}\n","import React from \"react\";\nimport { ButtonGroup, Button } from \"reactstrap\";\nimport PropTypes from \"prop-types\";\n\nexport default function SelectorButtonGroup({ options, select, selected }) {\n  const buttons = options.map((option) =>\n    <Button\n      style={{ backgroundColor: (selected === option) ? \"#4CAF50\" : \"#555555\" }}\n      onClick={() => select(option)}\n      key={`${option}`}\n    >\n      {option}\n    </Button>\n  );\n\n  return (\n    <ButtonGroup>\n      {buttons}\n    </ButtonGroup>\n  )\n}\n\nSelectorButtonGroup.propTypes = {\n  options: PropTypes.arrayOf(PropTypes.string).isRequired,\n  select: PropTypes.func.isRequired,\n  selected: PropTypes.string\n}\n","/*\n  Allows the user to select simulation variations\n\n  Used by Law of Large Numbers and Central Limit Theorem\n*/\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport SelectorButtonGroup from './SelectorButtonGroup';\n\n\nexport default function PopBar({ sim, setPop }) {\n  const [selected, setSelected] = useState();\n\n  let modes = [];\n  if (sim === \"CLT\") {\n    modes = [ \"Normal\", \"Uniform\", \"Exponential\", \"Chi-Squared\", \"Mystery\" ];\n  } else if ((sim === \"LLN\") || (sim === \"CI\")) {\n    modes = [ \"Normal\", \"Uniform\", \"Exponential\", \"Chi-Squared\" ];\n  }\n\n  const onClick = (mode) => {\n    setPop(mode);\n    setSelected(mode);\n  }\n\n  return (\n    <div className=\"buttonGroup\">\n      <p>Pick a Population Distribution: </p>\n      <SelectorButtonGroup options={modes} select={onClick} selected={selected}/>\n    </div>\n  );\n}\n\nPopBar.propTypes = {\n  sim: PropTypes.string.isRequired,\n  setPop: PropTypes.func.isRequired,\n}\n","/*\n\n  Uses the Collapse element to create a variable-size div for its contents\n\n*/\nimport React from 'react';\nimport Collapse from 'react-collapse';\nimport { presets } from 'react-motion';\nimport '../styles/MarzEg.css';\nimport PropTypes from 'prop-types';\n\nexport default function Collapsable({ children }) {\n\n  return (\n    <div>\n      <Collapse\n        style={{\n          margin: \"auto\",\n          width: \"100%\",\n          textAlign: \"center\",\n          backgroundColor: \"rgba(255,255,255,0.4)\",\n          marginBottom: '1em'\n        }}\n        isOpened\n        springConfig={{ ...presets['gentle'] }}\n      >\n        <div style={{ height: \"100%\", padding: '2em' }}>\n          <div style={{ padding: '2em' }}>\n            {children}\n          </div>\n        </div>\n      </Collapse>\n    </div>\n  );\n}\n\nCollapsable.propTypes = {\n  children: PropTypes.element.isRequired,\n}\n","import PropTypes from \"prop-types\";\n\nexport const popShapeType = PropTypes.oneOf([\n  \"Normal\",\n  \"Uniform\",\n  \"Exponential\",\n  \"Chi-Squared\",\n  \"Mystery\"\n]);\n\nexport const distributionType = PropTypes.oneOf([\"Z\",\"T\"]);\n\nexport const dataObjectArrayType = PropTypes.arrayOf(\n  PropTypes.shape({\n    x: PropTypes.number.isRequired,\n    y: PropTypes.number.isRequired,\n    id: PropTypes.number\n  })\n);\n\nexport const highchartsSeriesType = PropTypes.arrayOf(\n  PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    data: dataObjectArrayType.isRequired,\n    type: PropTypes.string,\n    color: PropTypes.string,\n    enableMouseTracking: PropTypes.bool,\n    showInLegend: PropTypes.bool,\n    visible: PropTypes.bool,\n    label: PropTypes.object\n  })\n);\n\nexport const confidenceIntervalsSampleType = PropTypes.shape({\n  data: dataObjectArrayType.isRequired,\n  size: PropTypes.number.isRequired,\n  mean: PropTypes.number.isRequired,\n  lowerConf: PropTypes.number.isRequired,\n  upperConf: PropTypes.number.isRequired,\n  confidenceLevel: PropTypes.number.isRequired,\n  distribution: distributionType.isRequired,\n  label: PropTypes.bool.isRequired,\n  id: PropTypes.number.isRequired\n});\n\nexport const stringOrNumberType = PropTypes.oneOfType([PropTypes.string, PropTypes.number]);\n","import React, { useState, useEffect } from \"react\";\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official'\nimport Label from 'highcharts/modules/series-label';\nimport PropTypes from 'prop-types';\nimport { highchartsSeriesType } from \"../lib/types\";\n\nLabel(Highcharts);\n\n\nexport default function DotPlot({ series, title, xMin, xMax, yMax, xLabel }) {\n  const [chart, setChart] = useState({});\n\n  useEffect(() => {\n    const newChart = {\n      chart: {\n        type: 'scatter',\n      },\n      plotOptions: {\n        series: {\n          animation: {\n            duration: 100,\n            easing: 'easeOutBounce'\n          },\n        }\n      },\n      legend: {\n        symbolHeight: 12,\n        symbolWidth: 12,\n        symbolRadius: 6\n      },\n      xAxis: {\n        min: xMin,\n        max: xMax,\n        title : {\n          enabled: true,\n          text: xLabel\n        },\n        startOnTick: true,\n        endOnTick: true\n      },\n      title: {\n        text: title\n      },\n      yAxis: {\n        max: yMax,\n        startOnTick: true,\n        endOnTick: true,\n        title: {\n          text: \"Count\"\n        }\n      },\n      series: series.map((seriesObject) => (\n        {\n          showInLegend: seriesObject.data.length > 0,\n          turboThreshold: 0,\n          ...seriesObject,\n          data: seriesObject.data.map(({ x, y }) => ({ x, y })),  // don't want any other attributes\n          tooltip: {\n            pointFormat: `${xLabel}: <b>{point.x}</b><br />`\n          }\n        })\n      )\n    }\n    setChart(newChart);\n  }, [series, title, xMin, xMax, yMax, xLabel]);\n\n  return <HighchartsReact highcharts={Highcharts} options={chart}/>\n}\n\nDotPlot.propTypes = {\n  series: highchartsSeriesType.isRequired,\n  title: PropTypes.string,\n  xMin: PropTypes.number,\n  xMax: PropTypes.number,\n  yMax: PropTypes.number,\n  xLabel: PropTypes.string,\n  yLabel: PropTypes.string,\n}\n","import React from \"react\";\nimport { Table } from \"reactstrap\";\nimport PropTypes from \"prop-types\";\nimport { dataObjectArrayType } from \"../lib/types\";\nimport { VALUES } from \"../lib/constants.js\";\n\nexport default function PopTable({ popArray, sampleIDs, popShape }) {\n  const rows = popArray.map(({ x, id }) => {\n    return (\n      <tr key={id} style={{ backgroundColor: sampleIDs.includes(id) ? \"#747EF2\" : undefined }}>\n        <td>{popArray.length - id}</td>\n        <td>{x}</td>\n      </tr>\n    )}\n  );\n\n  return (\n    <Table striped className=\"PopTable\">\n      <thead>\n        <tr>\n          <th>{VALUES[popShape].xLabel}</th>\n          <th>{VALUES[popShape].yLabel}</th>\n        </tr>\n      </thead>\n      <tbody>\n        {rows}\n      </tbody>\n    </Table>\n  );\n}\n\nPopTable.propTypes = {\n  popArray: dataObjectArrayType.isRequired,\n  sampleIDs: PropTypes.arrayOf(PropTypes.number).isRequired,\n  popShape: PropTypes.string.isRequired\n}\n","/*\n\n  Displays a table of values and a corresponding HighCharts plot\n\n  Used by Law of Large Numbers and Central Limit Theorem\n\n*/\nimport React from 'react';\nimport '../styles/dark-unica.css';\nimport DotPlot from './DotPlot';\nimport { Alert, Container, Col, Row } from 'reactstrap';\nimport PopTable from './PopTable.js'\nimport _ from \"lodash\";\nimport PropTypes from 'prop-types';\nimport { dataObjectArrayType, popShapeType } from '../lib/types';\nimport { TEXTS, VALUES } from '../lib/constants';\n\nexport default function ChartContainer({ popArray, popMean, sampled, sampleMean, popShape }) {\n  const { xmaxval, xminval, ymaxval, title, xLabel } = VALUES[popShape];\n\n  const series = [\n    {\n      name: 'Population Observations',\n      data: popArray\n    },\n    {\n      name: 'Sampled Observations',\n      data: sampled\n    },\n    {\n      type: 'line',\n      name: 'Sample Mean',\n      data: [{x: sampleMean || 0, y: 0}, {x: sampleMean || 0, y: ymaxval}],\n      color: 'red',\n      enableMouseTracking: false,\n      showInLegend: false,\n      visible: (sampleMean !== undefined) && (sampled.length > 0),\n      label: {\n        format: `<div>Sample Mean: ${sampleMean}</div>`\n      }\n    }\n  ];\n\n  return (\n    <div>\n      <Container fluid style={{marginBottom: \"2vh\"}}>\n        <Row>\n          <Alert color=\"secondary\" className=\"Center\">\n            {(popShape !== \"Uniform\") ? (\n              <p>\n                We queried the {TEXTS[popShape][0]} of {popArray.length} {TEXTS[popShape][1]} and plotted the results on the following chart.\n              </p>\n            ) : (\n              <p>\n                Behavioral economists studying loss aversion design a lottery among 2000 participants where each amount between -10 and +10 is equally likely.  We plotted the winnings and losses below.\n              </p>\n            )}\n          </Alert>\n        </Row>\n        <Row>\n          <Col lg={2} md={12}>\n            <PopTable\n              popArray={popArray}\n              sampleIDs={sampled.map((obj) => obj.id)}\n              popShape={popShape}\n            />\n          </Col>\n          <Col lg={10}>\n            <DotPlot\n              series={series}\n              title={`${title} <br /> Population Mean: ${_.round(popMean, 2)}`}\n              xMin={xminval}\n              xMax={xmaxval}\n              yMax={ymaxval}\n              xLabel={xLabel}\n            />\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  );\n}\n\nChartContainer.propTypes = {\n  popArray: dataObjectArrayType.isRequired,\n  popMean: PropTypes.number.isRequired,\n  sampled: dataObjectArrayType.isRequired,\n  sampleMean: PropTypes.number,\n  popShape: popShapeType.isRequired,\n}\n","/*\n\n  Displays an input and a button for the user to enter a sample size\n\n  Used by Law of Large Numbers and Central Limit Theorem\n\n*/\nimport React, { useState } from 'react';\nimport { Button, Input, InputGroup, InputGroupAddon } from 'reactstrap';\nimport PropTypes from 'prop-types'\n\nexport default function SampleSizeInput({ maxSize, handleClick }) {\n  const [sampleSize, setSampleSize] = useState(\"\");\n\n  return (\n    <InputGroup style={{width: \"50%\", margin: \"auto\"}}>\n      <Input\n        align=\"right\"\n        type=\"number\"\n        placeholder=\"Sample Size:\"\n        min={1}\n        value={sampleSize}\n        max={maxSize}\n        onChange={(event) => setSampleSize(event.target.value)}\n      />\n      <InputGroupAddon addonType=\"append\">\n        <Button disabled={!sampleSize || sampleSize > maxSize || sampleSize < 1} onClick={()=> handleClick(+sampleSize)}>\n          Sample\n        </Button>\n      </InputGroupAddon>\n    </InputGroup>\n  );\n}\n\nSampleSizeInput.propTypes = {\n  maxSize: PropTypes.number.isRequired,\n  handleClick: PropTypes.func.isRequired,\n}\n","import { mean, sqrt, random, round, std } from \"mathjs\";\nimport PD from \"probability-distributions\";\nimport _ from \"lodash\";\n\n// generates a dataset with normal distribution\n// returns an array of {x, y, id}\nexport const generateNormal = (sampleSize, mean, standardDev) => {\n  const population = PD.rnorm(sampleSize, mean, standardDev).map((num) => _.round(num, 1));\n  const counts = _.countBy(population);\n  const popArray = [];\n  _.entries(counts).forEach(([amt, count]) => {\n    for (let i = 1; i <= count; i++) {\n      popArray.push({x: +amt, y: i})\n    }\n  });\n  return _.shuffle(popArray).map((obj, index) => ({...obj, id: index}));\n}\n\n// generates a dataset with uniform distribution\n// returns an array of {x, y, id}\nexport const generateUniform = (sampleSize, low, hi) => {\n  const population = PD.runif(sampleSize, low, hi).map((num) => _.round(num, 1));\n  const counts = _.countBy(population);\n  const popArray = [];\n  _.entries(counts).forEach(([amt, count]) => {\n    for (let i = 1; i <= count; i++) {\n      popArray.push({x: +amt, y: i})\n    }\n  });\n  return _.shuffle(popArray).map((obj, index) => ({...obj, id: index}));\n}\n\n// generates a dataset with exponential distribution\n// returns an array of {x, y, id}\nexport const generateExponential = (sampleSize, lambda) => {\n  const population = PD.rexp(sampleSize, lambda).map((num) => _.round(num, 1));\n  const counts = _.countBy(population);\n  const popArray = [];\n  _.entries(counts).forEach(([amt, count]) => {\n    for (let i = 1; i <= count; i++) {\n      popArray.push({x: +amt, y: i})\n    }\n  });\n  return _.shuffle(popArray).map((obj, index) => ({...obj, id: index}));\n}\n\n// generates a dataset with chi-squared distribution\n// returns an array of {x, y, id}\nexport const generateChiSquared = (sampleSize, degreesOfFreedom) => {\n  const population = PD.rchisq(sampleSize, degreesOfFreedom).map((num) => _.round(num, 1));\n  const counts = _.countBy(population);\n  const popArray = [];\n  _.entries(counts).forEach(([amt, count]) => {\n    for (let i = 1; i <= count; i++) {\n      popArray.push({x: +amt, y: i})\n    }\n  });\n  return _.shuffle(popArray).map((obj, index) => ({...obj, id: index}));\n}\n\n// generates a dataset with 'mystery' distribution\n// returns an array of {x, y, id}\nexport const generateMystery = (sampleSize) => {\n\n  const popArray = [];\n\n  const firstMEAN = 75.5;\n  const firstSTANDARD_DEV = 3;\n  const firstITERATES = 9;\n  const firstrange = sqrt(12) * firstSTANDARD_DEV * firstSTANDARD_DEV;\n  const firstpopMin = firstMEAN - (firstrange / 2);\n  const secondMEAN = 60.5;\n  const secondSTANDARD_DEV = 2;\n  const secondITERATES = 9;\n  const secondrange = sqrt(12) * secondSTANDARD_DEV * secondSTANDARD_DEV;\n  const secondpopMin = secondMEAN - (secondrange / 2);\n\n  const clearedArray = [];\n  const popDict = [];\n  const newCleared = clearedArray;\n  const stateCopy = popDict;\n\n\n  for (let i = 0; i < sampleSize/2; i++){\n    let sum = 0;\n    if(clearedArray.length === 0){\n        for (let j = 0; j < firstITERATES; j++){\n            sum += random() * firstrange + firstpopMin;\n        }\n    }\n    else{\n        sum = newCleared.pop() * firstITERATES;\n    }\n    if (popDict[round(sum / firstITERATES * 10)]){\n        stateCopy[round(sum / firstITERATES * 10)] += 1\n    }\n    else {\n        stateCopy[round(sum / firstITERATES * 10)] = 1\n    }\n    popArray.push(round((sum / firstITERATES)*100)/100)\n  }\n\n  for (let i = 0; i < sampleSize/2; i++){\n      let sum = 0;\n      if(clearedArray.length === 0){\n          for (let j = 0; j < secondITERATES; j++){\n              sum += random() * secondrange + secondpopMin;\n          }\n      }\n      else{\n          sum = newCleared.pop() * secondITERATES;\n      }\n      if (popDict[round(sum / secondITERATES * 10)]){\n          stateCopy[round(sum / secondITERATES * 10)] += 1\n      }\n      else {\n          stateCopy[round(sum / secondITERATES * 10)] = 1\n      }\n      popArray.push(round((sum / secondITERATES)*100)/100)\n  }\n\n  const finalPopArray = [];\n\n  let count = Array(sampleSize).fill(-1);\n  for (let i = 0; i < sampleSize; i++){\n\n      let val = popArray[i];\n\n      if (count[round(val * 10)] !== -1){\n          count[round(val * 10)] += 1;\n      }\n      else {\n          count[round(val * 10)] = 1;\n      }\n\n      finalPopArray.push({x: +(round(val * 10)/10), y: count[round(val * 10)]})\n  }\n\n  return _.shuffle(finalPopArray).map((obj, index) => ({...obj, id: index}));\n}\n\n\n// returns the data set from the function corresponding with distType\n// objects in array are of shape {x, y, id}\nexport const dataFromDistribution = (\n    distType,\n    sampleSize,\n    {\n      mean=64,\n      standardDev=3,\n      low=-10,\n      hi=10,\n      lambda=1/64,\n      degreesOfFreedom=8\n    } = {}\n  ) => {\n\n  const getDistributionFunction = {\n    \"Normal\": () => generateNormal(sampleSize, mean, standardDev),\n    \"Uniform\": () => generateUniform(sampleSize, low, hi),\n    \"Exponential\": () => generateExponential(sampleSize, lambda),\n    \"Chi-Squared\": () => generateChiSquared(sampleSize, degreesOfFreedom),\n    \"Mystery\": () => generateMystery(sampleSize)\n  }\n\n  return getDistributionFunction[distType]();\n}\n\n// returns the mean of popArray\nexport const populationMean = (popArray) => {\n  return (popArray.length > 0) ? mean(popArray.map(p => p.x)) : undefined;\n}\n\n// returns the std of popArray\nexport const populationStandardDev = (popArray) => {\n  return (popArray.length > 0) ? std(popArray.map(p => p.x)) : undefined;\n}\n","import React, { useEffect, useState } from 'react';\nimport Highcharts from \"highcharts\";\nimport HighchartsReact from 'highcharts-react-official';\nimport { Collapse, Card, CardBody } from 'reactstrap';\nimport '../../styles/dark-unica.css';\nimport _ from \"lodash\";\nimport PropTypes from 'prop-types';\nimport { dataObjectArrayType, popShapeType } from '../../lib/types.js';\nimport { populationMean } from '../../lib/stats-utils';\n\nexport default function SimulateSamples({ type, popArray, popMean }) {\n  const [sampled, setSampled] = useState([]);\n  const [meanLine, setMeanLine] = useState([]);\n  const [chart, setChart] = useState({});\n\n  useEffect(() => {\n    const newChart = {\n      chart: {\n        type: 'line',\n        animation: false\n      },\n      plotOptions: {\n        series: {\n          animation: {\n            duration: 0\n          },\n          states: {\n            hover: {\n              enabled: false\n            },\n            select: {\n              enabled: false\n            },\n            normal: {\n              animation: false\n            },\n            inactive: {\n              enabled: false\n            }\n          }\n        }\n      },\n      title: {\n        text: `Population vs Sample Means <br /> (${type})`,\n      },\n      xAxis: {\n        title : {\n          text: 'Sample Size'\n        },\n        min: 0,\n        max: 1000\n      },\n      yAxis: {\n        title: {\n          text: 'Mean'\n        }\n      },\n      tooltip: {\n        enabled: true\n      },\n      series: [\n        {\n          name: 'Population Mean',\n          data: meanLine,\n          label: {\n            enabled: false\n          },\n          color: \"red\"\n        },\n        {\n          name: 'Sampled Means',\n          data: sampled,\n          label: {\n            enabled: false\n          },\n          color: \"black\"\n        }\n      ]\n    }\n\n    setChart(newChart);\n  }, [sampled, meanLine, type, popArray, popMean]);\n\n  useEffect(() => {\n    setSampled([]);\n    setMeanLine([]);\n    let n = 0;\n    const timer = setInterval(function run() {\n      n += 1;\n      if (n >= 1000) {\n        clearInterval(timer)\n      }\n      const sample = _.sampleSize(popArray, n);\n      const avg = _.round(populationMean(sample), 2);\n      setSampled(sampled => [...sampled, {y: avg}]);\n      setMeanLine(meanLine => [...meanLine, {y: popMean}]);\n    }, n);\n\n    return () => clearInterval(timer);\n  }, []);  // eslint-disable-line\n\n  return (\n    <Collapse isOpen>\n      <Card outline style={{ backgroundColor: 'rgba(255, 255, 255, 0)' }}>\n        <CardBody style={{ backgroundColor: 'rgba(255, 255, 255, 0)' }}>\n          <HighchartsReact highcharts={Highcharts} options={chart}/>\n        </CardBody>\n      </Card>\n    </Collapse>\n  );\n}\n\nSimulateSamples.propTypes = {\n  type: popShapeType.isRequired,\n  popArray: dataObjectArrayType.isRequired,\n  popMean: PropTypes.number.isRequired,\n}\n","/*\n\n  Displays one of the LLN simulations\n\n*/\nimport React, { useEffect, useState } from 'react';\nimport Collapsable from '../Collapsable.js';\nimport ChartContainer from '../ChartContainer.js';\nimport SampleSizeInput from '../SampleSizeInput.js';\nimport SimulateSamples from './SimulateSamples.js';\nimport { Alert } from 'reactstrap';\nimport { populationMean, dataFromDistribution } from \"../../lib/stats-utils.js\";\nimport _ from \"lodash\";\nimport PropTypes from 'prop-types';\nimport { popShapeType } from '../../lib/types.js';\n\nexport default function LLNSimulation({ popShape, sampleSize }) {\n  const [sampled, setSampled] = useState([]);\n  const [stage, setStage] = useState(1);\n  const [sampleMean, setSampleMean] = useState();\n  const [popArray, setPopArray] = useState([]);\n  const [popMean, setPopMean] = useState(0);\n\n  useEffect(() => {\n    setStage(1);\n    setPopArray([]);\n    setSampled([]);\n    setSampleMean();\n  }, [popShape]);\n\n  // Highcharts rendering is buggy - this second useEffect takes a second but allows the data to be reset completely before being generated again\n  useEffect(() => {\n    if (popArray.length === 0) {\n      const newPop = dataFromDistribution(popShape, sampleSize);\n      setPopArray(newPop);\n      const newMean = populationMean(newPop);\n      setPopMean(newMean);\n    }\n  }, [popArray, popShape, sampleSize]);\n\n  const handleClick = (size) => {\n    const sample = _.sampleSize(popArray, size);\n    setSampled(sample);\n    setSampleMean(_.round(populationMean(sample), 2));\n    setStage(2);\n  }\n\n  return (\n    <Collapsable>\n      <div>\n        <ChartContainer popArray={popArray} popMean={popMean} sampled={sampled} sampleMean={sampleMean} popShape={popShape}/>\n        <p>Try a few different sample sizes and compare sample mean to population mean</p>\n        <SampleSizeInput maxSize={popArray.length} handleClick={handleClick}/>\n        {(stage >= 2) &&\n          <div>\n            <Alert color=\"success\" style={{ padding: 0, marginTop: '1em' }}>\n              Sample Mean: {_.round(sampleMean, 2) || ''}\n              <br/>\n              Difference of Means: {_.round(popMean - sampleMean, 2)}\n            </Alert>\n            <Alert color=\"info\">\n              According to the law, the average of the results obtained from a large enough sample should be close to the total average of the population, and will tend to become closer the larger the sample is. Make sure to pick several samples, or see below for a simulation to see the law in action.\n            </Alert>\n            <SimulateSamples type={popShape} popArray={popArray} popMean={_.round(popMean, 2)}/>\n          </div>\n        }\n      </div>\n    </Collapsable>\n  );\n}\n\nLLNSimulation.propTypes =  {\n  popShape: popShapeType.isRequired,\n  sampleSize: PropTypes.number.isRequired,\n}\n","/*\n\n  Displays the description for the LLN simulation, a menu bar to choose the different variations, and the simulation component itself\n\n*/\nimport React, { useState } from 'react';\nimport PopBar from '../PopBar.js';\nimport { Alert } from 'reactstrap';\nimport LLNSimulation from './LLNSimulation.js';\nimport { SAMPLE_SIZE } from '../../lib/constants.js';\n\nexport default function LawOfLargeNumbers() {\n  const [popShape, setPopType] = useState(\"\");\n\n  return (\n    <div className=\"MainContainer\">\n      <Alert className=\"simDescription\" color=\"primary\">Law Of Large Numbers</Alert>\n      <Alert className=\"simDescription\" color=\"primary\">\n        The Law of Large Numbers (LLN) is a statement about the relationship between a population and a random sample drawn from that population. Let 𝜇 denote the true mean of a variable when calculated using the entire population, let 𝜎 denote the true standard deviation of that variable when calculated using the entire population, let 𝑥̅ denote the mean calculated from a sample drawn from that population, and let 𝑠 denote the standard deviation calculated from that sample. We would like to use information from the sample to make conclusions about the population. The LLN is helpful in this endeavor, because it states that as the sample size gets larger, the sample mean approaches the true population mean. This simulation’s goal is to demonstrate this handy property.\n      </Alert>\n      <PopBar sim=\"LLN\" setPop={setPopType}/>\n      {popShape && <LLNSimulation popShape={popShape} sampleSize={SAMPLE_SIZE}/>}\n    </div>\n  );\n}\n","import React, {Component} from 'react';\nimport Highcharts from 'highcharts';\nimport PropTypes from 'prop-types';\n\n\nclass SampleMeanChart extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            chart: undefined,\n            sampleMeans:[],\n            popMeans:{\n              \"Normal\" : 64,\n              \"Uniform\" : 64,\n              \"Exponential\" : 64,\n              \"Chi-Squared\" : 8,\n              \"Mystery\" : 62.5\n            },\n            values: {\n              Normal: { xmaxval: 74, xminval: 56, ymaxval: 40, title: \"Milk Production\", xLabel: \"Gallons\" },\n              Uniform: { xmaxval: 10, xminval: -10, ymaxval: 25, title: \"Lottery Outcome\", xLabel: \"Dollars\"},\n              Exponential: { xmaxval: 400, xminval: 0, ymaxval: 10, title: \"Duration of Telemarketer Call\", xLabel: \"Duration (seconds)\"},\n              \"Chi-Squared\": {xmaxval: 25, xminval: 0, ymaxval: 40, title: \"Money Spent on Lunch\", xLabel: \"Dollars\"},\n              Mystery: { xmaxval: 80, xminval: 50, ymaxval: 40, title: \"Alien Female Height\", xLabel: \"Height (in)\"}\n          },\n            sd : undefined,\n            curve: false\n        }\n    }\n    render(){\n        this.state.chart && this.show();\n        return(\n          <div>\n              {\n                  <div id=\"sim-container\" className=\"Center\" />\n              }\n            {/* <button style={{marginTop:\"20px\",marginLeft:\"110px\"}} onClick={() => {\n              this.setState({curve : !this.state.curve})}}>Plot Normal Curve</button> */}\n          </div>\n        );\n    }\n    componentDidMount(){\n        this.show();\n    }\n    show(){\n        //console.log(this.props.sampleMeans);\n        const sampleMeanSeries = {name: \"Sample Means\", data : []};\n        let yMax = 30;\n        let xAxisMeasurement =[];\n        let yAxisMeasurement =[];\n        // const popMean = Math.round(this.props.mean *4)/4;\n        for (const i in this.props.sampleMeans){\n            const val = !this.props.normalized ?\n              Math.round(this.props.sampleMeans[i][1] * 100) / 100\n              : Math.round(((this.props.sampleMeans[i][1] - this.props.mean) / (this.props.sd/Math.sqrt(this.props.sampleSize)) )*100)/100;\n            let count = 1;\n            for (const j of sampleMeanSeries.data){\n                if (Math.round(j[0] * 100) / 100 === val){\n                    count += 1;\n                }\n            }\n            yMax = Math.max(count, yMax);\n            sampleMeanSeries.data[i] = [val, count];\n            xAxisMeasurement.push(val);\n            yAxisMeasurement.push(count);\n            // console.log(sampleMeanSeries.data);\n        }\n\n        let xMin;\n        let xMax;\n        let xLabel;\n        if(!this.props.normalized){\n          xMin = this.state.values[this.props.type].xminval;\n          xMax = this.state.values[this.props.type].xmaxval;\n          xLabel = this.state.values[this.props.type].xLabel;\n        }\n        else{\n          xMin = Math.min.apply(Math, xAxisMeasurement);\n          xMax = Math.max.apply(Math, xAxisMeasurement);\n          yMax = Math.max.apply(Math, yAxisMeasurement);\n          xLabel = \"Standard Deviations\";\n        }\n\n        let sampleMax=0;\n        let sampleMin=1000000000;\n        let sampleMaxX = 0;\n        for(let i=0;i<sampleMeanSeries.data.length;i++){\n          if(sampleMeanSeries.data[i][1] > sampleMax){\n            sampleMax = sampleMeanSeries.data[i][1];\n          }\n          if(sampleMeanSeries.data[i][0] < sampleMin){\n            sampleMin = sampleMeanSeries.data[i][0];\n          }\n          if(sampleMeanSeries.data[i][0] > sampleMaxX){\n            sampleMaxX = sampleMeanSeries.data[i][0];\n          }\n        }\n        // console.log(sampleMax);\n        // console.log(sampleMin);\n        // console.log(sampleMaxX);\n\n        //const lowerBound = sampleMin - 2, upperBound = sampleMaxX + 2;\n\n        //const normalY = (x, mean, stdDev) => Math.exp((-0.5) * Math.pow((x - mean) / stdDev, 2)) * (sampleMax+3);\n\n        //const getMean = (lowerBound, upperBound) => (upperBound + lowerBound) / 2;\n\n        // distance between mean and each bound of a 95% confidence interval\n        // is 2 stdDeviation, so distance between the bounds is 4\n        //const getStdDeviation = (lowerBound, upperBound) => (upperBound - lowerBound) / 4;\n\n        // const generatePoints = (lowerBound, upperBound) => {\n        //   const stdDev = getStdDeviation(lowerBound, upperBound);\n        //   const min = lowerBound - 2 * stdDev;\n        //   const max = upperBound + 2 * stdDev;\n        //   const unit = (max - min) / 40;\n        //   const list = [];\n        //   for(let i=min;i<max;i+=unit){\n        //     list.push(i);\n        //   }\n        //   //return _.range(min, max, unit);\n        //   return list;\n        // }\n\n\n\n\n\n        //const seriesData = points.map(x => ({ x, y: normalY(x, mean, stdDev)}));\n        //const bellSeries = {data : seriesData, color: 'black', name:\"Normal Curve\", plotOptions: {series: {marker: {symbol: \"diamond\"}}}};\n\n        /* Try making normal curve other way  */\n\n        // console.log(this.props.resampleSize[this.props.type])\n        // const normDist = new NormalDistribution(64,3/Math.sqrt(this.props.resampleSize[this.props.type]));\n        // let normalPoints = [];\n        // let nPoint;\n        // let sd = 3/Math.sqrt(10);\n        // let meanN = 64;\n        // for(let i=60;i<=70;i+=.1){\n        //   //nPoint = (1/(Math.sqrt(2*Math.PI*Math.pow(sd,2))))*(Math.pow(Math.E,-(Math.pow(i - meanN,2)/(2*Math.pow(sd,2)))));\n        //   nPoint = normDist.probabilityBetween(i,i+.1);\n        //   normalPoints.push([i,nPoint * this.props.numberResamples[this.props.type]]);\n        // }\n\n        // console.log(normDist.probabilityBetween(61.5,67));\n\n        // console.log(normalPoints);\n        // bellSeries.data = normalPoints;\n\n        // console.log(seriesData);\n\n\n        if (!this.state.chart) {\n            this.setState({chart: Highcharts.chart('sim-container', {\n                            chart: {\n                                type: 'scatter',\n                                animation: false\n                            },\n\n                            title: {\n                                text: 'Sample Mean Distribution'\n                            },\n                            xAxis: {\n                                min: xMin,\n                                max: xMax,\n                                title : {\n                                    enabled: true,\n                                    text: xLabel\n                                },\n                                startOnTick: true,\n                                endOnTick: true,\n                                showLastLabel: true\n                            },\n                            yAxis: {\n                                max: yMax,\n                                title: {\n                                    text: 'Observations of Sample Mean'\n                                }\n                            },\n                            tooltip: {\n                              enabled: true,\n                              pointFormat: `${xLabel}: <b>{point.x}<b><br />`\n                            },\n                            series: [sampleMeanSeries]\n\n                            })});\n                          }\n        else {\n            // console.log(\"running\");\n\n\n            // if(this.state.curve === true && this.state.chart.series.length < 2){\n            //   this.state.chart.addSeries({bellSeries});\n            // }\n            // if(this.state.curve == false && this.state.chart.series.length === 2){\n            //   this.state.chart.series[1].remove();\n            // }\n            // this.state.chart.update({series:[sampleMeanSeries,bellSeries], yAxis: {max: yMax}, xAxis : {title: {text:xLabel},max: xMax, min: xMin}});\n            this.state.chart.update({series:[sampleMeanSeries], yAxis: {max: yMax}, xAxis : {title: {text:xLabel},max: xMax, min: xMin}});\n        }\n\n        // console.log(sampleMeanSeries);\n    }\n}\nexport default SampleMeanChart;\n\nSampleMeanChart.propTypes = {\n\n  sampleMeans : PropTypes.array,\n  popMeans : PropTypes.object,\n  values: PropTypes.object,\n  sd : PropTypes.number,\n  curve : PropTypes.bool,\n}\n","/*\n\n  Displays inputs to allow the user to run a large number of resamples\n\n*/\nimport React, { useState } from \"react\";\nimport {Button, Input } from 'reactstrap';\nimport _ from \"lodash\";\nimport PropTypes from 'prop-types';\nimport { dataObjectArrayType } from \"../../lib/types.js\";\nimport { populationMean } from \"../../lib/stats-utils.js\";\n\nexport default function SampleMeansSimulator({ setSampleSize, population, addSamples }) {\n  const [numberResamples, setNumberResamples] = useState(0);\n  const [resampleSize, setResampleSize] = useState(0);\n\n  const changeSampleSize = (value) => {\n    setSampleSize(value);\n    setResampleSize(value);\n  }\n\n  const resample = () => {\n    const samplePop = _.sampleSize(population, resampleSize);\n    const sampleMean = populationMean(samplePop);\n    return {x: +resampleSize, y: sampleMean};\n  }\n\n  const runSim = () => {\n    const newSamples = [];\n    for (let i = 0; i < numberResamples; i++) {\n      newSamples.push(resample())\n    }\n    addSamples(newSamples);\n  }\n\n  return (\n    <div>\n      <span> Sample Size: </span>\n      <Input\n        style={{width: \"40%\", margin: \"auto\"}}\n        min={1}\n        type=\"number\"\n        placeholder=\"Sample Size:\"\n        onChange={(event) => changeSampleSize(event.target.value)}\n        value={resampleSize}\n      />\n      <br/>\n      <span> Number of Replications: </span>\n      <Input\n        style={{width: \"40%\", margin: \"auto\"}}\n        min={1}\n        type=\"number\"\n        placeholder=\"Number of Replications:\"\n        onChange={(event) => setNumberResamples(event.target.value)}\n        value={numberResamples}\n      />\n      <br/>\n      <Button onClick={() => runSim()} disabled={(resampleSize < 1) || (resampleSize > population.length) || (numberResamples < 1)}>\n        Run\n      </Button>\n      <Button onClick={() => addSamples()}>Clear</Button>\n    </div>\n  );\n}\n\nSampleMeansSimulator.propTypes = {\n  setSampleSize: PropTypes.func.isRequired,\n  population: dataObjectArrayType.isRequired,\n  addSamples: PropTypes.func.isRequired,\n}\n","/*\n\n  Displays a table of sample means\n\n*/\n\nimport React from 'react';\nimport { Table } from 'reactstrap';\nimport { dataObjectArrayType } from '../../lib/types.js';\nimport _ from 'lodash';\n\nexport default function SampleMeansTable({ sampleMeans }) {\n  const tableBody = sampleMeans.map(({x: size, y: mean}, index) =>\n    <tr key={index}>\n      <td>{index + 1}</td>\n      <td>{size}</td>\n      <td>{_.round(mean, 2)}</td>\n    </tr>\n  );\n\n  return (\n    <Table hover className=\"PopTable\">\n      <thead>\n        <tr>\n          <th>Sample</th>\n          <th>Size</th>\n          <th>Mean</th>\n        </tr>\n      </thead>\n      <tbody>\n        {sampleMeans && tableBody}\n      </tbody>\n  </Table>\n  );\n}\n\nSampleMeansTable.propTypes = {\n  sampleMeans: dataObjectArrayType.isRequired,\n}\n","/*\n\n  Displays one of the CLT simulations\n\n*/\nimport React, { useState, useEffect } from \"react\";\nimport Collapsable from \"../Collapsable.js\";\nimport ChartContainer from \"../ChartContainer.js\";\nimport SampleMeanChart from \"./SampleMeanChart.js\"\nimport SampleMeansSimulator from \"./SampleMeansSimulator.js\"\nimport { std } from \"mathjs\";\nimport { Alert, Button, Col, Row } from \"reactstrap\";\nimport { populationMean, dataFromDistribution } from \"../../lib/stats-utils.js\";\nimport SampleSizeInput from \"../SampleSizeInput.js\";\nimport SampleMeansTable from \"./SampleMeansTable.js\";\nimport _ from \"lodash\";\nimport PropTypes from \"prop-types\";\nimport { popShapeType } from \"../../lib/types.js\";\n\nexport default function CLTSimulation({ popShape, mainSampleSize }) {\n  const [sampleMeans, setSampleMeans] = useState([]);\n  const [sampled, setSampled] = useState([]);\n  const [sampleSize, setSampleSize] = useState(mainSampleSize);\n  const [standardNormal, setStandardNormal] = useState(false);\n  const [stage, setStage] = useState(1);\n  const [popArray, setPopArray] = useState([]);\n  const [popMean, setPopMean] = useState(0);\n\n  useEffect(() => {\n    setStage(1);\n    setPopArray([]);\n    setSampled([]);\n    setSampleMeans([]);\n  }, [popShape]);\n\n  // Highcharts rendering is buggy - this second useEffect takes a second but allows the data to be reset completely before being generated again\n  useEffect(() => {\n    if (popArray.length === 0) {\n      const newPop = dataFromDistribution(popShape, mainSampleSize);\n      setPopArray(newPop);\n      const newMean = populationMean(newPop);\n      setPopMean(newMean);\n    }\n  }, [popArray, popShape, mainSampleSize]);\n\n  const addSampleMeans = (means) => {\n    if (!means) {  // calling addSampleMeans with no arguments clears the data\n      setSampleMeans([])\n    } else {\n      const newSampleMeans = [...sampleMeans, ...means];\n      setSampleMeans(newSampleMeans);\n    }\n  }\n\n  const handleClick = (size) => {\n    const sample = _.sampleSize(popArray, size);\n    setSampled(sample);\n    const newMeans = [...sampleMeans, {x: size, y: populationMean(sample)}];\n    setSampleMeans(newMeans);\n  }\n\n  const xvalue = sampled.length === 0 ? [0] : sampled.map((s) => s.x);  // provide a placeholder value until \"sampled\" is updated\n\n  return (\n    <Collapsable>\n      <div>\n        <ChartContainer popArray={popArray} popMean={popMean} sampled={sampled} popShape={popShape}/>\n        <Button color=\"success\" onClick={() => setStage(2)}>Continue</Button>\n        {(stage >= 2) &&\n          <div>\n            <Row className=\"Center\">\n              <div style={{padding: \"30px\"}}>\n                <p>Try drawing some samples and calculating means</p>\n                <SampleSizeInput maxSize={popArray.length} handleClick={handleClick}/>\n              </div>\n            </Row>\n            <Row>\n              <Col lg=\"8\">\n                <Button\n                  outline\n                  color=\"primary\"\n                  active={standardNormal}\n                  onClick={() => setStandardNormal(!standardNormal)}>\n                    Convert to Std. Normal\n                </Button>\n                <SampleMeanChart  // TODO: update this\n                  mean={popMean}\n                  sd={std(xvalue)}\n                  normalized={standardNormal}\n                  sampleSize={sampleSize}\n                  type={popShape}\n                  normal={standardNormal}\n                  sampleMeans={sampleMeans.map(({x, y}) => [x, y])}\n                />\n              </Col>\n              <Col lg=\"4\">\n                <SampleMeansTable sampleMeans={sampleMeans}/>\n              </Col>\n            </Row>\n            <Row style={{width: \"60%\", margin:\"auto\"}}>\n              <div className=\"Center\">\n                <Alert color=\"primary\" style={{width: \"50%\", margin: \"auto\"}}>\n                  Simulate drawing many many samples\n                </Alert>\n                <br/>\n                <SampleMeansSimulator\n                  setSampleSize={setSampleSize}\n                  population={popArray}\n                  addSamples={addSampleMeans}\n                />\n              </div>\n            </Row>\n          </div>\n        }\n\n      </div>\n    </Collapsable>\n  );\n}\n\nCLTSimulation.propTypes = {\n  popShape: popShapeType.isRequired,\n  mainSampleSize: PropTypes.number.isRequired,\n}\n","/*\n\n  Displays the description for the CLT simulation, a menu bar to choose the different variations, and the simulation component itself\n\n*/\nimport React, { useState } from 'react';\nimport PopBar from '../PopBar.js';\nimport { Alert } from 'reactstrap';\nimport CLTSimulation from \"./CLTSimulation.js\";\n\nconst SAMPLE_SIZE = 2000;\n\nexport default function CentralLimitTheorem() {\n  const [popShape, setPopType] = useState(\"\");\n\n  return (\n    <div className=\"MainContainer\">\n      <Alert className=\"simDescription\" color=\"primary\">Central Limit Theorem</Alert>\n      <Alert className=\"simDescription\" color=\"primary\">\n        This simulation demonstrates the shape of the sampling distribution of the sample mean. Suppose I draw a large number of samples, each of size 𝑛, from some population. For each sample, I calculate a sample mean 𝑥̅. I now plot a histogram of those sample means. For a sufficiently large sample size, the shape of that histogram will look like a beautiful bell-shaped curve, no matter what shape the underlying population had.\n      </Alert>\n      <PopBar sim=\"CLT\" setPop={setPopType}/>\n      {popShape && <CLTSimulation popShape={popShape} mainSampleSize={SAMPLE_SIZE}/>}\n    </div>\n  );\n}\n","/*\n\n  Displays sliders for the user to adjust the mean and standard deviation\n\n*/\nimport React from 'react';\nimport { Input, InputGroup, InputGroupAddon, InputGroupText } from 'reactstrap';\nimport PropTypes from 'prop-types';\nimport { stringOrNumberType } from '../../lib/types.js';\n\nexport default function MeanSDInput({ title, mean, setMean, sd, setSD }){\n  return (\n    <div>\n      <p> Choose the Mean and Standard Deviation for {title} Height </p>\n      <InputGroup>\n        <InputGroupAddon addonType='prepend'>\n          <InputGroupText>{title} Height Mean:</InputGroupText>\n        </InputGroupAddon>\n        <Input type=\"number\" min={60} max={80} step={1} value={mean} onChange={(event) => setMean(event.target.value)}/>\n      </InputGroup>\n      <br/>\n      <InputGroup>\n        <InputGroupAddon addonType='prepend'>\n          <InputGroupText>{title} Height SD:</InputGroupText>\n        </InputGroupAddon>\n        <Input type=\"number\" min={1} max={7} value={sd} onChange={(event) => setSD(event.target.value)}/>\n      </InputGroup>\n    </div>\n  );\n}\n\nMeanSDInput.propTypes = {\n  title: PropTypes.string.isRequired,\n  mean: stringOrNumberType.isRequired,\n  setMean: PropTypes.func.isRequired,\n  sd: stringOrNumberType.isRequired,\n  setSD: PropTypes.func.isRequired,\n}\n","/*\n\n  Displays a Nivo scatterplot for the joint distribution data\n\n*/\nimport React from 'react';\nimport { ResponsiveScatterPlot } from \"@nivo/scatterplot\";\nimport { Col } from 'reactstrap';\nimport PropTypes from 'prop-types';\nimport { dataObjectArrayType } from '../../lib/types.js';\n\nexport default function JointChart({ jointData, sharedOptions, nodeId }) {\n\n  return (\n    <Col style={{ padding:\"5px 0px 5px 0px\", marginLeft:\"-50px\", marginRight:\"0px\", width: \"fit-content\"}}>\n    <div style={{ height: 368, width: 366, position:\"inline-block\", float:\"right\", marginLeft:\"0px\",}}>\n      <ResponsiveScatterPlot\n        {...sharedOptions}\n        colors={(node) => (nodeId && (node.id === nodeId)) ? \"#0053a1\" : \"#00b3ff\"}\n        data={[{id: \"data\", data: jointData}]}\n        yScale={{ type: 'linear', min: 40, max: 100 }}\n        yFormat={(e) => e + \" in.\"}\n        tooltip={({node}) =>\n          <div>\n            Parent Height: <strong>{node.data.formattedX}</strong>\n            <br/>\n            Child Height: <strong>{node.data.formattedY}</strong>\n          </div>\n        }\n        axisBottom={{\n          tickSize: 10,\n          legendPosition: 'middle',\n          legendOffset: 46,\n          legend: 'Parent Height (inches)'\n        }}\n        axisLeft={{\n          tickSize: 10,\n          legendPosition: 'middle',\n          legendOffset: -38,\n          legend: 'Child Height (inches)'\n        }}\n      />\n    </div>\n    </Col>\n  );\n}\n\nJointChart.propTypes = {\n  jointData: dataObjectArrayType.isRequired,\n  sharedOptions: PropTypes.objectOf(PropTypes.any).isRequired,\n  nodeId: PropTypes.string,\n}\n","/*\n\n  A container component to hold the three charts for the Joint Distribution simulation\n  Note that Nivo is used for these plots instead of HighCharts - easier to synchronize\n\n*/\nimport React, { useState, useCallback, useMemo } from \"react\";\nimport { Row, Col } from 'reactstrap';\nimport JointChart from \"./JointChart.js\";\nimport { ResponsiveScatterPlotCanvas } from \"@nivo/scatterplot\";\nimport { dataObjectArrayType } from \"../../lib/types.js\";\n\nexport default function JDCharts({ parentData, childData, jointData }) {\n  // these functions synchronize the plots - all three corresponding data points increase in size on mouse over\n  const [nodeId, setNodeId] = useState();\n  const handleMouseMove = useCallback((node) => setNodeId(node.id), [setNodeId]);\n  const handleMouseLeave = useCallback(() => setNodeId(), [setNodeId]);\n  const getNodeSize = useMemo(() => (node) => (nodeId && (nodeId === node.id)) ? 15 : 5, [nodeId]);\n\n  // options common to all three plots\n  const sharedOptions = {\n    animate: false,\n    margin: { top: 60, right: 10, bottom: 70, left: 70 },\n    xScale: { type: 'linear', min: 40, max: 100 },\n    blendMode: \"darken\",\n    xFormat: (e) => e + \" in.\",\n    nodeSize: getNodeSize,\n    enableGridX: false,\n    enableGridY: false,\n    onMouseMove: handleMouseMove,\n    onMouseLeave: handleMouseLeave,\n    axisBottom: {\n      tickSize: 10,\n      legendPosition: 'middle',\n      legendOffset: 46\n    },\n    axisLeft: {\n      tickSize: 10,\n      legendPosition: 'middle',\n      legendOffset: -30\n    }\n  }\n\n  return (\n    <Row>\n      <Col style={{ padding:\"5px 0px 5px 0px\", marginRight:\"0px\", marginLeft:\"-60px\"}}>\n        <div style={{ height: 368, width: 366, float:\"left\", position:\"inline-block\",}}>\n          <ResponsiveScatterPlotCanvas\n            data={[{id: \"data\", data: parentData}]}\n            tooltip={({node}) => <div><strong>{node.data.formattedX}</strong></div>}\n            colors={(node) => (node.id === nodeId) ? \"#910000\" : \"#ff0000\"}\n            {...sharedOptions}\n            yScale={{ type: 'linear', min: 0, max: 8 }}\n            axisBottom={{...sharedOptions.axisBottom, legend: 'Parent Height (inches)'}}\n            axisLeft={{...sharedOptions.axisLeft, legend: 'Count'}}\n          />\n        </div>\n      </Col>\n      <Col style={{ padding:\"5px 0px 5px 0px\", marginLeft:\"-55px\", marginRight:\"0px\", width: \"fit-content\"}}>\n        <div style={{ height: 368, width: 366, float:\"left\", position:\"inline-block\", marginLeft:\"0px\",}}>\n          <ResponsiveScatterPlotCanvas\n            data={[{id: \"data\", data: childData}]}\n            tooltip={({node}) => <div><strong>{node.data.formattedX}</strong></div>}\n            colors={(node) => (node.id === nodeId) ? \"#006607\" : \"#00ba0c\"}\n            {...sharedOptions}\n            yScale={{ type: 'linear', min: 0, max: 8 }}\n            axisBottom={{...sharedOptions.axisBottom, legend: 'Child Height (inches)'}}\n            axisLeft={{...sharedOptions.axisLeft, legend: 'Count'}}\n          />\n        </div>\n      </Col>\n      <Col>\n        <JointChart\n          jointData={jointData}\n          sharedOptions={sharedOptions}\n          nodeId={nodeId}\n        />\n      </Col>\n    </Row>\n  )\n}\n\nJDCharts.propTypes = {\n  parentData: dataObjectArrayType.isRequired,\n  childData: dataObjectArrayType.isRequired,\n  jointData: dataObjectArrayType.isRequired,\n}\n","import React from \"react\";\nimport { Input, InputGroup, InputGroupAddon } from \"reactstrap\";\nimport PropTypes from 'prop-types';\nimport { stringOrNumberType } from \"../lib/types\";\n\nexport default function InputSlider({ value, min, max, step, onChange }) {\n  return (\n    <InputGroup style={{height: \"30px\", width: \"400px\", margin: \"auto\"}}>\n      <Input\n        type=\"range\"\n        className=\"custom-range\"\n        style={{width: \"60%\"}}\n        value={value}\n        min={min}\n        max={max}\n        step={step}\n        onChange={(event) => onChange(event.target.value)}\n      />\n      <InputGroupAddon addonType=\"append\">\n        <Input\n          type=\"number\"\n          className=\"inputGroupAppend\"\n          value={value}\n          min={min}\n          max={max}\n          step={step}\n          onChange={(event) => onChange(event.target.value)}\n        />\n      </InputGroupAddon>\n    </InputGroup>\n  );\n}\n\nInputSlider.propTypes = {\n  value: stringOrNumberType.isRequired,\n  min: PropTypes.number.isRequired,\n  max: PropTypes.number.isRequired,\n  step: PropTypes.number.isRequired,\n  onChange: PropTypes.func.isRequired,\n}\n","/*\n\n  Displays the Joint Distributions simulation\n\n*/\nimport React, { useEffect, useState } from 'react';\nimport MultivariateNormal from 'multivariate-normal';\nimport { Container, Row, Col, InputGroupText, Button } from 'reactstrap';\nimport MeanSDInput from './MeanSDInput';\nimport JDCharts from './JDCharts';\nimport _ from \"lodash\";\nimport InputSlider from '../InputSlider';\nimport { abs } from 'mathjs';\n\nexport default function JDSimulation() {\n  const [parentMean, setParentMean] = useState(70);\n  const [childMean, setChildMean] = useState(70);\n  const [parentSD, setParentSD] = useState(1);\n  const [childSD, setChildSD] = useState(1);\n  const [correlation, setCorrelation] = useState(0);\n  const [stage, setStage] = useState(1);\n  const [allData, setAllData] = useState({parent: [], child: [], joint: []});\n\n  useEffect(() => {\n    if ((allData.parent.length > 0) && (allData.child.length > 0) && (allData.joint.length > 0)) {\n      setStage(2)\n    }\n  }, [allData]);\n\n  // generate datapoints for parent height and child height in a normal distribution\n  const generate = () => {\n    const newCorrelation = ((abs(+correlation) === 1) ? (0.999999 * correlation) : correlation);\n    const covariance = newCorrelation * parentSD * childSD;\n    const covMatrix = [[parentSD ** 2, covariance], [covariance, childSD ** 2]];\n    const distribution = MultivariateNormal([+parentMean, +childMean], covMatrix);\n\n    const jointSeries = [];\n    for (let i = 0; i < 500; i++) {\n      const [parentHeight, childHeight] = distribution.sample();\n      jointSeries.push({x: _.round(parentHeight, 2), y: _.round(childHeight, 2)});\n    }\n\n    const parentCounts = {};\n    const parentSeries = [];\n    const childCounts = {};\n    const childSeries = [];\n\n    jointSeries.forEach(({x, y}) => {\n      if (parentCounts[x]) {\n        parentCounts[x]++\n      } else {\n        parentCounts[x] = 1\n      }\n      parentSeries.push({x: x, y: parentCounts[x]});\n      if (childCounts[y]) {\n        childCounts[y]++\n      } else {\n        childCounts[y] = 1\n      }\n      childSeries.push({x: y, y: childCounts[y]});\n    });\n\n    const data = {parent: parentSeries, child: childSeries, joint: jointSeries}\n    setAllData(data);\n  }\n\n  return (\n    <Container fluid>\n      <Row>\n        <Col xl={4} md={6} xs={12} style={{padding: 10}}>\n          <MeanSDInput title=\"Parent\" mean={parentMean} setMean={setParentMean} sd={parentSD} setSD={setParentSD}/>\n        </Col>\n        <Col xl={4} md={6} xs={12} style={{padding: 10}}>\n          <MeanSDInput title=\"Child\" mean={childMean} setMean={setChildMean} sd={childSD} setSD={setChildSD}/>\n        </Col>\n        <Col xl={4} md={12} style={{padding: 10}}>\n          <p>Set the Correlation</p>\n          <InputSlider value={correlation} min={-1} max={1} step={0.1} onChange={(value) => setCorrelation(value)}/>\n          <p style={{ margin: \"15px\" }}>Covariance</p>\n          <InputGroupText>{(correlation * parentSD * childSD).toFixed(2)}</InputGroupText>\n        </Col>\n      </Row>\n      <Row className='Center'>\n        <Button\n          outline\n          color='primary'\n          style={{margin:\"3vh\", width: \"fit-content\"}}\n          disabled={!parentMean || !parentSD || !childMean || !childSD}\n          onClick={() => generate()}\n        >\n          Generate!\n        </Button>\n      </Row>\n      {(stage === 2) && <JDCharts parentData={allData.parent} childData={allData.child} jointData={allData.joint}/>}\n    </Container>\n  );\n}\n","/*\n\n  A container component that holds the description and simulation for Joint Distribution\n\n*/\nimport React from 'react';\nimport { Alert } from 'reactstrap';\nimport JDSimulation from './JDSimulation.js';\n\nexport default function JointWrapper() {\n  return(\n    <div className=\"MainContainer\">\n      <Alert style={{ width: \"50%\", margin: 'auto' }} color=\"primary\">\n          Joint Distributions\n      </Alert>\n      <br/>\n      <JDSimulation/>\n    </div>\n  );\n}\n","import React from 'react';\nimport { Input, InputGroup, InputGroupAddon, InputGroupText } from 'reactstrap';\nimport PropTypes from 'prop-types';\n\nexport default function CoefficientInput({ beta, setBeta, delta, setDelta }){\n  return (\n    <div>\n      <InputGroup>\n        <InputGroupAddon addonType='prepend'>\n          <InputGroupText>β₁, the Coefficient on Study Hours:</InputGroupText>\n        </InputGroupAddon>\n        <Input\n          className=\"Center\"\n          type=\"number\"\n          step={.1}\n          value={beta}\n          min={-4}\n          max={4}\n          onChange={(event) => setBeta(event.target.value)}/>\n      </InputGroup>\n      <br/>\n      <InputGroup>\n        <InputGroupAddon addonType='prepend'>\n            <InputGroupText>𝛿, the Coefficient on Sleep Hours:</InputGroupText>\n        </InputGroupAddon>\n        <Input\n          className=\"Center\"\n          type=\"number\"\n          step={.1}\n          value={delta}\n          min={-4}\n          max={4}\n          onChange={(event) => setDelta(event.target.value)}/>\n      </InputGroup>\n    </div>\n  );\n}\n\nCoefficientInput.propTypes = {\n  beta: PropTypes.number.isRequired,\n  setBeta: PropTypes.func.isRequired,\n  delta: PropTypes.number.isRequired,\n  setDelta: PropTypes.func.isRequired,\n}\n","import React, { useEffect, useState } from 'react';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official'\nimport PropTypes from 'prop-types';\nimport { dataObjectArrayType } from '../../lib/types.js';\n\nexport default function OmittedVariableChart({ dataPoints, naiveLine, correctedLine }) {\n  const [myChart, setMyChart] = useState({});\n\n  useEffect(() => {\n    const newChart = {\n      chart: {\n        type: 'scatter',\n        zoomtype: 'xy'\n      },\n      title: {\n        text: 'Study Hours vs. Test Score'\n      },\n      xAxis: {\n        min: 0,\n        max: 10,\n        title : {\n          text: 'Study Hours'\n        }\n      },\n      yAxis: {\n        min: 20,\n        max: 100,\n        title: {\n          text: 'Test Score'\n        }\n      },\n      series: [\n        {\n          type: 'scatter',\n          data: dataPoints,\n          name: \"Test Score\",\n          color: '#33A5FF'\n        },\n        {\n          type: 'line',\n          data: naiveLine,\n          name: \"Naive Regression\",\n          color: '#E30404',\n          label: {\n            enabled: false\n          }\n        },\n        {\n          type: 'line',\n          data: correctedLine,\n          name: \"Corrected Regression\",\n          color: '#2AC208',\n          label: {\n            enabled: false\n          }\n        }\n      ]\n    }\n\n    setMyChart(newChart);\n  }, [dataPoints, naiveLine, correctedLine]);\n\n  return (\n    <HighchartsReact highcharts={Highcharts} options={myChart}/>\n  );\n}\n\nOmittedVariableChart.propTypes = {\n  dataPoints: dataObjectArrayType.isRequired,\n  naiveLine: PropTypes.arrayOf(PropTypes.number),\n  correctedLine: PropTypes.arrayOf(PropTypes.number)\n}\n","import React, { useState, useEffect } from \"react\";\nimport { Row, Col, Button, InputGroup, InputGroupText } from \"reactstrap\";\nimport CoefficientInput from \"./CoefficientInput.js\";\nimport MultivariateNormal from \"multivariate-normal\";\nimport { round, transpose, matrix, multiply, inv } from \"mathjs\";\nimport regression from \"regression\";\nimport OmittedVariableChart from \"./OmittedVariableChart.js\";\nimport PD from \"probability-distributions\";\nimport _ from \"lodash\";\nimport InputSlider from \"../InputSlider.js\";\n\nexport default function OVBSimulation() {\n  const [beta, setBeta] = useState(3);\n  const [delta, setDelta] = useState(3);\n  const [correlation, setCorrelation] = useState(0);\n  const [covariance, setCovariance] = useState(0);\n  const [stage, setStage] = useState(1);\n  const [series, setSeries] = useState([]);\n  const [showCorrect, setShowCorrect] = useState(false);\n  const [allData, setAllData] = useState({points: [], naiveLine: [], correctedLine: []})\n\n  useEffect(() => {\n    if (series.length > 0) {\n      generateData();\n      setShowCorrect(false);\n    }\n  }, [series]);  // eslint-disable-line\n\n  useEffect(() => {\n    if ((allData.points.length > 0) && (allData.naiveLine.length > 0)) {\n      setStage(2);\n    }\n  }, [allData]);\n\n  const stdX = 3;\n  const stdY = 6;\n  const OBS = 1000;\n\n  const generatePoints = (slope, int) => {\n    const points = [];\n\n    for(let i=0;i<11;i++){\n      points[i] = _.round(int + i * slope, 2);\n    }\n\n    return points;\n  }\n\n  const generateSeries = () => {\n    // covariance between dimensions. This examples makes the first and third\n    // dimensions highly correlated, and the second dimension independent.\n    const covarianceMatrix = [\n      [stdX * stdX, covariance],\n      [covariance, stdY * stdY]\n    ];\n\n    // lets you sample from distribution\n    const distribution = MultivariateNormal([5, 2], covarianceMatrix);\n    const seriesArr = []\n\n    // samples 1000\n    for (let i = 0; i < OBS; i++){\n      const [a, b] = distribution.sample()\n      seriesArr.push([_.round(a, 2), _.round(b, 2)]);\n    }\n\n    setSeries(seriesArr);\n  }\n\n  // TODO - simplify this\n  const generateData = () => {\n\n    // generate epsilon\n    const epsilon = PD.rnorm(OBS, 0, 5);\n\n    // matrix data\n    const ones = [];\n    const colOne = [];\n    const colTwo = [];\n\n    // generate test score data\n    const scores = [];\n    for(let i=0;i<OBS;i++){\n      const scorePoint = 40 + beta * series[i][0] + delta * series[i][1] + epsilon[i];\n      scores.push(round(scorePoint*100)/100);\n      ones.push(1);\n      colOne.push(series[i][0]);\n      colTwo.push(series[i][1]);\n    }\n\n    // get series with study hours vs test scores\n    const studyScores = [];\n    for(let i=0;i<OBS;i++){\n      studyScores.push([series[i][0],scores[i]]);\n    }\n\n    // regress study hours with test scores\n    const naiveReg = regression.linear(studyScores);\n    const naiveSlope = (naiveReg.equation[0]);\n    const naiveInt = (naiveReg.equation[1]);\n\n    // Corrected regression\n\n    // using matrices\n    const X = transpose(matrix([ones,colOne, colTwo]));\n    const Y = transpose(matrix([scores]));\n    const inverse = inv(multiply(transpose(X),X));\n    const bHat = multiply(multiply(inverse,transpose(X)),Y);\n\n    setAllData({\n      points: studyScores.map(([x, y]) => ({x, y})),\n      naiveLine: generatePoints(naiveSlope, naiveInt),\n      correctedLine: generatePoints(parseFloat(bHat.get([1,0])),parseFloat(bHat.get([0,0])))\n    });\n  }\n\n  const adjustCorrelation = (value) => {\n    setCorrelation(value);\n    setCovariance(value * stdX * stdY);\n  }\n\n  return (\n    <div>\n      <Row>\n        <p className=\"Center\">Choose Population Parameters:</p>\n      </Row>\n      <br/>\n      <Row lg={2} sm={1}>\n        <Col style={{margin: \"auto\", padding: 10}}>\n          <CoefficientInput beta={beta} setBeta={setBeta} delta={delta} setDelta={setDelta}/>\n        </Col>\n        <Col>\n          <div style={{padding: 10}}>Set the Correlation between Study Hours and Sleep Hours:</div>\n          <InputSlider value={correlation} min={-0.99} max={0.99} step={.01} onChange={(value) => adjustCorrelation(value)}/>\n          <br/>\n          <InputGroup style={{width: \"fit-content\", margin: \"auto\"}}>\n            <InputGroupText className=\"Center\">Covariance between Study Hours and Sleep Hours:</InputGroupText>\n            <InputGroupText className=\"Center\">{covariance.toFixed(2)}</InputGroupText>\n          </InputGroup>\n        </Col>\n      </Row>\n      <br/>\n      <Row>\n        <Col>\n          <p>Estimate Regression Using Test Score and Study Hours Data </p>\n          <Button color=\"primary\" onClick={() => generateSeries()}>Generate!</Button>\n        </Col>\n      </Row>\n      <br/>\n      {(stage >= 2) && (\n        <div>\n          <Row>\n            <Col lg={{size: 12, offset: 0}} xl={{size: 8, offset: 2}}>\n              <OmittedVariableChart\n                dataPoints={allData.points}\n                naiveLine={allData.naiveLine}\n                correctedLine={showCorrect ? allData.correctedLine : []}\n              />\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              <p color=\"primary\">Add Omitted Variable, Density, to Regression</p>\n              <Button outline color=\"primary\" onClick={() => setShowCorrect(true)}>Show Corrected Regression Line</Button>\n            </Col>\n          </Row>\n        </div>\n      )}\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Alert, Row } from \"reactstrap\";\nimport OVBSimulation from \"./OVBSimulation\";\n\nexport default function OmittedVariableBias() {\n  return (\n    <div className=\"MainContainer\">\n      <Alert style={{ width: \"50%\", margin: 'auto' }} color=\"primary\">\n        Omitted Variable Bias\n      </Alert>\n      <br/>\n      <Row>\n        <p className=\"Center\">We are studying the relationship between test score and study hours:</p>\n        <p className=\"Center\">Test Score = β₀ + β₁Study Hoursᵢ + 𝛿Sleep Hoursᵢ + uᵢ</p>\n      </Row>\n      <br/>\n      <OVBSimulation/>\n      <br/>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Row, Col } from \"reactstrap\";\nimport InputSlider from \"../InputSlider.js\";\nimport SelectorButtonGroup from \"../SelectorButtonGroup.js\";\nimport PropTypes from 'prop-types';\nimport { distributionType, stringOrNumberType } from \"../../lib/types.js\";\n\nexport default function ConfidenceInputs({ distType, setDistType, confLevel, setConfLevel }) {\n  return (\n    <div>\n      <Row className=\"Center\">\n        <div>\n          1) Do you want to assume that you know σ? If yes, choose Z. If no, choose T: {\" \"}\n          <SelectorButtonGroup options={[\"Z\", \"T\"]} select={setDistType} selected={distType}/>\n        </div>\n      </Row>\n      <br/>\n      <Row className=\"Center\">\n        <div>\n          2) Confidence Level: {\" \"}\n          <SelectorButtonGroup\n            options={[\"90%\", \"95%\", \"99%\"]}\n            select={(pct) => setConfLevel(pct.slice(0, 2))}\n            selected={confLevel + \"%\"}\n          />\n        </div>\n      </Row>\n      <br/>\n      <Row className=\"Center\">\n        <Col sm=\"12\" md={{ size: 6, offset: 3 }}>\n          <div>\n            More Levels:\n            <InputSlider value={confLevel} min={1} max={99} step={1} onChange={setConfLevel}/>\n          </div>\n        </Col>\n      </Row>\n    </div>\n  );\n}\n\nConfidenceInputs.propTypes = {\n  distType: distributionType.isRequired,\n  setDistType: PropTypes.func.isRequired,\n  confLevel: stringOrNumberType.isRequired,\n  setConfLevel: PropTypes.func.isRequired,\n}\n","import React, { useEffect, useState } from \"react\";\nimport Highcharts from \"highcharts\";\nimport HighchartsReact from \"highcharts-react-official\";\nimport { Alert } from \"reactstrap\";\nimport _ from \"lodash\";\nimport More from \"highcharts/highcharts-more\";\nimport { max } from \"mathjs\";\nimport PropTypes from 'prop-types';\nimport { confidenceIntervalsSampleType, popShapeType } from \"../../lib/types.js\";\nimport { VALUES_ALT } from \"../../lib/constants.js\";\n\nMore(Highcharts);\n\nexport default function ConfidenceIntervalsChart({ confidenceLevel, samples, popShape, popMean, selected, setSelected }) {\n  const [chart, setChart] = useState({});\n\n  useEffect(() => {\n    const { xmaxval, xminval, title, xLabel } = VALUES_ALT[popShape];\n\n    const sampleMeans = [];\n    const containsMean = [];\n    const doesntContainMean = [];\n\n    samples.forEach((sampleObject) => {\n      sampleMeans.push({\n        ...sampleObject,\n        x: sampleObject.id,\n        y: sampleObject.mean\n      });\n      if (sampleObject.label) {\n        containsMean.push({\n          ...sampleObject,\n          low: sampleObject.lowerConf,\n          high: sampleObject.upperConf,\n          x: sampleObject.id\n        })\n      } else {\n        doesntContainMean.push({\n          ...sampleObject,\n          low: sampleObject.lowerConf,\n          high: sampleObject.upperConf,\n          x: sampleObject.id\n        })\n      }\n    });\n\n    const tooltipFormat = {\n      headerFormat: \"\",\n      pointFormat: \"Sample Size: <b>{point.size}</b><br/>Sample Mean: <b>{point.mean}</b><br/>Lower Bound of CI: <b>{point.lowerConf}</b><br/>Upper Bound of CI: <b>{point.upperConf}</b><br/>Confidence Level: <b>{point.confidenceLevel}%</b><br/>Distribution: <b>{point.distribution}</b><br/>\",\n      outside: true,\n      borderColor: \"gray\",\n    }\n\n    const newChart = {\n      chart: {\n        type: 'columnrange',\n        inverted: true,\n        animation: false,\n        zoomType: \"xy\",\n        events: {\n          // hack to allow zoom\n          selection: (event) => {\n            event.target.series.forEach((series) => {\n              series.data.forEach((point) => {\n                point.select(false, false)\n              })\n            })\n          }\n        }\n      },\n      plotOptions: {\n        series: {\n          point: {\n            events: {\n              click() {\n                setSelected(this);\n                this.select(false, false);\n              }\n            }\n          },\n          animation: {\n            duration: 0\n          },\n          cursor: \"pointer\"\n        }\n      },\n      title: {\n        text: title\n      },\n      xAxis: {\n        reversed: false,\n        min: 1,\n        max: max(samples.length, 10),\n        startOnTick: true,\n        title: {\n          text: \"Sample Number\"\n        },\n        tickPixelInterval: 1,\n        tickInterval: 1\n      },\n      yAxis: {\n        min: xminval,\n        max: xmaxval,\n        startOnTick: true,\n        endOnTick: true,\n        title: {\n          text: xLabel\n        }\n      },\n      series: [\n        {\n          name: \"Confidence Interval\",\n          data: containsMean,\n          color: \"rgba(0, 170, 0, 0.5)\",\n          centerInCategory: true,\n          showInLegend: false,\n          tooltip: tooltipFormat,\n          allowPointSelect: true,\n          animation: {\n            duration: 0\n          },\n          states: {\n            hover: {\n              color: \"rgba(0, 170, 0, 1)\"\n            },\n            inactive: {\n              color: \"rgba(0, 170, 0, 0.5)\"\n            },\n            select: {\n              enabled: false,\n              color: \"rgba(0, 170, 0, 0.5)\"\n            }\n          }\n        },\n        {\n          name: \"Confidence Interval\",\n          data: doesntContainMean,\n          color: \"rgba(255, 0, 0, 0.5)\",\n          centerInCategory: true,\n          showInLegend: false,\n          tooltip: tooltipFormat,\n          allowPointSelect: true,\n          animation: {\n            duration: 0\n          },\n          states: {\n            hover: {\n              color: \"rgba(255, 0, 0, 1)\"\n            },\n            inactive: {\n              color: \"rgba(255, 0, 0, 0.5)\"\n            },\n            select: {\n              enabled: false,\n              color: \"rgba(255, 0, 0, 0.5)\"\n            }\n          }\n        },\n        {\n          name: \"Sample Means\",\n          type: \"scatter\",\n          data: sampleMeans,\n          color: \"#616161\",\n          marker: {\n            enabled: true,\n            symbol: \"diamond\",\n            radius: 1\n          },\n          allowPointSelect: true,\n          animation: {\n            duration: 0\n          },\n          states: {\n            hover: {\n              enabled: false\n            },\n            select: {\n              enabled: false,\n            }\n          },\n          tooltip: tooltipFormat,\n        },\n        {\n          type: \"line\",\n          name: \"Population Mean\",\n          data: [[0, popMean], [samples.length, popMean]],\n          color: \"gray\",\n          enableMouseTracking: false,\n          showInLegend: false,\n          label: {\n            enabled: false\n          },\n          marker: {\n            enabled: false\n          },\n          zIndex: -5\n        }\n      ]\n    }\n    setChart(newChart);\n  }, [confidenceLevel, samples, popShape, popMean, setSelected]);\n\n  return (\n    <div>\n      {\n        selected ? (\n          <Alert color={selected.label ? \"success\" : \"danger\"} className=\"Center\">\n            Sample number {selected.id} has a mean of {selected.mean.toFixed(2)}, with {confidenceLevel}% CI ({_.round(selected.lowerConf, 2)}, {_.round(selected.upperConf, 2)}). CI contains the population mean? {selected.label.toString()}\n          </Alert>\n        ) : <div style={{height: 80}}/>\n      }\n      <HighchartsReact highcharts={Highcharts} options={chart}/>\n    </div>\n  );\n}\n\nConfidenceIntervalsChart.propTypes = {\n  confidenceLevel: PropTypes.number.isRequired,\n  samples: PropTypes.arrayOf(confidenceIntervalsSampleType).isRequired,\n  popShape: popShapeType.isRequired,\n  popMean: PropTypes.number.isRequired,\n  selected: confidenceIntervalsSampleType,\n  setSelected: PropTypes.func.isRequired,\n}\n","import React, { useState } from \"react\";\nimport { Button, Input, Alert } from \"reactstrap\";\nimport PropTypes from \"prop-types\";\n\nexport default function ManySamplesInput({ populationSize, addSamples }) {\n  const [numberResamples, setNumberResamples] = useState(0);\n  const [resampleSize, setResampleSize] = useState(0);\n\n  return (\n    <div style={{ padding: 50 }}>\n      <Alert color=\"primary\" style={{width: \"50%\", margin: \"auto\"}}>\n        Simulate drawing many many samples\n      </Alert>\n      <br/>\n      <span> Sample Size: </span>\n      <Input\n        style={{width: \"40%\", margin: \"auto\"}}\n        min={1}\n        type=\"number\"\n        placeholder=\"Sample Size:\"\n        onChange={(event) => setResampleSize(event.target.value)}\n        value={resampleSize}\n      />\n      <br/>\n      <span> Number of Replications: </span>\n      <Input\n        style={{width: \"40%\", margin: \"auto\"}}\n        min={1}\n        type=\"number\"\n        placeholder=\"Number of Replications:\"\n        onChange={(event) => setNumberResamples(event.target.value)}\n        value={numberResamples}\n      />\n      <br/>\n      <Button\n        onClick={() => addSamples(resampleSize, numberResamples)}\n        disabled={(resampleSize < 1) || (resampleSize > populationSize) || (numberResamples < 1)}\n      >\n        Run\n      </Button>\n      <Button onClick={() => addSamples()}>Clear</Button>\n    </div>\n  );\n}\n\nManySamplesInput.propTypes = {\n  populationSize: PropTypes.number.isRequired,\n  addSamples: PropTypes.func.isRequired,\n}\n","import React from \"react\";\nimport { Table } from \"reactstrap\";\nimport PropTypes from 'prop-types';\nimport { confidenceIntervalsSampleType } from \"../../lib/types.js\";\n\nexport default function SamplesTable({ samples, setSelected }) {\n\n  const samplesTable = samples.map((sampleObject) =>\n    <tr\n      style={{ backgroundColor: sampleObject.label ? \"rgba(23, 161, 80, 0.233)\" : \"rgba(161, 23, 23, 0.233)\", cursor: \"pointer\" }}\n      key={sampleObject.id}\n      onClick={() => setSelected(sampleObject)}\n    >\n      <td>{sampleObject.id}</td>\n      <td>{sampleObject.size}</td>\n      <td>{sampleObject.mean}</td>\n      <td>{sampleObject.lowerConf}</td>\n      <td>{sampleObject.upperConf}</td>\n      <td>{sampleObject.confidenceLevel}</td>\n      <td>{sampleObject.distribution.toUpperCase()}</td>\n    </tr>\n  );\n\n  samplesTable.reverse()\n\n  return (\n    <div style={{ height: 500, overflow: \"auto\", marginTop: -50 }}>\n      <Table hover className=\"ciTable\">\n        <thead>\n          <tr>\n            <th>Sample</th>\n            <th>Size</th>\n            <th>Mean</th>\n            <th>Lower Bound for CI</th>\n            <th>Upper Bound for CI</th>\n            <th>Confidence Level</th>\n            <th>Distribution</th>\n          </tr>\n        </thead>\n        <tbody>\n          {samplesTable}\n        </tbody>\n      </Table>\n    </div>\n  )\n}\n\nSamplesTable.propTypes = {\n  samples: PropTypes.arrayOf(confidenceIntervalsSampleType).isRequired,\n  setSelected: PropTypes.func.isRequired,\n}\n","import React from \"react\";\nimport DotPlot from \"../DotPlot\";\nimport { Alert, Container } from \"reactstrap\";\nimport _ from \"lodash\";\nimport PropTypes from 'prop-types';\nimport { dataObjectArrayType, popShapeType } from \"../../lib/types.js\";\nimport { TEXTS_ALT, VALUES_ALT } from \"../../lib/constants.js\";\n\nexport default function PopulationChart({ popArray, popMean, sampled, popShape }) {\n  const { xmaxval, xminval, ymaxval, title, xLabel } = VALUES_ALT[popShape];\n\n  const series = [\n    {\n      name: 'Population',\n      data: popArray\n    },\n    {\n      name: 'Samples',\n      data: sampled\n    }\n  ];\n\n  return (\n    <Container fluid>\n      <Alert color=\"secondary\" className=\"Center\">\n        We queried the {TEXTS_ALT[popShape][0]} of {popArray.length} {TEXTS_ALT[popShape][1]} and plotted the results on the following chart.\n      </Alert>\n      <DotPlot\n        series={series}\n        title={`${title} <br /> Population Mean: ${_.round(popMean, 2)}`}\n        xMin={xminval}\n        xMax={xmaxval}\n        yMax={ymaxval}\n        xLabel={xLabel}\n      />\n  </Container>\n  );\n}\n\nPopulationChart.propTypes = {\n  popArray: dataObjectArrayType.isRequired,\n  popMean: PropTypes.number,\n  sampled: dataObjectArrayType.isRequired,\n  popShape: popShapeType.isRequired\n}\n","import React, { useState, useEffect } from \"react\";\nimport Collapsable from \"../Collapsable.js\";\nimport ConfidenceInputs from \"./ConfidenceInputs.js\";\nimport SampleSizeInput from \"../SampleSizeInput.js\";\nimport ConfidenceIntervalsChart from \"./ConfidenceIntervalsChart.js\";\nimport ManySamplesInput from \"./ManySamplesInput.js\";\nimport SamplesTable from \"./SamplesTable.js\";\nimport { dataFromDistribution, populationMean, populationStandardDev } from \"../../lib/stats-utils.js\";\nimport { Row, Col, Alert } from \"reactstrap\";\nimport PopulationChart from \"./PopulationChart.js\";\nimport _ from \"lodash\";\nimport { jStat } from \"jstat\";\nimport PropTypes from \"prop-types\";\nimport Highcharts from \"highcharts\";\nimport { popShapeType } from \"../../lib/types.js\";\n\nexport default function CISimulation({ popShape, populationSize }) {\n  const [distType, setDistType] = useState(\"Z\");  // can be \"Z\" or \"T\"\n  const [confLevel, setConfLevel] = useState(95);\n  const [popArray, setPopArray] = useState([]);\n  const [samples, setSamples] = useState([]);\n  const [selected, setSelected] = useState();\n\n  useEffect(() => {\n    setPopArray([]);\n    setSamples([]);\n  }, [popShape]);\n\n  // Highcharts rendering is buggy - this second useEffect takes a second but allows the data to be reset completely before being generated again\n  useEffect(() => {\n    if (popArray.length === 0) {\n      // adjust params for uniform distribution to fit example\n      const newPop = dataFromDistribution(popShape, populationSize, {low: 54, hi: 74});\n      setPopArray(newPop);\n    }\n  }, [popArray, popShape, populationSize]);\n\n  // this is a hack to get around what I believe is a bug in highcharts\n  // where a point will sometimes turn gray when selected\n  const unselect = () => {\n    Highcharts.charts.forEach((chart) => {\n      if (chart) {\n        chart.series.forEach((series) => {\n          series.data.forEach((point) => {\n            point.select(false, false)\n          })\n        })\n      }\n    });\n  }\n\n  const generateSamples = (size, replications=1) => {\n    unselect();\n    if (!size) {  // calling generateSamples with no arguments clears the data\n      setSamples([]);\n      setSelected();\n    } else {\n      const sampleObjects = [];\n      for (let i = 0; i < replications; i++) {\n        const sample = _.sampleSize(popArray, size);\n        const mean = _.round(populationMean(sample), 2);\n        const popMean = _.round(populationMean(popArray), 2);\n        const standardDev = populationStandardDev((distType === \"Z\") ? popArray : sample);\n        const ciFunction = (distType === \"Z\") ? jStat.normalci : jStat.tci;\n        const [lowerConf, upperConf] = ciFunction(mean, 1 - (confLevel / 100), standardDev, size);\n        const sampleObject = {\n          data: sample,\n          size: +size,\n          mean: mean,\n          lowerConf: _.round(lowerConf, 2),\n          upperConf: _.round(upperConf, 2),\n          confidenceLevel: confLevel,\n          distribution: distType,\n          label: (popMean >= _.round(lowerConf, 2)) && (popMean <= _.round(upperConf, 2)),\n        }\n        sampleObjects.push(sampleObject);\n      }\n      const newSamples = [...samples, ...sampleObjects];\n      const indexedSamples = newSamples.map((sample, index) => ({...sample, id: index + 1}))\n      setSamples(indexedSamples);\n      setSelected(indexedSamples[indexedSamples.length - 1]);\n    }\n  }\n\n  const selectPoint = (point) => {\n    setSelected(point);\n    unselect();\n  }\n\n  return (\n    <Collapsable>\n      <div>\n        <Row>\n          <ConfidenceInputs\n            distType={distType}\n            setDistType={setDistType}\n            confLevel={confLevel}\n            setConfLevel={setConfLevel}\n          />\n        </Row>\n        <br/>\n        <Row md={1} lg={2}>\n          <Col>\n            <PopulationChart\n              popArray={popArray}\n              popMean={populationMean(popArray)}\n              sampled={selected ? selected.data : []}  // most recent sample data\n              popShape={popShape}\n            />\n            <p>Try drawing some samples and calculating means</p>\n            <SampleSizeInput maxSize={popArray.length} handleClick={generateSamples}/>\n          </Col>\n          <Col>\n            <ConfidenceIntervalsChart\n              confidenceLevel={confLevel}\n              samples={samples}\n              popShape={popShape}\n              popMean={_.round(populationMean(popArray))}\n              selected={selected}\n              setSelected={setSelected}\n            />\n          </Col>\n        </Row>\n        <Row>\n          <Col lg={12} xl={5}>\n            <ManySamplesInput\n              populationSize={popArray.length}\n              addSamples={generateSamples}\n            />\n          </Col>\n          <Col lg={12} xl={7}>\n            <SamplesTable samples={samples} setSelected={selectPoint}/>\n          </Col>\n        </Row>\n        <br/>\n        <Row>\n          {(samples.length > 0) && (\n            <Alert color=\"info\" style={{margin:\"auto\"}}>\n              {samples.filter(({ label }) => !label).length} intervals did not contain the population mean.\n              <br/>\n              {samples.filter(({ label }) => label).length} did ({_.round(100 * samples.filter(({ label }) => label).length / samples.length, 2)}%).\n            </Alert>\n          )}\n        </Row>\n      </div>\n    </Collapsable>\n  );\n}\n\nCISimulation.propTypes = {\n  popShape: popShapeType.isRequired,\n  populationSize: PropTypes.number.isRequired,\n}\n","import React, { useState } from 'react';\nimport PopBar from '../PopBar.js';\nimport { Alert } from 'reactstrap';\nimport CISimulation from './CISimulation.js';\nimport { SAMPLE_SIZE } from '../../lib/constants.js';\n\nexport default function ConfidenceIntervals() {\n  const [popShape, setPopType] = useState(\"\");\n\n  return (\n    <div className=\"MainContainer\">\n      <Alert style={{ width: \"50%\", margin: 'auto' }} color=\"primary\">\n        Confidence Intervals\n      </Alert>\n      <Alert style={{ width: \"50%\", margin: 'auto' }} color=\"primary\">\n        This simulation demonstrates how confidence intervals provide an estimate for the location of the true population mean µ. In this exercise you will first choose 1) whether to assume that you know the true population standard deviation and 2) what confidence level to impose. Then, you will take random samples from the population, calculation a sample mean for each, and construct confidence intervals around those sample means. The proportion of confidence intervals that contain the true mean corresponds to the chosen confidence level!\n      </Alert>\n      <PopBar sim=\"CI\" setPop={setPopType}/>\n      {popShape && <CISimulation popShape={popShape} populationSize={SAMPLE_SIZE}/>}\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Container, Row, Alert } from \"reactstrap\";\nimport DotPlot from \"../DotPlot.js\";\nimport PropTypes from \"prop-types\";\nimport { dataObjectArrayType } from \"../../lib/types.js\";\nimport { populationMean } from \"../../lib/stats-utils.js\";\n\nexport default function PopulationChartReveal({ popArr, pVal, alpha }) {\n  return (\n    <Container>\n      <Row className=\"Center\">\n        <Container fluid>\n          <Row>\n            <Alert color=\"secondary\" className=\"Center\">\n              <p>\n                We queried the monthly Milk Production of {popArr.length} cows and plotted the results on the following chart.\n              </p>\n              <p>\n                The population mean is {(popArr.length > 0) && populationMean(popArr).toFixed(2)}.\n              </p>\n            </Alert>\n          </Row>\n          <Row>\n            <DotPlot\n              series={[{name: 'Population', data: popArr}]}\n              title=\"Milk Production\"\n              xMin={55}\n              xMax={81}\n              yMax={40}\n              xLabel=\"Gallons\"\n            />\n          </Row>\n        </Container>\n      </Row>\n      <Row className=\"Center\">\n        <p>Our hypothesis test conclusion was therefore {(pVal < alpha) ? \"correct\" : \"incorrect\"}.</p>\n      </Row>\n    </Container>\n  )\n}\n\nPopulationChartReveal.propTypes = {\n  popArr: dataObjectArrayType.isRequired,\n  pVal: PropTypes.number.isRequired,\n  alpha: PropTypes.number.isRequired\n}\n","import React from \"react\";\nimport { Alert } from \"reactstrap\";\nimport PropTypes from \"prop-types\";\nimport _ from \"lodash\";\n\nexport default function DataDisplay({ mean, standardDev, testStatistic, pValue, alpha }) {\n  return (\n    <Alert color=\"secondary\" className=\"Center\" >\n      <p>This sample yields the following data:</p>\n      <p>Sample Mean: {_.round(mean, 2)}</p>\n      <p>Sample Standard Deviation: {_.round(standardDev, 2)} </p>\n      <p>The test statistic is {_.round(testStatistic, 2)}</p>\n      <p>This test statistic yields a p-value of P(Z &gt; teststat) = {_.round(pValue, 4)}. </p>\n      <p>Therefore we {(pValue < alpha) ? \"reject\" : \"fail to reject\"} the null hypothesis. </p>\n    </Alert>\n  )\n}\n\nDataDisplay.propTypes = {\n  mean: PropTypes.number.isRequired,\n  standardDev: PropTypes.number.isRequired,\n  testStatistic: PropTypes.number.isRequired,\n  pValue: PropTypes.number.isRequired,\n  alpha: PropTypes.number.isRequired\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Row, Col, InputGroup, InputGroupAddon, InputGroupText, Input } from \"reactstrap\";\nimport { stringOrNumberType } from \"../../lib/types\";\n\nexport default function SampleSizeAlphaInputs({ sampleSize, setSampleSize, alpha, setAlpha, popSize }) {\n  return (\n    <Row>\n      <Col xs=\"6\">\n        <InputGroup>\n          <InputGroupAddon addonType=\"prepend\">\n            <InputGroupText>Sample Size</InputGroupText>\n          </InputGroupAddon>\n          <Input\n            type=\"number\"\n            step={1}\n            value={sampleSize}\n            min={1}\n            max={popSize}\n            onChange={(event) => setSampleSize(event.target.value)}\n          />\n        </InputGroup>\n      </Col>\n      <Col xs=\"6\">\n        <InputGroup>\n          <InputGroupAddon addonType=\"prepend\">\n            <InputGroupText>Alpha</InputGroupText>\n          </InputGroupAddon>\n          <Input\n            type=\"number\"\n            step={0.01}\n            value={alpha}\n            min={0}\n            max={1}\n            onChange={(event) => setAlpha(event.target.value)}\n          />\n        </InputGroup>\n      </Col>\n    </Row>\n  )\n}\n\nSampleSizeAlphaInputs.propTypes = {\n  sampleSize: stringOrNumberType.isRequired,\n  setSampleSize: PropTypes.func.isRequired,\n  alpha: stringOrNumberType.isRequired,\n  setAlpha: PropTypes.func.isRequired,\n  popSize: PropTypes.number.isRequired\n}\n","import React, { useEffect, useState } from \"react\";\nimport { sqrt } from \"mathjs\";\nimport { Button, Container, Row } from \"reactstrap\";\nimport { dataFromDistribution, populationMean, populationStandardDev } from \"../../lib/stats-utils.js\";\nimport PropTypes from \"prop-types\";\nimport PopulationChartReveal from \"./PopulationChartReveal.js\";\nimport _ from \"lodash\";\nimport { jStat } from \"jstat\";\nimport DataDisplay from \"./DataDisplay.js\";\nimport SampleSizeAlphaInputs from \"./SampleSizeAlphaInput.js\";\nimport { popShapeType } from \"../../lib/types.js\";\n\nexport default function PerformTest({ shape, tails, mue0 }) {\n  const [popArr, setPopArr] = useState([]);\n  const [sample, setSample] = useState([]);\n  const [sampleSize, setSampleSize] = useState(0);\n  const [alpha, setAlpha] = useState(0);\n  const [sim, setSim] = useState(0);\n\n  useEffect(() => {\n    setPopArr(dataFromDistribution(shape, 2000, { mean: 69, low: 59, hi: 79 }))\n  }, [shape]);\n\n  const takeSample = () => {\n    setSample(_.sampleSize(popArr, sampleSize));\n    if (sim === 0) {\n      setSim(1);\n    }\n  }\n\n  const getTestStatistic = (mean, sd) => {\n    // TODO: use different function if T distribution\n    return jStat.zscore(mean, mue0, sd / sqrt(sampleSize))\n  }\n\n  const getPValue = (mean, sd) => {\n    // TODO: use different function if T distribution\n    return jStat.ztest(mean, mue0, sd / sqrt(sampleSize), tails)\n  }\n\n  const sampleMean = populationMean(sample);\n  const sampleSD = populationStandardDev(sample);  // TODO: use this when pop sd is unknown\n  const testStatistic = getTestStatistic(sampleMean, 3);\n  const pValue = getPValue(sampleMean, 3);\n\n  return (\n    <Container fluid>\n      <p>Let’s test your assertion by taking a sample and setting our tolerance for making a type-one error α!</p>\n      <SampleSizeAlphaInputs\n        sampleSize={sampleSize}\n        setSampleSize={setSampleSize}\n        alpha={alpha}\n        setAlpha={setAlpha}\n        popSize={popArr.length}\n      />\n      <br/>\n      <Button\n        color=\"primary\"\n        disabled={(sampleSize <= 0) || (sampleSize > popArr.length)}\n        onClick={() => takeSample()}\n      >\n        Sample\n      </Button>\n      <br/>\n      <br/>\n      {(sim >= 1) && (\n        <Container>\n          <DataDisplay\n            mean={sampleMean}\n            standardDev={sampleSD}\n            testStatistic={testStatistic}\n            pValue={pValue}\n            alpha={+alpha}\n          />\n          <br/>\n          <Row className=\"Center\">\n            <p>\n              Press here to reveal the true population distribution and mean.&nbsp;\n              <Button color=\"primary\" onClick={() => setSim(2)}>Reveal</Button>\n            </p>\n          </Row>\n        </Container>\n      )}\n      <br/>\n      {(sim === 2) && <PopulationChartReveal popArr={popArr} pVal={pValue} alpha={+alpha}/>}\n    </Container>\n  )\n}\n\nPerformTest.propTypes = {\n  shape: popShapeType.isRequired,\n  tails: PropTypes.number.isRequired,\n  mue0: PropTypes.number.isRequired,\n}\n","import React from \"react\";\nimport SelectorButtonGroup from \"../SelectorButtonGroup\";\nimport { Row } from \"reactstrap\";\nimport PropTypes from \"prop-types\";\n\nexport default function TestInputs({ testType, setTestType, popShape, setPopType }) {\n\n  return (\n    <div style={{ padding: 20 }}>\n      <Row>\n        <div>\n          Choose a kind of hypothesis test: {\" \"}\n          <SelectorButtonGroup options={[\"oneSample\", \"twoSample\"]} select={setTestType} selected={testType}/>\n        </div>\n      </Row>\n      <Row style={{ padding: 10 }}>\n        <div>\n          <div style={{ padding: 10 }}>Choose a population distribution shape:</div>\n          <SelectorButtonGroup options={[\"Normal\", \"Uniform\", \"Mystery\", \"??Unknown??\"]} select={setPopType} selected={popShape}/>\n        </div>\n      </Row>\n    </div>\n  )\n}\n\nTestInputs.propTypes = {\n  testType: PropTypes.string.isRequired,\n  setTestType: PropTypes.func.isRequired,\n  popShape: PropTypes.string.isRequired,\n  setPopType: PropTypes.func.isRequired\n}\n","import React, { useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { DropdownItem, DropdownToggle, DropdownMenu, Input, InputGroup, InputGroupButtonDropdown, InputGroupText } from \"reactstrap\";\nimport { HYPOTHESIS_OPTIONS } from \"../../lib/constants\";\nimport { stringOrNumberType } from \"../../lib/types\";\n\nexport default function HypothesisSelector({ testType, setHypothesis, mue0, setMue0 }) {\n  const [open, setOpen] = useState(false);\n  const [selected, setSelected] = useState();\n\n  useEffect(() => {\n    setSelected(HYPOTHESIS_OPTIONS[testType][0].hypoText)\n    setHypothesis(HYPOTHESIS_OPTIONS[testType][0])\n  }, [testType, setHypothesis])\n\n  const selectOption = (option) => {\n    setHypothesis(option);\n    setSelected(option.hypoText)\n  }\n\n  const menuOptions = HYPOTHESIS_OPTIONS[testType].map((obj) =>\n    <DropdownItem onClick={() => selectOption(obj)} key={obj.hypoText}>{obj.hypoText}</DropdownItem>\n  );\n\n  return (\n    <InputGroup>\n      <InputGroupButtonDropdown isOpen={open} toggle={() => setOpen(!open)} addonType=\"prepend\">\n        <DropdownToggle caret>\n          {selected}\n        </DropdownToggle>\n        <DropdownMenu>\n          {menuOptions}\n        </DropdownMenu>\n      </InputGroupButtonDropdown>\n      {(testType === \"oneSample\") && (\n        <>\n          <Input\n            className=\"Center\"\n            type=\"number\"\n            value={mue0}\n            step={1}\n            min={1}\n            max={1000}\n            onChange={(event) => setMue0(event.target.value)}\n          />\n          <InputGroupText>gallons of milk per day.</InputGroupText>\n        </>\n      )}\n    </InputGroup>\n  )\n}\n\nHypothesisSelector.propTypes = {\n  testType: PropTypes.string.isRequired,\n  setHypothesis: PropTypes.func.isRequired,\n  mue0: stringOrNumberType.isRequired,\n  setMue0: PropTypes.func.isRequired\n}\n","import React, { useEffect, useState }  from \"react\";\nimport PerformTest from \"./PerformTest.js\";\nimport { Alert, Container, Row, Button } from \"reactstrap\";\nimport TestInputs from \"./TestInputs.js\";\nimport HypothesisSelector from \"./HypothesisSelector.js\";\nimport _ from \"lodash\";\n\nexport default function HTSimulation() {\n  const [pplShape, setPplShape] = useState(\"\");\n  const [testType, setTestType] = useState(\"\");\n  const [hypothesis, setHypothesis] = useState();\n  const [mue0, setMue0] = useState(0);\n  const [stage, setStage] = useState(1);\n\n  useEffect(() => {\n    if ((pplShape !== \"\") && (testType !== \"\")) {\n      setStage(2)\n    }\n  }, [pplShape, testType]);\n\n  return (\n    <div className=\"MainContainer\">\n      <TestInputs testType={testType} setTestType={setTestType} popShape={pplShape} setPopType={setPplShape}/>\n      {(stage >= 2) && (\n        <Container fluid>\n          <Row>\n            <Alert color=\"secondary\" className=\"Center\">\n              <p>The true population distribution will be revealed at the end.</p>\n              {(testType === \"oneSample\") ? (\n                <p>\n                  Suppose that our farmer has changed the variety of feed the cows eat. It might be reasonable to think that the cows now produce more or less milk than they had before. As a researcher, what assertion would you like to make about these cows’ milk production now? Choose an Option and specify a hypothesized amount. To help make an informed guess, note that the distribution of milk production before we changed the feed had a mean of about 64 gallons\n                </p>\n              ) : (\n                <p>\n                  Suppose that our farmer has changed the variety of feed the cows eat. It might be reasonable to think that the cows now produce more or less milk than they had before. As a researcher, what assertion would you like to make about these cows’ milk production now? Let Population 1 denote the cows before the feed change and Population 2 denote the cows after the change. Choose an Option below.\n                </p>\n              )}\n            </Alert>\n          </Row>\n          <br/>\n          <Row style={{width: \"80%\", margin: \"auto\"}}>\n            <HypothesisSelector testType={testType} setHypothesis={setHypothesis} mue0={mue0} setMue0={setMue0}/>\n          </Row>\n          <br/>\n          <Button color=\"primary\" onClick={() => setStage(3)}> Continue </Button>\n          <br/>\n          <br/>\n          {(stage >= 3) && (\n            <Container>\n              <Row>\n                <Alert color=\"secondary\" className=\"Center\" >\n                  <p>This means our null and alternative hypotheses are given by:</p>\n                  <p>{hypothesis.nullH} {(testType === \"oneSample\") && mue0}</p>\n                  <p>{hypothesis.alterH} {(testType === \"oneSample\") && mue0}</p>\n                </Alert>\n              </Row>\n              <br/>\n              <Row className=\"Center\">\n                <PerformTest\n                  shape={(pplShape === \"??Unknown??\") ? _.sample([\"Normal\", \"Uniform\", \"Mystery\"]) : pplShape}\n                  tails={hypothesis.tails}\n                  mue0={+mue0}\n                />\n              </Row>\n            </Container>\n          )}\n        </Container>\n      )}\n    </div>\n  )\n}\n","import React from \"react\";\nimport { Alert } from \"reactstrap\";\nimport HTSimulation from \"./HTSimulation.js\";\n\nexport default function HypothesisTesting() {\n\n  return (\n    <div className=\"MainContainer\">\n      <Alert style={{ width: \"90%\", margin: 'auto' }} color=\"primary\">\n        Hypothesis Testing\n      </Alert>\n      <Alert style={{ width: \"90%\", margin: 'auto' }} color=\"primary\">\n        When we conduct a test of hypotheses, we use the information provided by a sample to make a conclusion about population parameters that we cannot directly observe. We are able to make a connection between the sample and the population by using the rules that govern probability distributions. Due to the central limit theorem, we can make a variety of assertions about the probable location of points in a distribution, which allows us to make assertions about where population parameters might be located relative to the data we have collected from a sample. This allows us to test hypotheses.\n      </Alert>\n      <br/>\n      <HTSimulation/>\n    </div>\n  )\n}\n","/*\n\n  Displays a slider for the user to choose a number of random points and a button to generate them\n\n*/\nimport React, {  useState } from \"react\";\nimport { Button, Input, InputGroup, InputGroupAddon, InputGroupText } from \"reactstrap\";\nimport PropTypes from 'prop-types';\n\nexport default function NewPointsInput({ generatePoints }) {\n  const [numPoints, setNumPoints] = useState(5);\n\n  return (\n    <InputGroup style={{height: \"30px\", width: \"400px\", margin: \"auto\"}}>\n      <Input\n        type='range'\n        className=\"custom-range\"\n        style={{width: \"50%\"}}\n        min={4}\n        max={10}\n        value={numPoints}\n        onChange={(event) => setNumPoints(event.target.value)}\n      />\n      <InputGroupAddon addonType=\"append\">\n        <InputGroupText>{numPoints}</InputGroupText>\n      </InputGroupAddon>\n      <Button\n          outline\n          color=\"primary\"\n          onClick={() => generatePoints(numPoints)}\n        >\n          New Points\n        </Button>\n    </InputGroup>\n  );\n}\n\nNewPointsInput.propTypes = {\n  generatePoints: PropTypes.func.isRequired,\n}\n","/*\n\n  Displays a HighCharts scatterplot for the Least Squares data points\n\n*/\nimport React, { useEffect, useState } from 'react';\nimport '../../styles/dark-unica.css';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official'\nimport 'highcharts/modules/annotations';\nimport { abs } from \"mathjs\";\nimport PropTypes from 'prop-types';\nimport { dataObjectArrayType } from \"../../lib/types.js\"\n\nexport default function LeastSquaresChart({ points, linePoints, setSquareAreas }) {\n  const [myChart, setMyChart] = useState({\n    title: {\n      text: \"\"\n    },\n    legend: {\n      enabled: false\n    },\n    chart: {\n      type: 'line',\n      plotBorderColor: '#000000',\n      plotBorderWidth: 1,\n      margin : [100,100,100,100],\n      width  : 600,\n      height : 600\n    },\n    tooltip: {\n      headerFormat: \"\",\n      pointFormat: \"x: {point.x:.2f}<br/>y: {point.y:.2f}\",\n      hideDelay: 100\n    },\n    xAxis: {\n      title : {\n        enabled: false\n      },\n      min: 0,\n      max: 20,\n      tickInterval: 2\n    },\n    yAxis: {\n      title : {\n        enabled: false\n      },\n      min: 0,\n      max: 20,\n      tickInterval: 2\n    }\n  });\n\n  // returns an array of points to create a square shape in highcharts\n  const buildSquare = (p1, p2) => {\n    const dist = abs(p1.y - p2.y);\n    const lowestPt = p1.y < p2.y ? p1 : p2;\n    return [{\n        x: lowestPt.x,\n        y: lowestPt.y,\n        xAxis: 0,\n        yAxis: 0\n      }, {\n        x: lowestPt.x + dist,\n        y: lowestPt.y,\n        xAxis: 0,\n        yAxis: 0\n      }, {\n        x: lowestPt.x + dist,\n        y: lowestPt.y + dist,\n        xAxis: 0,\n        yAxis: 0\n      }, {\n        x: lowestPt.x,\n        y: lowestPt.y + dist,\n        xAxis: 0,\n        yAxis: 0\n      }, {\n        x: lowestPt.x,\n        y: lowestPt.y,\n        xAxis: 0,\n        yAxis: 0\n      }\n    ];\n  }\n\n  useEffect(() => {\n    // generate pairs for the corresponding points to create squares\n    const pairs = [];\n    linePoints.forEach((p1) => {\n      points.forEach((p2) => {\n        if (p1.x === p2.x) {\n          pairs.push({p1: p1, p2: p2})\n        }\n      });\n    });\n\n    const areas = pairs.map(({p1, p2}) => abs(p1.y - p2.y) ** 2);\n    setSquareAreas(areas);\n\n    // create the actual square objects for highcharts\n    const squares = pairs.map(({p1, p2}) => (\n      {\n        dashStyle: \"solid\",\n        fill: \"rgba(255, 255, 255, 0)\",\n        points: buildSquare(p1, p2),\n        type: 'path'\n      })\n    );\n\n    const newChart = {\n      series: [\n        {\n          type: \"scatter\",\n          marker: {\n            radius: 5,\n          },\n          data: points,\n        },\n        {\n          type: 'line',\n          data: linePoints,\n          marker: {\n            enabled: true,\n            fillColor: 'orange'\n          },\n          label: {\n            enabled: false\n          }\n        }\n      ],\n      annotations: [{\n        draggable: '',\n        shapes: squares\n      }]\n    }\n\n    setMyChart(newChart);\n  }, [points, linePoints, setSquareAreas]);\n\n  return (\n    <HighchartsReact highcharts={Highcharts} options={myChart}/>\n  );\n}\n\nLeastSquaresChart.propTypes = {\n  points: dataObjectArrayType.isRequired,\n  linePoints: dataObjectArrayType.isRequired,\n  setSquareAreas: PropTypes.func.isRequired\n}\n","/*\n\n  Displays a button for the user to plot their guess or a button to generate the correct best fit line\n\n*/\nimport React from \"react\";\nimport { Button } from \"reactstrap\";\nimport PropTypes from 'prop-types';\n\nexport default function PlotLine({ stage, setStage, squareAreas, generateBestLine }) {\n\n  return (\n    (stage === 2) ? (\n      <Button outline color='primary' onClick={() => setStage(3)}>Plot Your Guess</Button>\n    ) : (\n      <div>\n        <p>Sum Squares: {squareAreas.reduce((a, b) => a + b, 0).toFixed(2)}</p>\n        <Button outline color=\"info\" onClick={() => generateBestLine()}>Reveal the Least Squares Line</Button>\n      </div>\n    )\n  );\n}\n\nPlotLine.propTypes = {\n  stage: PropTypes.number.isRequired,\n  setStage: PropTypes.func.isRequired,\n  squareAreas: PropTypes.arrayOf(PropTypes.number).isRequired,\n  generateBestLine: PropTypes.func.isRequired,\n}\n","/*\n\n  Displays the Least Squares simulation\n\n*/\nimport React, { useEffect, useState } from \"react\";\nimport { Row, Col } from \"reactstrap\";\nimport NewPointsInput from \"./NewPointsInput\";\nimport LeastSquaresChart from \"./LeastSquaresChart.js\";\nimport PlotLine from \"./PlotLine.js\";\nimport regression from \"regression\";\nimport InputSlider from \"../InputSlider.js\";\nimport { random } from \"mathjs\";\n\nexport default function LeastSquaresSimulation() {\n  const [points, setPoints] = useState([]);\n  const [linePoints, setLinePoints] = useState([]);\n  const [stage, setStage] = useState(1);\n  const [squareAreas, setSquareAreas] = useState([]);\n  const [slope, setSlope] = useState(1);\n  const [intercept, setIntercept] = useState(1);\n\n  useEffect(() => {\n    if (stage === 2) {\n      setLinePoints([]);\n      setSquareAreas([]);\n      setSlope(1);\n      setIntercept(1);\n    }\n  }, [stage]);\n\n  useEffect(() => {\n    if (stage === 3) {\n      setSquareAreas([]);\n      const linearPts = [{x: 0, y: 0}, ...points].map((point) => ({x: point.x, y: (point.x * +slope) + +intercept}));\n      linearPts.sort((a, b) => a.x - b.x);\n      setLinePoints(linearPts);\n    }\n  }, [stage, slope, intercept, points]);\n\n  const generatePoints = (num) => {\n    const newPoints = [];\n    for (let i = 0; i < num; i++) {\n      const x = random() * 15 + 2;\n      const y = random() * 15 + 2;\n      newPoints.push({x: x, y: y});\n    }\n    setPoints(newPoints);\n    setStage(2);\n  }\n\n  const generateBestLine = () => {\n    const { equation } = regression.linear(points.map(({x, y}) => [x, y]), { precision: 1 });\n    setSlope(equation[0]);\n    setIntercept(equation[1]);\n  }\n\n  return (\n    <div>\n      <Row style={{marginLeft: -100, marginRight: 0}}>\n        <Col xs=\"auto\">\n          <LeastSquaresChart points={points} linePoints={linePoints} setSquareAreas={setSquareAreas}/>\n        </Col>\n        <Col xs={{size: 3, offset: 3}} md={{size: 3, offset: 0}} style={{paddingTop: \"100px\"}}>\n          <NewPointsInput generatePoints={generatePoints}/>\n          <br/>\n          {(stage === 2) && <p>Guess a Slope and Y-Intercept to fit the points</p>}\n          {(stage === 3) && <p>Want to try again? Guess a different slope and y-intercept to reduce the Sum of Squares!</p>}\n          {(stage >= 2) &&\n            <div>\n              <h4>Intercept</h4>\n              <InputSlider value={intercept} min={-20} max={20} step={0.1} onChange={(value) => setIntercept(value)}/>\n              <br/>\n              <h4>Slope</h4>\n              <InputSlider value={slope} min={-10} max={10} step={0.1} onChange={(value) => setSlope(value)}/>\n              <br/>\n              <PlotLine stage={stage} setStage={setStage} squareAreas={squareAreas} generateBestLine={generateBestLine}/>\n            </div>\n          }\n        </Col>\n      </Row>\n    </div>\n  )\n}\n","/*\n\n  A container component that holds the description and simulation for Least Squares\n\n*/\nimport React from \"react\";\nimport LeastSquaresSimulation from \"./LeastSquaresSimulation\";\nimport { Alert } from \"reactstrap\";\n\nexport default function LeastSquares() {\n  return (\n    <div className=\"MainContainer\">\n      <Alert style={{ width: \"50%\", margin: 'auto' }} color=\"primary\">\n        Least Squares\n      </Alert>\n      <br/>\n      <LeastSquaresSimulation/>\n    </div>\n  );\n}\n","/*\n\n  A container component for the various simulations\n\n*/\nimport React from 'react';\nimport LawOfLargeNumbers from './LawOfLargeNumbers/LawOfLargeNumbers.js';\nimport CentralLimitTheorem from './CentralLimitTheorem/CentralLimitTheorem.js';\nimport JointDistributions from './JointDistributions/JointDistributions.js';\nimport OmittedVariableBias from \"./OmittedVariableBias/OmittedVariableBias.js\";\nimport ConfidenceIntervals from './ConfidenceIntervals/ConfidenceIntervals.js';\nimport HypothesisTesting from './HypothesisTesting/HypothesisTesting.js';\nimport { Button } from 'reactstrap';\nimport LeastSquares from './LeastSquares/LeastSquares.js';\nimport PropTypes from 'prop-types';\n\nexport default function SimulationContainer({ mode, setMode }) {\n  return (\n    <div className=\"App\">\n      <Button outline color='danger' id=\"Menu\" onClick={() => setMode(\"Home\")}>MENU</Button>\n      <div className=\"MiniLogo\"/>\n      {mode === 'Law of Large Numbers' && <LawOfLargeNumbers/>}\n      {mode === 'Central Limit Theorem' && <CentralLimitTheorem/>}\n      {mode === 'Joint Distributions' && <JointDistributions/>}\n      {mode === 'Least Squares' && <LeastSquares/>}\n      {mode === 'Omitted Variable Bias' && <OmittedVariableBias/>}\n      {mode === 'Confidence Intervals' && <ConfidenceIntervals/>}\n      {mode === 'Hypothesis Testing' && <HypothesisTesting/>}\n    </div>\n  )\n}\n\nSimulationContainer.propTypes = {\n  setMode: PropTypes.func.isRequired,\n  mode: PropTypes.oneOf([\n    'Home',\n    'Law of Large Numbers',\n    'Central Limit Theorem',\n    'Joint Distributions',\n    'Least Squares',\n    'Omitted Variable Bias',\n    'Confidence Intervals',\n    'Hypothesis Testing'\n  ]).isRequired,\n}\n","/*\n\n  Displays the StartHere button and then the menu once the button is clicked\n\n*/\nimport React, { useEffect, useState } from 'react';\nimport SimBar from './SimBar.js';\nimport StartHere from './StartHere';\nimport { Fade } from 'reactstrap';\nimport SimulationContainer from './SimulationContainer.js';\n\nexport default function SimulationMenu() {\n  const [mode, setMode] = useState(\"Home\");\n  const [start, setStart] = useState(true);\n  const [logo, setLogo] = useState(true);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setLogo(false);\n    }, 3500);\n  }, []);\n\n  return (\n    start ? (\n      <div>\n        <div className=\"App-bg\"/>\n        {!logo && <StartHere start={start} showApp={() => setStart(false)}/>}\n      </div>\n    ) : (\n      <div>\n        {(mode === \"Home\") ? (\n          <Fade in={(mode === \"Home\")} style={{ display: (mode === \"Home\") ? 'block' : 'none' }}>\n            <div className=\"Nav\" key={'unkey'}>\n              <SimBar setSection={setMode}/>\n            </div>\n          </Fade>\n        ) : (\n          <SimulationContainer mode={mode} setMode={setMode}/>\n        )}\n      </div>\n    )\n  );\n}\n","import React from 'react';\nimport styles from './styles/App.css';  // eslint-disable-line\nimport SimulationMenu from './components/SimulationMenu.js';\n\nexport default function App() {\n\n  return (\n    <div className=\"Wrapper\">\n      <SimulationMenu/>\n    </div>\n  );\n}\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    || window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404\n        || response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\n// import registerServiceWorker from './registerServiceWorker';\nimport { unregister } from './registerServiceWorker';\nunregister();\n\nReactDOM.render(<App />, document.getElementById('root'));\n// registerServiceWorker();\n"],"sourceRoot":""}